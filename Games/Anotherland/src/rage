act_comm.c:	if (ch->pcdata->quest < amount)
act_comm.c:	ch->pcdata->quest -= amount;
act_comm.c:	sprintf(buf, "%s puts %d qps on %s's head, who now have a %d qps bounty.",ch->name, amount, victim->name, victim->pcdata->bounty);
act_comm.c:    if (RTIMER(ch->in_room, RTIMER_SILENCE) != 0)
act_comm.c:    REMOVE_BIT(ch->deaf, channel);
act_comm.c:if (ch->flag4==1)
act_comm.c:	sprintf( buf, "%s #Pwhines#n '#1$t#n'.",ch->name ); 
act_comm.c:	sprintf( buf, "#0*#n<#RFLAME#n>#0* #y<=|#7%s#y|=> '#G$t#n'.",ch->name);
act_comm.c:	if (ch->level >= 6)
act_comm.c:	sprintf( buf, "#0[#RI#rM#RM#0]#0[#GO#gO#GC#0] #7%s#0: #n$t#n",ch->name);
act_comm.c:	else if (ch->level <= 5)
act_comm.c:	sprintf( buf, "#0[#GO#gO#GC#0] #7%s#0: #n$t#n",ch->name);
act_comm.c:	if (ch->pcdata->rpalign == RPALIGN_LIGHT)
act_comm.c:	sprintf( buf, "#C[#RR#LP#7GOOD#C]#L{-#7%s#L-} #n'#R$t#n'.",ch->name);
act_comm.c:        else if (ch->pcdata->rpalign == RPALIGN_DARK)
act_comm.c:	sprintf( buf, "#C[#RR#LP#0DARK#C]#L{-#7%s#L-} #n'#R$t#n'.",ch->name);
act_comm.c:        else if (ch->pcdata->rpalign == RPALIGN_LOVE)
act_comm.c:        sprintf( buf, "#C[#RR#LP#LLOVE#C]#L{-#7%s#L-} #n'#R$t#n'.",ch->name);
act_comm.c:        else if (ch->pcdata->rpalign == RPALIGN_NEUTRAL)
act_comm.c:	sprintf( buf, "#C[#RR#LP#0M#7E#0R#7C#C]#L{-#7%s#L-} #n'#R$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "#C[#RR#LP#C]#L{-#7%s#L-} #n'#R$t#n'.",ch->name);	
act_comm.c:  if (!str_cmp(ch->name,"Dertaherup"     ))
act_comm.c:  if (!str_cmp(ch->name, "Beorn"))
act_comm.c:        sprintf( buf, "%s #rTHUNDERS MIGHTILY#n '#1$t#n'.",ch->name);
act_comm.c:  if (ch->trust > 7 && IS_SET(ch->act, PLR_WIZINVIS))
act_comm.c:  if (ch->trust > 7 )
act_comm.c:	sprintf( buf, "#0[#7%s#0] #n'#1$t#n'.", ch->name);
act_comm.c://  else if (!str_cmp(ch->name, "Malklav"))
act_comm.c://        sprintf( buf, "%s #Pwhines annoyingly#n '#1$t#n'.",ch->name);
act_comm.c://  else if (!str_cmp(ch->name, "Beorn"))
act_comm.c://        sprintf( buf, "%s #rTHUNDERS MIGHTILY#n '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s barks '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s chants '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s whispers '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s snarls '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s preaches '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s booms '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s squicks '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s growls '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s chitters '#1$t#n'.",ch->name);
act_comm.c:	sprintf( buf, "%s %ss '#1$t#n'.",ch->name,     verb );
act_comm.c:	sprintf( buf, "%s %ss '#1$t#n'.",ch->name,     verb );
act_comm.c:	sprintf( buf, "#0[#y%s#0] '#y$t#0'#n.",ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#7[#GGame#7: #R%s#7] #G$t#n", ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#RAUCTION#7: %s	#L-#g> #y$t#n", ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#0[#7%s#0]#C '$t'.#n",ch->name );
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#0[#R%s#0]#C '$t'.#n",ch->name );
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#n{{#0%s#n}}#C '$t'.#n",ch->name );
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#G*#C(>#R%s#C<)#G* #C'$t'.#n",ch->name );
act_comm.c:   position    = ch->position;
act_comm.c:   ch->position    = POS_STANDING;
act_comm.c:   ch->position    = position;
act_comm.c:	sprintf( buf, "#p{#0-#p}#0%s#p{#0-#p} #C'$t'.#n",ch->name);
act_comm.c:	position   = ch->position;
act_comm.c:	ch->position = POS_STANDING;
act_comm.c:	ch->position = position;
act_comm.c:	sprintf( buf, "#y((#L%s#y))#C '$t'.#n",ch->name );
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:		sprintf(buf, "#C***#y%s#C*** '$t'.#n",ch->name );
act_comm.c:		position = ch->position;
act_comm.c:		ch->position = position;
act_comm.c:		sprintf( buf, "#C-=#R%s#C=-  '$t'.#n",ch->name );
act_comm.c:		position = ch->position;
act_comm.c:		ch->position = position;
act_comm.c:	sprintf( buf, "#0.x.#7%s#0.x.#C '$t'.#n",ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#y{#R%s#y}#C '$t'.#n",ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#G>*<#7%s#G>*<#C '$t'.#n",ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#y<#o<#y<<#G%s#y>>#o>#y> #C'$t#C'.", ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "%s the newbie chats #7'#R$t#7'.#n",ch->name);
act_comm.c:	sprintf( buf, "%s the newbie helper chats #7'#R$t#7'.#n",ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#R}}} #n%s#7: #P%s #R{{{#n '#7$t#n'.#n", kingdom_table[ch->pcdata->kingdom].whoname, ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#P.o0#0%s#P0o.#C '$t'.#n",ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf( buf, "#0.x[#l%s#0]x. #C '$t'.#n",ch->name );
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	    sprintf( buf, "#R<<#0%s#R>>#C $t.#n" , ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf(buf, "#c~#C(#y%s#C)#c~ #C'$t#C'.#n", ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:	sprintf(buf, "#R-#r*#R-#o%s#R-#r*#R-#n #R'$t#R'.", ch->name);
act_comm.c:	position	= ch->position;
act_comm.c:	ch->position	= POS_STANDING;
act_comm.c:	ch->position	= position;
act_comm.c:        sprintf(buf, "#G-#g*#G-#c%s#G-#g*#G-#n #G'$t#G'.", ch->name);
act_comm.c:        position        = ch->position;
act_comm.c:        ch->position    = POS_STANDING;
act_comm.c:        ch->position    = position;
act_comm.c:        sprintf(buf, "#R=#y*#R=#r%s#R=#y*#R=#n #o'$t#o'.", ch->name);
act_comm.c:        position        = ch->position;
act_comm.c:        ch->position    = POS_STANDING;
act_comm.c:        ch->position    = position;
act_comm.c:        sprintf(buf, "#P*#C(#R-#C)#P*%s#P*#C(#R-#C)#P* #C'#7$t#C'.", ch->name);
act_comm.c:        position        = ch->position;
act_comm.c:        ch->position    = POS_STANDING;
act_comm.c:        ch->position    = position;
act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) ) return; // silenced, and they don't know it :)
act_comm.c:	&&  !IS_SET(och->deaf, channel) )
act_comm.c:	     och->pcdata->kingdom != ch->pcdata->kingdom && !IS_IMMORTAL(och))) continue;
act_comm.c:		if ((och->in_room) && (ch->in_room))
act_comm.c:			if ((och->in_room == ch->in_room))
act_comm.c:			else if ((och->in_room->area == ch->in_room->area ))
act_comm.c:	    &&	 vch->in_room->area != ch->in_room->area )
act_comm.c:	    position		= vch->position;
act_comm.c:		vch->position	= POS_STANDING;
act_comm.c:	    vch->position	= position;
act_comm.c:     sprintf(buf, "#0[#7%s#0]#n chats '#R%s#n'.", ch->name, argument);
act_comm.c:     if (ch->level >= 6)
act_comm.c:     sprintf( buf, "#0[#RI#rM#RM#0]#0[#GO#gO#GC#0] #7%s#0: #n%s#n",ch->name, argument);
act_comm.c:     else if (ch->level <= 5)
act_comm.c:     sprintf( buf, "#0[#GO#gO#GC#0] #7%s#0: #n%s#n",ch->name, argument);
act_comm.c:     sprintf(buf, "#0[#7%s#0]#n roleplays '#R%s#n'.", ch->name, argument);
act_comm.c:     sprintf(buf, "#7[#GGAME#7] #0[#7%s#0]#n '#R%s#n'.", ch->name, argument);
act_comm.c:     sprintf(buf, "#0[#7%s#0]#n bitches '#R%s#n'.", ch->name, argument);
act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->deaf, CHANNEL_SOCIAL))
act_comm.c:    if(IS_SET(ch->act, PLR_SILENCE))
act_comm.c:    switch (ch->position)
act_comm.c:                !IS_SET(vch->deaf,CHANNEL_SOCIAL))
act_comm.c:                !IS_SET(vch->deaf,CHANNEL_SOCIAL))
act_comm.c:                !IS_SET(vch->deaf, CHANNEL_SOCIAL))
act_comm.c:     sprintf(buf, "#0[#7Immortal %s#0]#n '#R%s#n'.", ch->name, argument);
act_comm.c:    if (IS_NPC(ch) || IS_SET(ch->deaf, CHANNEL_NEWBIE))
act_comm.c:      iOldKing = ch->pcdata->kingdom;
act_comm.c:      ch->pcdata->kingdom = iTempKing;
act_comm.c:      ch->pcdata->kingdom = iOldKing;
act_comm.c:    else if (IS_NPC(ch) || ch->pcdata->kingdom == 0)
act_comm.c:  if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_ALTAR &&
act_comm.c:      ch->class == 0 && ch->position != POS_FIGHTING)
act_comm.c:		ch->hit  = ch->max_hit;
act_comm.c:		ch->mana = ch->max_mana;
act_comm.c:		ch->move = ch->max_move;
act_comm.c:		ch->loc_hp[0] = 0;
act_comm.c:		ch->loc_hp[1] = 0;
act_comm.c:		ch->loc_hp[2] = 0;
act_comm.c:		ch->loc_hp[3] = 0;
act_comm.c:		ch->loc_hp[4] = 0;
act_comm.c:		ch->loc_hp[5] = 0;
act_comm.c:		ch->loc_hp[6] = 0;
act_comm.c:	if (ch->pcdata->stats[DEMON_CURRENT] < 1)
act_comm.c:	if ( ( victim = get_char_world(ch, ch->lord) ) == NULL )
act_comm.c:	if (ch->pcdata->stats[DEMON_CURRENT] == 1)
act_comm.c:		ch->pcdata->stats[DEMON_CURRENT]);
act_comm.c:	victim->pcdata->stats[DEMON_CURRENT] += ch->pcdata->stats[DEMON_CURRENT];
act_comm.c:	victim->pcdata->stats[DEMON_TOTAL] += ch->pcdata->stats[DEMON_CURRENT];
act_comm.c:	ch->pcdata->stats[DEMON_CURRENT] = 0;
act_comm.c:    if (IS_SET(ch->deaf, CHANNEL_PRAY))
act_comm.c:    if (RTIMER(ch->in_room, RTIMER_SILENCE) != 0)
act_comm.c:	(IS_SET(ch->special,SPC_WOLFMAN) || IS_POLYAFF(ch, POLY_WOLF) 
act_comm.c:	|| (IS_CLASS(ch, CLASS_VAMPIRE) && ch->pcdata->stats[UNI_RAGE] > 0)))
act_comm.c:    else if (IS_NPC(ch) && ch->pIndexData->vnum == MOB_VNUM_FROG)
act_comm.c:    else if (IS_NPC(ch) && ch->pIndexData->vnum == MOB_VNUM_RAVEN)
act_comm.c:    else if (IS_NPC(ch) && ch->pIndexData->vnum == MOB_VNUM_CAT)
act_comm.c:    else if (IS_NPC(ch) && ch->pIndexData->vnum == MOB_VNUM_DOG)
act_comm.c:    else if (!IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10)
act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) ) return;
act_comm.c:    if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
act_comm.c:    to = ch->in_room->people;
act_comm.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
act_comm.c:	    ch->pcdata->chobj->in_room != NULL &&
act_comm.c:	    ch->in_room == to->in_room)
act_comm.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
act_comm.c:	    ch->pcdata->chobj->in_obj != NULL &&
act_comm.c:	    ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
act_comm.c:	    sprintf(name, ch->short_descr);
act_comm.c:	    sprintf(name, ch->morph);
act_comm.c:	    sprintf(name, ch->morph);
act_comm.c:	    sprintf(name, ch->name);
act_comm.c:    for ( rt = ch->in_room->roomtext; rt != NULL; rt = rt->next )
act_comm.c:		if (!is_in(ch->name, rt->name) ) continue;
act_comm.c:		    vch_next	= vch->next;
act_comm.c:		    if ( vch->in_room == NULL ) continue;
act_comm.c:		    if ( vch->in_room == ch->in_room
act_comm.c:			&& vch->pIndexData->vnum == rt->mob )
act_comm.c:		    REMOVE_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:		    SET_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:		    obj = create_object(get_obj_index(rt->power), ch->level);
act_comm.c:		    else obj_to_room(obj,ch->in_room);
act_comm.c:		    char_to_room(mob,ch->in_room);
act_comm.c:		    obj_to_room(obj,ch->in_room);
act_comm.c:    || ( IS_NPC(victim) && victim->in_room != ch->in_room ) )
act_comm.c:	    || str_cmp(ch->name, victim->pcdata->marriage))
act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) ) return;
act_comm.c:    || ( victim->in_room != ch->in_room ) )
act_comm.c:    if ( ( victim = ch->reply ) == NULL )
act_comm.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) ) return;
act_comm.c:    if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
act_comm.c:    to = ch->in_room->people;
act_comm.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
act_comm.c:	    ch->pcdata->chobj->in_room != NULL &&
act_comm.c:	    ch->in_room == to->in_room)
act_comm.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
act_comm.c:	    ch->pcdata->chobj->in_obj != NULL &&
act_comm.c:	    ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
act_comm.c:	    sprintf(name, ch->short_descr);
act_comm.c:	    sprintf(name, ch->morph);
act_comm.c:	    sprintf(name, ch->morph);
act_comm.c:	    sprintf(name, ch->name);
act_comm.c:      if(ch->short_descr != NULL) strcpy(you, ch->short_descr);
act_comm.c:      if (ch->name != NULL) strcpy(you, ch->name);
act_comm.c:    if (ch->in_room->vnum != ROOM_VNUM_IN_OBJECT)
act_comm.c:    to = ch->in_room->people;
act_comm.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
act_comm.c:	    ch->pcdata->chobj->in_room != NULL &&
act_comm.c:	    ch->in_room == to->in_room)
act_comm.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
act_comm.c:	    ch->pcdata->chobj->in_obj != NULL &&
act_comm.c:	    ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
act_comm.c:	    sprintf(name, ch->short_descr);
act_comm.c:	    sprintf(name, ch->morph);
act_comm.c:	    sprintf(name, ch->morph);
act_comm.c:	    sprintf(name, ch->name);
act_comm.c:    if ( ch->position == POS_FIGHTING )
act_comm.c:    if ( ch->position  != POS_STANDING )
act_comm.c:      ch->position = POS_STANDING;
act_comm.c:    if (ch->fight_timer >0) 
act_comm.c:    if (ch->in_room != NULL)
act_comm.c:      if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
act_comm.c:    /*if (ch->level == (MAX_LEVEL - 13) )
act_comm.c:    if (ch->level > 6) ; /* do nothing */
act_comm.c:    else if (IS_SET(ch->pcdata->jflags, JFLAG_SETLOGOUT)) logout_message(ch);
act_comm.c:    else if (ch->pcdata->obj_vnum == 0)
act_comm.c:	  ch->pcdata->switchname, MUDNAME);
act_comm.c:    for(obj = ch->carrying; obj != NULL; obj = obj_next)
act_comm.c:      if((obj->questowner != NULL) && (strcmp(obj->questowner, ch->pcdata->switchname)))
act_comm.c:             && (gch->in_room != NULL)
act_comm.c:             && !strcmp(obj->questowner, gch->pcdata->switchname))
act_comm.c:    if (IS_SET(ch->extra, EXTRA_OSWITCH)) do_humanform(ch,"");
act_comm.c:    if (ch->gladiator  != NULL)
act_comm.c:    ch->gladiator	= NULL; /* set player to bet on to NULL */
act_comm.c:    if (ch->challenger != NULL)
act_comm.c:    ch->challenger = NULL;
act_comm.c:    if (ch->challenged != NULL)
act_comm.c:    ch->challenged = NULL;
act_comm.c:    if ( (mount = ch->mount) != NULL ) do_dismount(ch,"");
act_comm.c:	if (ch->pcdata->in_progress)
act_comm.c:		free_note(ch->pcdata->in_progress);
act_comm.c:    d = ch->desc;
act_comm.c:    if (ch->pcdata->obj_vnum != 0)
act_comm.c:    if (ch->in_room != NULL) char_from_room(ch);
act_comm.c:    sprintf( log_buf, "%s has quit.", ch->name );
act_comm.c:    sprintf( log_buf, "%s has %d QP|%d Stores upon logout.", ch->name, ch->pcdata->quest, ch->pcdata->store);
act_comm.c:    if (ch->pcdata->chobj != NULL) extract_obj(ch->pcdata->chobj);
act_comm.c:    if ( ch->level < 2 )
act_comm.c:    if ( ch->level < 2 ) return;
act_comm.c:	if ( ch->played  6789;
act_comm.c:    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master != NULL )
act_comm.c:	act( "But you'd rather follow $N!", ch, NULL, ch->master, TO_CHAR );
act_comm.c:	if ( ch->master == NULL )
act_comm.c:    if ( ch->master != NULL )
act_comm.c:    if ( ch->master != NULL )
act_comm.c:    ch->master	      = master;
act_comm.c:    ch->leader	      = NULL;
act_comm.c:    if ( ch->master == NULL )
act_comm.c:	REMOVE_BIT( ch->affected_by, AFF_CHARM );
act_comm.c:    if ( can_see( ch->master, ch ) )
act_comm.c:	act( "$n stops following you.", ch, NULL, ch->master, TO_VICT );
act_comm.c:    act( "You stop following $N.", ch, NULL, ch->master, TO_CHAR    );
act_comm.c:    ch->master = NULL;
act_comm.c:    ch->leader = NULL;
act_comm.c:    if ( ch->master != NULL )
act_comm.c:    ch->leader = NULL;
act_comm.c:    for ( fch = char_list; fch != NULL; fch = fch->next )
act_comm.c:	if ( fch->master == ch )
act_comm.c:	if ( fch->leader == ch )
act_comm.c:	    fch->leader = fch;
act_comm.c:    if( IS_SET(ch->in_room->room_flags, ROOM_ORDER) || IS_SET(ch->in_room->room_flags, ROOM_SAFE))
act_comm.c:	&& ((ch->pcdata->stats[UNI_GEN] > 2) || ch->pcdata->kingdom != victim->pcdata->kingdom))
act_comm.c:    for ( och = ch->in_room->people; och != NULL; och = och_next )
act_comm.c:	och_next = och->next_in_room;
act_comm.c:	&&   och->master == ch
act_comm.c:	|| (ch->pcdata->stats[UNI_GEN] == 2 && (fAll || och == victim) &&
act_comm.c:	ch->pcdata->kingdom == och->pcdata->kingdom))
act_comm.c:	&& ch->pcdata->stats[UNI_GEN] < och->pcdata->stats[UNI_GEN] && 
act_comm.c:	ch->pcdata->kingdom == och->pcdata->kingdom)
act_comm.c:    if (ch->power[DISC_VAMP_DOMI] < 1 && IS_CLASS(ch, CLASS_VAMPIRE))
act_comm.c:    if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT) && ch->pcdata->powers[NECROMANCY] < 4)
act_comm.c:    if (ch->spl[RED_MAGIC] < 1)
act_comm.c:    if( IS_SET(ch->in_room->room_flags, ROOM_ORDER) || IS_SET(ch->in_room->room_flags, ROOM_SAFE))
act_comm.c:  if (ch->power[DISC_VAMP_DOMI] > 2)
act_comm.c:  else if (ch->power[DISC_VAMP_DOMI] > 3)
act_comm.c:  else if (ch->power[DISC_VAMP_DOMI] > 4)
act_comm.c:  if ( ch->power[DISC_VAMP_DOMI] > 1 )
act_comm.c:    if ( IS_NPC(victim) && ( victim->level >= awe * ch->spl[RED_MAGIC]* 2 || victim->level > 500))
act_comm.c:    else if ( victim->spl[BLUE_MAGIC] >= (ch->spl[RED_MAGIC]/2) )
act_comm.c:    if ( ch->power[DISC_VAMP_DOMI] > 1 )
act_comm.c:	leader = (ch->leader != NULL) ? ch->leader : ch;
act_comm.c:	for ( gch = char_list; gch != NULL; gch = gch->next )
act_comm.c:		    gch->hit,	gch->max_hit,
act_comm.c:		    gch->mana,	gch->max_mana,
act_comm.c:		    gch->move,	gch->max_move,
act_comm.c:		    gch->exp	);
act_comm.c:    if ( ch->master != NULL || ( ch->leader != NULL && ch->leader != ch ) )
act_comm.c:    if ( IS_SET( ch->act, PLR_NO_TELL ) )
act_comm.c:    sprintf( buf, "#G%s tells the group #R'#G%s#R'\n\r#n", ch->name, argument );
act_comm.c://    for ( gch = char_list; gch != NULL; gch = gch->next )
act_comm.c:    if ( ach->leader != NULL ) ach = ach->leader;
act_comm.c:    if ( bch->leader != NULL ) bch = bch->leader;
act_comm.c:    if (IS_SET(ch->in_room->room_flags, ROOM_DARK))
act_comm.c:	REMOVE_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:    SET_BIT(ch->in_room->room_flags, ROOM_DARK);
act_comm.c:    in_room  = ch->in_room->vnum;
act_comm.c:    in_room  = ch->in_room->vnum;
act_comm.c:    in_room  = ch->in_room->vnum;
act_comm.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_comm.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_comm.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_comm.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_comm.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_info.c:  value += ch->damroll;
act_info.c: /* if (ch->pcdata->mod_str > 0)
act_info.c:  value += (ch->pcdata->mod_str * 10);
act_info.c:    value += ch->xdamroll;
act_info.c:  if( ch-> level < LEVEL_AVATAR ) return value;
act_info.c:  if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->rage > 0)
act_info.c:    value += ch->rage;
act_info.c:  if (IS_CLASS(ch, CLASS_VAMPIRE) && IS_SET(ch->polyaff, POLY_WOLF) )
act_info.c:  value += ch->wpn[0];
act_info.c:  if (IS_CLASS(ch, CLASS_PHOENIX) && ch->rage > 0)
act_info.c:    value += ch->rage;
act_info.c:  	value += 50*ch->chi[CURRENT];
act_info.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->rage > 0)
act_info.c:  	value += ch->rage;
act_info.c:  if (IS_SET(ch->special,SPC_WOLFMAN) && ch->rage > 99)
act_info.c:    value += ch->rage*5;
act_info.c:  if (IS_CLASS(ch, CLASS_PHOENIX) && ch->rage > 0)
act_info.c:    value += ch->rage*2.5;
act_info.c:  if (IS_CLASS(ch, CLASS_DEMON) && ch->rage > 0)
act_info.c:    value += ch->rage;
act_info.c:        if (IS_CLASS( ch,CLASS_DEMON) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:	value += (( ch->pcdata->stats[DEMON_POWER]) * ch->pcdata->stats[DEMON_POWER]);
act_info.c:	else if (IS_CLASS(ch, CLASS_DROW) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:	value += (( ch->pcdata->stats[DEMON_POWER]) * ch->pcdata->stats[DEMON_POWER]);
act_info.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_CHIKYU] >= 6
act_info.c:	&& ch->pcdata->powers[HARA_KIRI] > 0)
act_info.c:	value += (ch->pcdata->classfour[DRAGON_AGE] * 100);
act_info.c:        value += (ch->pcdata->classfour[DRAGON_POWER] * 100);
act_info.c:        value += (ch->pcdata->classtwo[ELF_WAR_RAGE] * 125);
act_info.c:        value += (ch->pcdata->classtwo[ELF_WAR_FURY] * 125);
act_info.c:	int wpn = ch->wpn[1];
act_info.c:	int total = ch->wpn[0] + ch->wpn[2] + ch->wpn[3] + ch->wpn[4] + ch->wpn[5] +
act_info.c:		    ch->wpn[6] + ch->wpn[7] + ch->wpn[8] + ch->wpn[9] + ch->wpn[10] +
act_info.c:		    ch->wpn[11] + ch->wpn[12];
act_info.c:      if (ch->pcdata->upgrade_level > 0) value += ch->pcdata->upgrade_level*100;
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->upgrade_level > 0)
act_info.c:        value += ch->pcdata->upgrade_level * 200;
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->upgrade_level > 4)
act_info.c:        value += (ch->pcdata->upgrade_level-3) * 100;
act_info.c:    if ( IS_NPC(ch) && IS_SET(ch->act,ACT_KILLER) ) value += 2000;
act_info.c:    value += ch->hitroll;
act_info.c:  /*  if (ch->pcdata->mod_dex > 0)
act_info.c:     value += (ch->pcdata->mod_dex * 10);
act_info.c:    if( ch-> level < LEVEL_AVATAR ) return value;
act_info.c:  if (IS_CLASS(ch, CLASS_PHOENIX) && ch->rage > 0)
act_info.c:    value += ch->rage;
act_info.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->rage > 0)
act_info.c:	  value += ch->rage;
act_info.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && IS_SET(ch->polyaff, POLY_WOLF) )
act_info.c:          value += ch->wpn[0];
act_info.c:        value += 50*ch->chi[CURRENT];
act_info.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->rage > 0)
act_info.c:	value += ch->rage;
act_info.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_CHIKYU] >= 6
act_info.c:	&& ch->pcdata->powers[HARA_KIRI] > 0)
act_info.c:    if (IS_SET(ch->special,SPC_WOLFMAN) && ch->rage > 99)
act_info.c:	  value += ch->rage *5;
act_info.c:    if (IS_CLASS(ch, CLASS_DEMON) && ch->rage > 0)
act_info.c:	  value += ch->rage;
act_info.c:    if (IS_CLASS(ch, CLASS_PHOENIX) && ch->rage > 0)
act_info.c:          value+= ch->rage*2.5;
act_info.c:    if (IS_CLASS( ch,CLASS_DEMON) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:       value += (( ch->pcdata->stats[DEMON_POWER]) * ch->pcdata->stats[DEMON_POWER]);
act_info.c:        else if (IS_CLASS(ch, CLASS_DROW) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:        value += (( ch->pcdata->stats[DEMON_POWER]) * ch->pcdata->stats[DEMON_POWER]);
act_info.c:        value += (ch->pcdata->classfour[DRAGON_AGE] * 100);
act_info.c:        value += (ch->pcdata->classfour[DRAGON_POWER] * 100);
act_info.c:        value += (ch->pcdata->classtwo[ELF_WAR_RAGE] * 125);
act_info.c:        value += (ch->pcdata->classtwo[ELF_WAR_FURY] * 125);
act_info.c:	int wpn = ch->wpn[1];
act_info.c:	int total = ch->wpn[0] + ch->wpn[2] + ch->wpn[3] + ch->wpn[4] + ch->wpn[5] +
act_info.c:		    ch->wpn[6] + ch->wpn[7] + ch->wpn[8] + ch->wpn[9] + ch->wpn[10] +
act_info.c:		    ch->wpn[11] + ch->wpn[12];
act_info.c:      if (ch->pcdata->upgrade_level > 0) value += ch->pcdata->upgrade_level * 100; 
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->upgrade_level > 0)
act_info.c:	value += ch->pcdata->upgrade_level * 200;
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->upgrade_level > 4)
act_info.c:        value += (ch->pcdata->upgrade_level-3) * 100;
act_info.c:    if ( IS_NPC(ch) && IS_SET(ch->act,ACT_KILLER) ) value += 2000;
act_info.c:   value += ch->armor-( get_curr_dex(ch)*10);  
act_info.c:        value -= (ch->pcdata->classfour[DRAGON_AGE] * 150);
act_info.c:        value -= (ch->pcdata->classfour[DRAGON_POWER] * 200);
act_info.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && IS_SET(ch->polyaff, POLY_WOLF) )
act_info.c:	value -= ch->wpn[0] * 3;
act_info.c:	int wpn = ch->wpn[1];
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->upgrade_level > 0)
act_info.c:        value -= ch->pcdata->upgrade_level * 150;
act_info.c:    if ( IS_NPC(ch) && IS_SET(ch->act,ACT_KILLER) ) value -= 2000;
act_info.c:    if ( ch->desc == NULL )
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
act_info.c:	    if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
act_info.c:	if ( IS_NPC(ch) || IS_SET(ch->act, PLR_COMBINE) )
act_info.c:	if ( IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF) )
act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_BRIEF) ) return;
act_info.c:  if (ch->level > 6) return;
act_info.c:  if (ch->level < 3 || victim->level < 3) return;
act_info.c:    sprintf(buf, "Evileye : %s forces %s to %s", victim->name, ch->name, victim->poweraction);
act_info.c:	    if (IS_NPC(ch) || ch->pcdata->chobj == NULL || ch->pcdata->chobj != obj)
act_info.c:    &&   number_percent( ) < ch->pcdata->learned[gsn_peek] )
act_info.c:    for ( rch = list; rch != NULL; rch = rch->next_in_room )
act_info.c:	    &&   IS_SET(rch->act, PLR_WIZINVIS)
act_info.c:	    && ( IS_SET(rch->act, PLR_WIZINVIS)
act_info.c:	    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
act_info.c:	else if ( room_is_dark( ch->in_room )
act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
act_info.c:    if ((pexit = ch->in_room->exit[door]) != NULL && pexit->to_room != NULL)
act_info.c:    if ( ch->desc == NULL && (wizard = ch->wizard) == NULL) return;
act_info.c:    if (ch->in_room == NULL) return;
act_info.c:    if ( ch->position < POS_SLEEPING )
act_info.c:    if ( ch->position == POS_SLEEPING )
act_info.c:    if ( IS_SET(ch->flag2,AFF_TOTALBLIND))
act_info.c:    if ( !IS_NPC(ch) && IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS) &&
act_info.c:    &&   !IS_SET(ch->act, PLR_HOLYLIGHT)
act_info.c:    &&   !(ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT
act_info.c:    &&   !IS_NPC(ch) && ch->pcdata->chobj != NULL
act_info.c:    &&   ch->pcdata->chobj->in_obj != NULL)
act_info.c:    &&   room_is_dark( ch->in_room ) )
act_info.c:	show_char_to_char( ch->in_room->people, ch );
act_info.c:	if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT
act_info.c:	&& !IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
act_info.c:	    act( "$p",ch,ch->pcdata->chobj->in_obj,NULL,TO_CHAR);
act_info.c:    else if (!IS_SET(ch->act, PLR_MAP))
act_info.c:            if (!IS_NPC(ch) && ch->level > 6)
act_info.c:              ch->in_room->name,
act_info.c:              ch->in_room->vnum);
act_info.c:              sprintf(buf, "%s#n\n\r", ch->in_room->name);
act_info.c:    if (!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOEXIT) && !IS_SET(ch->act, PLR_MAP))
act_info.c:        if (IS_SET(ch->act, PLR_MAP) && IS_SET(ch->act, PLR_BRIEF))
act_info.c:            if (!IS_NPC(ch) && ch->level > 6)
act_info.c:              ch->in_room->name,
act_info.c:              ch->in_room->vnum),
act_info.c:              sprintf(buf, "%s#n\n\r", ch->in_room->name);
act_info.c:	if (ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT
act_info.c:	&& !IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
act_info.c:	    act( "You are inside $p.",ch,ch->pcdata->chobj->in_obj,NULL,TO_CHAR);
act_info.c:	    show_list_to_char( ch->pcdata->chobj->in_obj->contains, ch, FALSE, FALSE );
act_info.c:	else if ( ( !IS_NPC(ch) && !IS_SET(ch->act, PLR_BRIEF) ) &&
act_info.c:      if (IS_SET(ch->act, PLR_MAP))
act_info.c:        draw_map(ch, ch->in_room->description);
act_info.c:	if (!IS_SET(ch->act, PLR_MAP))
act_info.c:            send_to_char( ch->in_room->description , ch );
act_info.c:	    if (ch->in_room->blood == 1000)
act_info.c:	    else if (ch->in_room->blood > 750)
act_info.c:	    else if (ch->in_room->blood > 500)
act_info.c:	    else if (ch->in_room->blood > 250)
act_info.c:	    else if (ch->in_room->blood > 100)
act_info.c:	    else if (ch->in_room->blood > 50)
act_info.c:	    else if (ch->in_room->blood > 25)
act_info.c:	    else if (ch->in_room->blood > 0)
act_info.c:	    if (ch->in_room->blood > 0) send_to_char(buf,ch);
act_info.c:            if (IS_SET(ch->in_room->room_flags, ROOM_FLAMING))
act_info.c:	show_list_to_char( ch->in_room->contents, ch, FALSE, FALSE );
act_info.c:	    if (ch->in_room == NULL) continue;
act_info.c:	    if (ch->in_room->exit[door] == NULL) continue;
act_info.c:	    if (IS_SET(ch->in_room->exit[door]->exit_info,EX_PRISMATIC_WALL)) 	    
act_info.c:	    if (IS_SET(ch->in_room->exit[door]->exit_info,EX_NEWBIE_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_ICE_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info,EX_CALTROP_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info,EX_FIRE_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info,EX_SWORD_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info,EX_MUSHROOM_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_IRON_WALL))
act_info.c:	    else if (IS_SET(ch->in_room->exit[door]->exit_info, EX_ASH_WALL))
act_info.c:	show_char_to_char( ch->in_room->people,   ch );
act_info.c:	    location = ch->in_room;
act_info.c:	    for ( portal = ch->in_room->contents; portal != NULL; portal = portal_next )
act_info.c:			REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:			SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:			SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:			REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:	vch_next	= vch->next;
act_info.c:	if ( vch->in_room == NULL )
act_info.c:	if ( vch->in_room == ch->in_room )
act_info.c:	    if (!IS_NPC(vch) && !str_cmp(arg1,vch->morph))
act_info.c:    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && ch->pcdata->chobj->in_obj != NULL)
act_info.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
act_info.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = obj->next_content )
act_info.c:	if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && obj->chobj != NULL && obj->chobj == ch)
act_info.c:    pdesc = get_extra_descr( arg1, ch->in_room->extra_descr );
act_info.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
act_info.c:	    if ((pexit = ch->in_room->exit[door]) == NULL) return;
act_info.c:	    if ((pexit = ch->in_room->exit[door]) == NULL) return;
act_info.c:	if ((pexit = ch->in_room->exit[door]) == NULL) return;
act_info.c:	if ( ( pexit = ch->in_room->exit[door] ) != NULL &&   pexit->to_room != NULL)
act_info.c:ch->wpn[0],ch->wpn[1],ch->wpn[2],ch->wpn[3],ch->wpn[4],ch->wpn[5],ch->wpn[6]);
act_info.c:ch->wpn[7],ch->wpn[8],ch->wpn[9],ch->wpn[10],ch->wpn[11],ch->wpn[12]);
act_info.c:ch->stance[1],ch->stance[2],ch->stance[3],ch->stance[4],ch->stance[5],ch->stance[6]);
act_info.c:ch->stance[7],ch->stance[8],ch->stance[9],ch->stance[10],ch->stance[11]);
act_info.c:"Purple: %-4d  Red: %-4d  Blue: %-4d  Green: %-4d  Yellow: %-4d\n\r",ch->spl[0],ch->spl[1],ch->spl[2],ch->spl[3],ch->spl[4]);
act_info.c:  	if ( IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_PRES] < 9 )
act_info.c:    chroom = ch->in_room;
act_info.c:    ch->pcdata->familiar = victim;
act_info.c:    if (ch->generation <= 0)
act_info.c:	ch->generation = 1;
act_info.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
act_info.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
act_info.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
act_info.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
act_info.c:    else bloodpool = (250 / ch->generation); 
act_info.c:    if (IS_SET(ch->newbits, NEW_TIDE))
act_info.c:    bloodpool += (3000 / ch->generation);
act_info.c:    else bloodpool += (2000 / ch->generation);
act_info.c:    blood = ch->pcdata->condition[COND_THIRST];
act_info.c:    if (ch->pcdata->rank == AGE_ANCILLA)         sprintf( age, "Ancilla");
act_info.c:    else if (ch->pcdata->rank == AGE_CHILDE)     sprintf( age, "Childe");
act_info.c:    else if (ch->pcdata->rank == AGE_NEONATE)    sprintf( age, "Neonate");
act_info.c:    else if (ch->pcdata->rank == AGE_ELDER)      sprintf( age, "Elder");
act_info.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) sprintf( age, "Methuselah");
act_info.c:    else if( ch->pcdata->rank == AGE_LA_MAGRA)   sprintf( age, "La Magra");
act_info.c:    else if( ch->pcdata->rank == AGE_TRUEBLOOD)  sprintf( age, "TrueBlood");
act_info.c:ch->generation,bloodpool,age,blood);
act_info.c:ch->power[DISC_VAMP_ANIM],ch->power[DISC_VAMP_CELE],
act_info.c:ch->power[DISC_VAMP_FORT]);
act_info.c:ch->power[DISC_VAMP_OBTE],ch->power[DISC_VAMP_PRES],
act_info.c:ch->power[DISC_VAMP_QUIE]);
act_info.c:ch->power[DISC_VAMP_THAU],ch->power[DISC_VAMP_AUSP],
act_info.c:ch->power[DISC_VAMP_DOMI]);
act_info.c:ch->power[DISC_VAMP_OBFU],ch->power[DISC_VAMP_POTE],
act_info.c:ch->power[DISC_VAMP_PROT]);
act_info.c:ch->power[DISC_VAMP_SERP],ch->power[DISC_VAMP_VICI],
act_info.c:ch->power[DISC_VAMP_DAIM]);
act_info.c:ch->power[DISC_VAMP_CHIM], ch->power[DISC_VAMP_OBEA], ch->power[DISC_VAMP_MELP]);
act_info.c:ch->power[DISC_VAMP_NECR], ch->power[DISC_VAMP_THAN] );
act_info.c:    ch->name, (ch->played + (int) (current_time - ch->logon))/3600);
act_info.c:         if (!IS_NPC(ch) && ch->level == 1 ) send_to_char( "#CMortal#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 2 ) send_to_char( "#CMortal#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 3 ) send_to_char( "#CAvatar#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 7 ) send_to_char( "#CIntern#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 8 ) send_to_char( "#CBuilder#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 9 ) send_to_char( "#CQuest Maker#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 10) send_to_char( "#CJudge#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 11) send_to_char( "#CHigh Judge#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 12) send_to_char( "#CImplementor#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 13) send_to_char( "#CCreator#n", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 14) send_to_char( "#CMarried#n", ch);
act_info.c:    sprintf( buf, "    Gender: #C%s#n\n\r", ch->sex == SEX_MALE ? "Male" : ch->sex == SEX_FEMALE ? "Female" : "None" );
act_info.c:    ch->hit, ch->max_hit, get_curr_str(ch), char_hitroll(ch) );
act_info.c:    ch->move, ch->max_move, get_curr_dex(ch), char_damroll(ch) );
act_info.c:    ch->mana, ch->max_mana, get_curr_con(ch),  char_ac(ch) );
act_info.c:    ch->practice, get_curr_wis(ch),  ch->damcap[0] );
act_info.c:    ch->pcdata->quest, get_curr_int(ch), number_attacks(ch,ch));
act_info.c:		ch->pcdata->stats[DEMON_CURRENT],  ch->pcdata->stats[DEMON_TOTAL] );
act_info.c:	sprintf( buf, "  You have #C%d #ndragon points stored.#n\n\r", ch->pcdata->stats[DEMON_CURRENT] ); 
act_info.c:    	sprintf( buf,"  You have #C%d #nclass points stored#n\n\r", ch->pcdata->stats[DROID_POWER] );
act_info.c:    	sprintf( buf, "  You have #C%d #nclass points stored#n\n\r", ch->pcdata->stats[TPOINTS] );
act_info.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_DEMON) && ch->generation < 13)
act_info.c:	sprintf( buf, "  You have obtained #C%d #nsouls, which you keep in a little jar#n\n\r", ch->pcdata->souls);
act_info.c:	sprintf( buf, "#  You have #C%d#n class points stored#n\n\r", ch->pcdata->stats[DROW_POWER] );
act_info.c:	sprintf( buf, "  You have #C%d #npoints of magic resistance#n\n\r", ch->pcdata->stats[DROW_MAGIC] );
act_info.c:      sprintf(buf,"  Your shapeshifter counter is : #C%d#n\n\r",ch->pcdata->powers[SHAPE_COUNTER]);
act_info.c:      sprintf(buf,"  Your phase counter is        : #C%d#n\n\r",ch->pcdata->powers[PHASE_COUNTER]);
act_info.c:      sprintf(buf,"  Angelic Justice   : #C%d#n\n\r",ch->pcdata->powers[ANGEL_JUSTICE]);
act_info.c:      sprintf(buf,"  Angelic Love      : #C%d#n\n\r",ch->pcdata->powers[ANGEL_LOVE]);
act_info.c:      sprintf(buf,"  Angelic Harmony   : #C%d#n\n\r",ch->pcdata->powers[ANGEL_HARMONY]);
act_info.c:      sprintf(buf,"  Angelic Peace     : #C%d#n\n\r",ch->pcdata->powers[ANGEL_PEACE]);
act_info.c:      sprintf(buf,"  Your current beast is : #C%d#n\n\r",ch->beast);
act_info.c:      sprintf(buf,"  Your block counter is currently: #C%d#n\n\r",ch->monkblock);
act_info.c:      sprintf(buf,"  Your current level of chi:       #C%d#n\n\r",ch->chi[CURRENT]);
act_info.c:      sprintf(buf,"  Your maximum level of chi:       #C%d#n\n\r",ch->chi[MAXIMUM]);
act_info.c:    if( !IS_NPC(ch) && IS_CLASS(ch, CLASS_WEREWOLF) && ch->gnosis[GMAXIMUM] > 0 )
act_info.c:	sprintf( buf, "  Current Gnosis:            #C%d#n\n\r", ch->gnosis[GCURRENT] );
act_info.c:	sprintf( buf, "  Maximum gnosis:            #C%d#n\n\r", ch->gnosis[GMAXIMUM] );
act_info.c:	sprintf( buf, "  Blood: #C%d#n\n\r", ch->pcdata->condition[COND_THIRST] );
act_info.c:        sprintf( buf, "  Kahn Class Points: #C%d#n\n\r", ch->pcdata->stats[KAHN_CURRENT] );
act_info.c:    else if (ch->level >= 0)
act_info.c:        if ( IS_CLASS(ch,CLASS_WEREWOLF) && ch->siltol > 0)
act_info.c:            sprintf(buf,"  #nYou have attained #C%d #npoints of silver tolerance\n\r",ch->siltol);
act_info.c:        if ( IS_CLASS(ch,CLASS_VAMPIRE) && ch->rage > 0)
act_info.c:            sprintf(buf,"  #nThe beast is in control of your actions:  Affects Hitroll and Damroll by #C+%d\n\r",ch->rage);
act_info.c:        if ( IS_CLASS(ch, CLASS_WEREWOLF) && IS_SET(ch->special,SPC_WOLFMAN) && ch->rage > 0)
act_info.c:            sprintf(buf,"#n  You are raging:  Affects Hitroll and Damroll by #C+%d\n\r",ch->rage);
act_info.c:        if (IS_CLASS(ch, CLASS_NINJA) && ch->rage > 0) {
act_info.c:        sprintf(buf,"#n  Your michi gives you an extra #C%d#n hitroll and damroll\n\r", ch->rage);
act_info.c:        if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_CHIKYU] >= 6
act_info.c:        && ch->pcdata->powers[HARA_KIRI] > 0) {
act_info.c:        sprintf(buf,"#n  You receive the power of HaraKiri for #C%d#n more ticks\n\r",ch->pcdata->powers[HARA_KIRI]);
act_info.c:                sprintf(buf, "#n  You are a dragon. You age affects your Hitroll and Damroll by +%d#n\n\r", ch->pcdata->classfour[DRAGON_AGE]* 50);
act_info.c:        if ( !IS_CLASS(ch, CLASS_WEREWOLF) && !IS_CLASS(ch, CLASS_VAMPIRE) &&ch->rage > 0 && !IS_CLASS(ch, CLASS_NINJA))
act_info.c:           sprintf(buf,"#n  You are in a mad frenzy, adding #C%d#n Hitroll and Damroll\n\r",ch->rage);
act_info.c:        else if ( IS_CLASS( ch, CLASS_DEMON) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:                ((ch->pcdata->stats[DEMON_POWER]) *ch->pcdata->stats[DEMON_POWER]));
act_info.c:    ch->carry_number, can_carry_n(ch), ch->carry_weight, can_carry_w(ch));
act_info.c:    ch->exp, ch->pcdata->store, ch->pcdata->pkpoints);
act_info.c:    ch->alignment,
act_info.c:    ch->pcdata->mean_paradox_counter,
act_info.c:    ch->pcdata->upgrade_level + 1);
act_info.c: if (ch->alignment == 1000) 
act_info.c:    ch->alignment,
act_info.c:    ch->pcdata->mean_paradox_counter,
act_info.c:    ch->pcdata->upgrade_level + 1);
act_info.c: if (ch->alignment == -1000) 
act_info.c:    ch->alignment,
act_info.c:    ch->pcdata->mean_paradox_counter,
act_info.c:    ch->pcdata->upgrade_level + 1);
act_info.c: if (ch->alignment == 0) 
act_info.c:    ch->alignment,
act_info.c:    ch->pcdata->mean_paradox_counter,
act_info.c:    ch->pcdata->upgrade_level + 1);
act_info.c:  if (ch->pcdata->last_decap[0] != NULL)
act_info.c:  sprintf(buf, "  Decap 1    : #C%s#n\n\r",  ch->pcdata->last_decap[0]);
act_info.c:  if (ch->pcdata->last_decap[1] != NULL)
act_info.c:  sprintf(buf, "  Decap 2    : #C%s#n\n\r",  ch->pcdata->last_decap[1]);
act_info.c:    if ( ch->pcdata->score[SCORE_TOTAL_LEVEL] >=1 )
act_info.c:			ch->pcdata->score[SCORE_TOTAL_LEVEL],ch->pcdata->score[SCORE_HIGH_LEVEL] );
act_info.c:    ch->pkill, (ch->pkill == 1) ? "kill" : "kills",
act_info.c:    ch->pdeath, (ch->pdeath == 1) ? "death" : "deaths");
act_info.c:    ch->pcdata->awins, (ch->pcdata->awins == 1) ? "kill" : "kills",
act_info.c:    ch->pcdata->alosses, (ch->pcdata->alosses == 1) ? "death" : "deaths");
act_info.c:    ch->mkill, (ch->mkill == 1) ? "kill" : "kills",
act_info.c:    ch->mdeath, (ch->mdeath == 1) ? "death" : "deaths");
act_info.c:    if (ch->pcdata->mean_paradox_counter > 0)
act_info.c:	sprintf(buf,"  Paradox Counter: #C%d#n\n\r", ch->pcdata->mean_paradox_counter);
act_info.c:    if (ch->fight_timer > 0)
act_info.c:    	sprintf(buf,"  You have #C%d#n rounds left on your fight timer#n\n\r", ch->fight_timer);
act_info.c:  (IS_SET(ch->act, PLR_AUTOEXIT)) ? "#CEXIT" : "#cexit",
act_info.c:  (IS_SET(ch->act, PLR_AUTOLOOT)) ? "#CLOOT" : "#cloot",
act_info.c:  (IS_SET(ch->act, PLR_AUTOSAC )) ? "#CSACRIFICE" : "#csacrifice");
act_info.c:  (IS_SET(ch->act, PLR_BRIEF )) ? "#C1" : "#c1",
act_info.c:  (IS_SET(ch->act, PLR_BRIEF2)) ? "#C2" : "#c2",
act_info.c:  (IS_SET(ch->act, PLR_BRIEF3)) ? "#C3" : "#c3",
act_info.c:  (IS_SET(ch->act, PLR_BRIEF4)) ? "#C4" : "#c4",
act_info.c:  (IS_SET(ch->act, PLR_BRIEF5)) ? "#C5" : "#c5",
act_info.c:  (IS_SET(ch->act, PLR_BRIEF6)) ? "#C6" : "#c6");
act_info.c:	{obj_score(ch,ch->pcdata->chobj);return;}
act_info.c:	ch->pcdata->switchname,
act_info.c:	IS_NPC(ch) ? "" : ch->pcdata->title,
act_info.c:        (ch->played + (int) (current_time - ch->logon))/3600);
act_info.c:         if (!IS_NPC(ch) && ch->level == 1 ) send_to_char( "#GMortal#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 2 ) send_to_char( "#GMortal#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 3 ) send_to_char( "#CAvatar#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 7 ) send_to_char( "#LIntern#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 8 ) send_to_char( "#yBuilder#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 9 ) send_to_char( "#pHigh Builder#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 10) send_to_char( "#oQuestor#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 11) send_to_char( "#rHigh Questor#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 12) send_to_char( "#lImplementor#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 13) send_to_char( "#0Owner#R]#n\n\r", ch);
act_info.c:    else if (!IS_NPC(ch) && ch->level == 14) send_to_char( "#CMarried#n", ch);
act_info.c:    if ( get_trust( ch ) != ch->level )
act_info.c:    sprintf( buf, "#R[#GGender: #C%s#R ]#n", ch->sex == SEX_MALE         ? "Male"        : ch->sex == SEX_FEMALE       ? "Female"      : "None" );
act_info.c:    sprintf( buf, "#R[#GUpgrade: #C%d#R]   [#GStatus: #C%d#R]   [#GGeneration: #C%d#R]#n\n\r",ch->pcdata->upgrade_level+1, ch->race, ch->generation);
act_info.c:    sprintf( buf, "#R[#7Hit:  %d#0/#C%d#n#R]#R		[#n#7Str: #C%d#R] [#n#7Int: #C%d#R]#n\n\r",ch->hit,ch->max_hit,get_curr_str(ch),get_curr_int(ch));
act_info.c:    sprintf( buf, "#R[#7Mana: %d#0/#C%d#n#R]#R		[#n#7Wis: #C%d#R] [#n#7Dex: #C%d#R]#n\n\r",ch->mana, ch->max_mana,get_curr_wis(ch),get_curr_dex(ch));
act_info.c:    sprintf( buf, "#R[#7Move: %d#0/#C%d#n#R]#R		[#n#7Con: #C%d#R]#n\n\r",		ch->move, ch->max_move, get_curr_con(ch));
act_info.c:		ch->carry_number, can_carry_n(ch), ch->carry_weight);
act_info.c:    sprintf( buf, "#R[#7Exp: #C%-9d#7 Stores: #C%-4d #7Primal: #C%d#n#R]#n", ch->exp, ch->pcdata->store, ch->practice );
act_info.c:		ch->pcdata->stats[DEMON_CURRENT],  ch->pcdata->stats[DEMON_TOTAL] );
act_info.c:    	sprintf( buf,"#R[#nYou have #C%d #nclass points stored#R]\n\r", ch->pcdata->stats[DROID_POWER] );
act_info.c:    	sprintf( buf, "#R[#nYou have #C%d #nclass points stored#R]\n\r", ch->pcdata->stats[TPOINTS] );
act_info.c:        sprintf( buf, "#R[#nYou have #C%d #nclass points stored#R]\n\r", ch->pcdata->stats[KAHN_CURRENT] );
act_info.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_DEMON) && ch->generation < 13)
act_info.c:	sprintf( buf, "#R[#nYou have obtained #C%d #nsouls, which you keep in a little jar#R]\n\r", ch->pcdata->souls);
act_info.c:	sprintf( buf, "#R[#nYou have #C%d#n class points stored#R]\n\r", ch->pcdata->stats[DROW_POWER] );
act_info.c:	sprintf( buf, "#R[#nYou have #C%d #npoints of magic resistance#R]\n\r", ch->pcdata->stats[DROW_MAGIC] );
act_info.c:		(!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOEXIT)) ? "YES" : "NO",  (!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOLOOT)) ? "YES" : "NO", 
act_info.c:		(!IS_NPC(ch) && IS_SET(ch->act, PLR_AUTOSAC) ) ? "YES" : "NO" );
act_info.c:      sprintf(buf,"#R[#nYour shapeshifter counter is : #C%d#R]\n\r",ch->pcdata->powers[SHAPE_COUNTER]);
act_info.c:      sprintf(buf,"#R[#nYour phase counter is        : #C%d#R]\n\r",ch->pcdata->powers[PHASE_COUNTER]);
act_info.c:      sprintf(buf,"#R[#nAngelic Justice   : #C%d#R]\n\r",ch->pcdata->powers[ANGEL_JUSTICE]);
act_info.c:      sprintf(buf,"#R[#nAngelic Love      : #C%d#R]\n\r",ch->pcdata->powers[ANGEL_LOVE]);
act_info.c:      sprintf(buf,"#R[#nAngelic Harmony   : #C%d#R]\n\r",ch->pcdata->powers[ANGEL_HARMONY]);
act_info.c:      sprintf(buf,"#R[#nAngelic Peace     : #C%d#R]\n\r",ch->pcdata->powers[ANGEL_PEACE]);
act_info.c:      sprintf(buf,"#R[#nYour current beast is : #C%d#R]\n\r",ch->beast);
act_info.c:      sprintf(buf,"#R[#nYour block counter is currently: #C%d#R]\n\r",ch->monkblock);
act_info.c:      sprintf(buf,"#R[#nYour current level of chi:       #C%d#R]\n\r",ch->chi[CURRENT]);
act_info.c:      sprintf(buf,"#R[#nYour maximum level of chi:       #C%d#R]\n\r",ch->chi[MAXIMUM]);
act_info.c:    if( !IS_NPC(ch) && IS_CLASS(ch, CLASS_WEREWOLF) && ch->gnosis[GMAXIMUM] > 0 )
act_info.c:	sprintf( buf, "#R[#nCurrent Gnosis:            #C%d#R]\n\r", ch->gnosis[GCURRENT] );
act_info.c:	sprintf( buf, "#R[#nMaximum gnosis:            #C%d#R]\n\r", ch->gnosis[GMAXIMUM] );
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK]   > 10 )
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_THIRST] ==  0 )
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL]   ==  0 )
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->stage[0] >= 100 )
act_info.c:    else if ( !IS_NPC(ch) && ch->pcdata->stage[0] >= 50 )
act_info.c:    else if ( !IS_NPC(ch) && ch->pcdata->stage[0] >= 1 )
act_info.c:    if ( !IS_NPC(ch) && ch->pcdata->stage[1] > 0 && ch->position == POS_STANDING )
act_info.c:	if (!IS_NPC(ch) && (ch->pcdata->stage[2] + 25) >= ch->pcdata->stage[1])
act_info.c:    else switch ( ch->position )
act_info.c:    if ( ch->level >= 0 )
act_info.c:			char_hitroll(ch), char_damroll(ch), ch->damcap[0]);
act_info.c:    if ( ch->fighting != NULL ) sprintf(buf, "#R[#LNumber Attacks: #C%d#R]#n",number_attacks(ch,ch->fighting));
act_info.c:	sprintf( buf, "#R[#n#7Blood: #C%d#R]\n\r", ch->pcdata->condition[COND_THIRST] );
act_info.c:    else if (ch->level >= 0)
act_info.c:    if ( ch->pcdata->score[SCORE_TOTAL_LEVEL] >=1 )
act_info.c:			ch->pcdata->score[SCORE_TOTAL_LEVEL],ch->pcdata->score[SCORE_HIGH_LEVEL] );
act_info.c:        sprintf(ss1,"#C%d#n",ch->mkill);
act_info.c:        sprintf(ss2,"#C%d#n",ch->mdeath);
act_info.c:    if ( ch->level >= 0 )
act_info.c:	sprintf( buf, "#R[#n#7Alignment: #C%d#R] ", ch->alignment );
act_info.c:         if ( ch->alignment >  900 ) send_to_char( "#CAngelic#R]\n\r", ch );
act_info.c:    else if ( ch->alignment >  700 ) send_to_char( "#CSai#yn#Ctly#R]\n\r", ch );
act_info.c:    else if ( ch->alignment >  350 ) send_to_char( "#yG#Coo#yd#R]\n\r",    ch );
act_info.c:    else if ( ch->alignment >  100 ) send_to_char( "#yKind#R]\n\r",    ch );
act_info.c:    else if ( ch->alignment > -100 ) send_to_char( "#LNeutral#R]\n\r", ch );
act_info.c:    else if ( ch->alignment > -350 ) send_to_char( "#0Mean#R]\n\r",    ch );
act_info.c:    else if ( ch->alignment > -700 ) send_to_char( "#0E#Rvi#0l#R]\n\r",    ch );
act_info.c:    else if ( ch->alignment > -900 ) send_to_char( "#RDem#0o#Rnic]\n\r", ch );
act_info.c:        sprintf(ss1,"#C%d#n",ch->pkill);
act_info.c:	sprintf(ss2,"#C%d#n",ch->pdeath);
act_info.c:			ss1, ss2, ch->pcdata->awins, ch->pcdata->alosses, ch->pcdata->pkpoints );
act_info.c:	sprintf( buf, "#R[#n#RLast Two Decaps: #y>-#C%s#y-< >-#C%s#y-< #R]#n\n\r", ch->pcdata->last_decap[0], ch->pcdata->last_decap[1] );
act_info.c:    if (ch->pcdata->mean_paradox_counter > 0)
act_info.c:	sprintf(buf,"#R[#n#RParadox Counter: #C%d#n#R]#n\n\r", ch->pcdata->mean_paradox_counter);
act_info.c:    if (ch->fight_timer > 0)
act_info.c:    	sprintf(buf,"#R[#n#RYou have #C%d#n #Rrounds left on your fight timer#R]#n\n\r", ch->fight_timer);
act_info.c:	stcf(ch,"#R[#rBloodpower: #C%d#R] #n",ch->pcdata->bloodpower[0]);
act_info.c:	if ( ch->pcdata->bloodpower[1] > 0 )
act_info.c:	    stcf(ch,"#R[#rYou are in a bloodrage! #R(#C%d#R)]#n",ch->pcdata->bloodpower[1]);
act_info.c:	sprintf( buf, "#R[#n#7Completed #C%d #n#7quests for #C%d #n#7validated points#R]#n\n\r", ch->pcdata->questsrun, ch->pcdata->questtotal );
act_info.c:    if ( !IS_NPC(ch) /*&& ch->pcdata->quest > 0*/)
act_info.c:	if (ch->pcdata->quest == 1)
act_info.c:	    sprintf( buf, "#R[#n #C%d #n#7Quest Points#R]\n\r", ch->pcdata->quest );
act_info.c:	if ( IS_CLASS(ch,CLASS_WEREWOLF) && ch->siltol > 0)
act_info.c:	    sprintf(buf,"#R[#nYou have attained #C%d #npoints of silver tolerance#R]\n\r",ch->siltol);
act_info.c:	if ( IS_CLASS(ch,CLASS_VAMPIRE) && ch->rage > 0)
act_info.c:	    sprintf(buf,"#R[#nThe beast is in control of your actions:  Affects Hitroll and Damroll by #C+%d#R]\n\r",ch->rage);
act_info.c:	if ( IS_CLASS(ch, CLASS_WEREWOLF) && IS_SET(ch->special,SPC_WOLFMAN) && ch->rage > 0)
act_info.c:	    sprintf(buf,"#R[#nYou are raging:  Affects Hitroll and Damroll by #C+%d#R]\n\r",ch->rage);
act_info.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->rage > 0) {
act_info.c:	sprintf(buf,"#R[#nYour michi gives you an extra #C%d#n hitroll and damroll#R]\n\r", ch->rage);
act_info.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_CHIKYU] >= 6
act_info.c:	&& ch->pcdata->powers[HARA_KIRI] > 0) {
act_info.c:	sprintf(buf,"#R[#nYou receive the power of HaraKiri for #C%d#n more ticks#R]\n\r",ch->pcdata->powers[HARA_KIRI]);
act_info.c:		sprintf(buf, "#R[#nYou are a dragon. You age affects your Hitroll and Damroll by +%d#R]#n\n\r", ch->pcdata->classfour[DRAGON_AGE]* 50);
act_info.c:        if ( !IS_CLASS(ch, CLASS_WEREWOLF) && !IS_CLASS(ch, CLASS_VAMPIRE) &&ch->rage > 0 && !IS_CLASS(ch, CLASS_NINJA))
act_info.c:	   sprintf(buf,"#R[#nYou are in a mad frenzy, adding #C%d#n Hitroll and Damroll#R]\n\r",ch->rage);
act_info.c:	else if ( IS_CLASS( ch, CLASS_DEMON) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:		((ch->pcdata->stats[DEMON_POWER]) *ch->pcdata->stats[DEMON_POWER]));
act_info.c:        else if ( IS_CLASS( ch, CLASS_DROW) && ch->pcdata->stats[DEMON_POWER] > 0)
act_info.c:                ((ch->pcdata->stats[DEMON_POWER]) *ch->pcdata->stats[DEMON_POWER]));  
act_info.c:    if (gch->level < 7) nPlayerAll++;
act_info.c:    if (gch->level < 7) nPlayerVis++;
act_info.c:    //if (!str_cmp(ch->pcdata->last_decap[0], gch->name)) canDecap = FALSE;
act_info.c:    //if (!str_cmp(gch->pcdata->last_decap[0], ch->name)) canKillYou = FALSE;
act_info.c:/*    if (gch->pkill > 0)
act_info.c:      if (100 * gch->pkill/(gch->pkill + gch->pdeath) < 100 && 100 * gch->pkill/(gch->pkill + gch->pdeath) > 9)
act_info.c:        if (canDecap && canKillYou) sprintf(pkratio,"#R(#G0.%-2d#R)#n", (100 * gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:        else if (canKillYou) sprintf(pkratio,"#0(#G0.%-2d#0)#n", (100 * gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:        else if (canDecap) sprintf(pkratio,"#y(#G0.%-2d#y)#n", (100 * gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:        else sprintf(pkratio,"#L(#G0.%-2d#L)#n", (100 * gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:      else if (100*gch->pkill/(gch->pkill + gch->pdeath) < 10)
act_info.c:        if (canDecap && canKillYou) sprintf(pkratio,"#R(#G0.0%-1d#R)#n", (100*gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:        else if (canKillYou) sprintf(pkratio,"#0(#G0.0%-1d#0)#n", (100*gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:        else if (canDecap) sprintf(pkratio,"#y(#G0.0%-1d#y)#n", (100*gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:        else sprintf(pkratio,"#L(#G0.0%-1d#L)#n", (100*gch->pkill/(gch->pkill + gch->pdeath)));
act_info.c:      if (IS_SET(gch->act, PLR_WIZINVIS)) sprintf(invis,"#L(#RI#L)#n");
act_info.c:      if (gch->sex == 1) sprintf(sex,"#L(#yM#L)#n");
act_info.c:      else if  (gch->sex == 2) sprintf(sex,"#L(#yF#L)#n");
act_info.c:      if (canDecap && canKillYou) sprintf(pkratio,"#R(#G%3d#R)#n",gch->race);
act_info.c:      else if (canKillYou)	  sprintf(pkratio,"#0(#G%3d#0)#n",gch->race);
act_info.c:      else if (canDecap)	  sprintf(pkratio,"#y(#G%3d#y)#n",gch->race);
act_info.c:      else sprintf(pkratio,"#L(#G%3d#L)#n",gch->race);
act_info.c:    mightRate = gch->pkill-gch->pdeath;
act_info.c:    if ( mightRate == 0 && gch->pkill != 0 ) mightRate = 1;
act_info.c:    if ((IS_HEAD(gch,LOST_HEAD) || IS_EXTRA(gch,EXTRA_OSWITCH)) && gch->pcdata->chobj != NULL)
act_info.c:      if (gch->pcdata->chobj->pIndexData->vnum == 12) title = " #CA Head#n     #n ";
act_info.c:      else if (gch->pcdata->chobj->pIndexData->vnum == 30005) title = " #CA Brain#n     ";
act_info.c:      switch (gch->level )
act_info.c:        /*  if ( (gch->level == 14) && (gch->sex == SEX_MALE))   title = " #C[#LHusband#C]#n      ";
act_info.c:          else if ( (gch->level == 14) && (gch->sex == SEX_FEMALE)) title = " #C[#RWife#C]#n      ";
act_info.c:          else if ( (gch->level == 13) && (gch->sex == SEX_MALE))   title = " #C[#0Overlord#C]#n      ";
act_info.c:          else if ( (gch->level == 13) && (gch->sex == SEX_FEMALE)) title = " #C[#7Mistress#C]#n      ";
act_info.c:          else if ( gch->level == 13) title = " #C[#yCreator#C]#n      ";
act_info.c:          else if ( gch->level == 12) title = " #C[#GCoder#C]#n        ";
act_info.c:          else if ( gch->level == 11) title = " #C[#REnforcer#C]#n    ";
act_info.c:          else if ( gch->level == 10) title = " #C[#cQuester#C]#n      ";
act_info.c:          else if ( gch->level ==  9) title = " #C[#LHi Builder#C]#n ";
act_info.c:          else if ( gch->level ==  8) title = " #C[#lBuilder#C]#n      ";
act_info.c:	  if (!str_cmp(gch->name, "Raziel")) title = "#C[#GD#0est#Rr#yu#Rc#0tio#Gn#C]#n";
act_info.c:          else if (!str_cmp(gch->name, "Reaver"))     title = " #C[#GP#Lrick#C]#n  ";
act_info.c:          else if (!str_cmp(gch->name, "Dertaherup"))  title = " #C[#RA#7s#0s#7h#0o#7l#0e#n#C]#n      ";
act_info.c:	  else if (!str_cmp(gch->name, "Marisella"))  title = " #C[#RS#0u#Rcc#0u#Rb#0u#Rs#C]#n      ";
act_info.c:	  else if (!str_cmp(gch->name, "Chrono"))     title = " #C[#7P#0u#7r#0e#R-#0E#7v#0i#7l#C]#n ";
act_info.c:	  else if (!str_cmp(gch->name, "Ghant"))      title = " #C[#CS#0o#Cm#0e#R-#CD#0u#Cd#0e#C]#n ";
act_info.c:	  else if (!str_cmp(gch->name, "Silk"))       title = " #C[#RT#rh#RE #ri#RN#rs#RA#rn#RE#C]#n"; 
act_info.c:	  else if (!str_cmp(gch->name, "Hutoshi"))    title = " #C[  #CC#7o#Cd#7e#Cr  #C]#n  ";
act_info.c:          else if (!str_cmp(gch->name, "Beorn"))      title = " #C[#cAesir#C]#n  ";
act_info.c:          else if (!str_cmp(gch->name, "Hughes"))     title = " #C[#DCowboy-Rider#C]#n ";
act_info.c:          else if ( (gch->level == 14) && (gch->sex == SEX_MALE))   title = " #C[#0Overlord#C]#n    ";
act_info.c:          else if ( (gch->level == 14) && (gch->sex == SEX_FEMALE)) title = " #C[#7Mistress#C]#n    ";
act_info.c:          else if ( gch->level == 14) title = " #C[#GOverseer#C]#n     ";
act_info.c:          else if ( gch->level == 13) title = " #C[#PHi Admin#C]#n     ";
act_info.c:          else if ( gch->level == 12) title = " #C[#yAdmin#C]#n        ";
act_info.c:          else if ( gch->level == 11) title = " #C[#REnforcer#C]#n     ";
act_info.c:          else if ( gch->level == 10) title = " #C[#LHi Builder#C]#n   ";
act_info.c:          else if ( gch->level ==  9) title = " #C[#lBuilder#C]#n      ";
act_info.c:          else if ( gch->level ==  8) title = " #C[#oIntern#C]#n       ";
act_info.c:           if (gch->prefix != NULL) title = gch->prefix;
act_info.c:          else if (IS_SET(gch->pcdata->jflags, JFLAG_BULLY)) title = " #0B#Rully#n       ";
act_info.c:          else if (gch->race > 60 ) title = " #GKha Khan#n       ";
act_info.c:          else if (gch->race > 55 ) title = " #CDemigod#n       ";
act_info.c:          else if (gch->race > 50 ) title = " #LEmperor#n       ";
act_info.c:          else if (gch->race > 40 ) title = " #yShogun#n      ";
act_info.c:          else if (gch->race > 37 ) title = " #PAlmighty#n    ";
act_info.c:          else if (gch->race > 35 ) title = " #oRuler#n       ";
act_info.c:          else if (gch->race > 32 ) title = " #0Warlord#n     ";
act_info.c:          else if (gch->race > 30 ) title = " #RTaiko#n     ";
act_info.c:          else if (gch->race > 28 ) title = " #GKing#n        ";
act_info.c:          else if (gch->race > 26 ) title = " #CWarrior#n      ";
act_info.c:          else if (gch->race > 24 ) title = " #LBarbarian#n   ";
act_info.c:          else if (gch->race > 22 ) title = " #yBaron#n       ";
act_info.c:          else if (gch->race > 20 ) title = " #PConqueror#n     ";
act_info.c:          else if (gch->race > 18 ) title = " #oDuke#n        ";
act_info.c:          else if (gch->race > 17 ) title = " #0Rogue#n       ";
act_info.c:          else if (gch->race > 15 ) title = " #RGeneral#n     ";
act_info.c:          else if (gch->race > 14 ) title = " #CSergeant#n    ";
act_info.c:          else if (gch->race > 13 ) title = " #LCorporal#n     ";
act_info.c:          else if (gch->race > 12 ) title = " #yMaster#n      ";
act_info.c:          else if (gch->race > 11 ) title = " #PGladiator#n  ";
act_info.c:          else if (gch->race > 10 ) title = " #oLord#n       ";
act_info.c:          else if (gch->race >  9 ) title = " #0Legendary#n   ";
act_info.c:          else if (gch->race >  8 ) title = " #RHero#n        ";
act_info.c:          else if (gch->race >  6 ) title = " #GSoldier#n     ";
act_info.c:          else if (gch->race >  5 ) title = " #CAdventurer#n  ";
act_info.c:          else if (gch->race >  4 ) title = " #LVeteran#n     ";
act_info.c:          else if (gch->race >  3 ) title = " #yPrivate#n     ";
act_info.c:          else if (gch->race >  2 ) title = " #PRecruit#n     ";
act_info.c:          else if (gch->race >  1 ) title = " #oCadet#n       ";
act_info.c:          else if (gch->race == 1 ) title = " #RBitch#n	    ";
act_info.c:    if (gch->class > 0)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if(gch->generation == 2)
act_info.c:        else if(gch->generation == 3)
act_info.c:        else if(gch->generation == 4)
act_info.c:        else if(gch->generation == 5)
act_info.c:        else if(gch->generation == 6)
act_info.c:        else if(gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if(gch->generation == 2)  
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7) 
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3) 
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3) 
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:          if(gch->sex == SEX_FEMALE)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3) 
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:        if (gch->generation == 1)
act_info.c:        else if (gch->generation == 2)
act_info.c:        else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:      //  if (gch->generation == 2)//{
act_info.c:        //if (gch->name=="Joshua")
act_info.c:       // else if (gch->name=="Marisella")
act_info.c:        if (gch->generation == 1)
act_info.c:       else if (gch->generation == 2)
act_info.c:       else if (gch->generation == 3)
act_info.c:        else if (gch->generation == 4)
act_info.c:        else if (gch->generation == 5)
act_info.c:        else if (gch->generation == 6)
act_info.c:        else if (gch->generation == 7)
act_info.c:		if (gch->generation == 1)
act_info.c:	if (IS_SET(gch->special,SPC_ELF_MAGE))
act_info.c:        else if (IS_SET(gch->special,SPC_ELF_WARRIOR))
act_info.c:        else if (IS_SET(gch->special,SPC_ELF_ARCHER))
act_info.c:	if ( gch->generation == 1 )
act_info.c:	else if ( gch->generation == 2 )
act_info.c:	else if ( gch->generation == 3 )
act_info.c:	else if ( gch->generation == 4 )
act_info.c:	else if ( gch->generation == 5 )
act_info.c:    if (gch->pcdata->kingdom >= 1 && gch->pcdata->kingdom <= MAX_KINGDOM)
act_info.c:      if (!str_cmp(kingdom_table[gch->pcdata->kingdom].leader, gch->name))
act_info.c:        if (gch->sex == SEX_MALE) sprintf(faith, "Lr %s", kingdom_table[gch->pcdata->kingdom].whoname);
act_info.c:        else sprintf(faith, "Qu %s", kingdom_table[gch->pcdata->kingdom].whoname);
act_info.c:      else if (!str_cmp(kingdom_table[gch->pcdata->kingdom].general, gch->name))
act_info.c:        sprintf(faith, "Gn %s", kingdom_table[gch->pcdata->kingdom].whoname);
act_info.c:        sprintf(faith, "%s", kingdom_table[gch->pcdata->kingdom].whoname);
act_info.c:    if ( gch->pcdata->rpalign == RPALIGN_DARK )
act_info.c:    if ( gch->pcdata->rpalign == RPALIGN_LIGHT )
act_info.c:    if ( gch->pcdata->rpalign == RPALIGN_LOVE )
act_info.c:    if ( gch->pcdata->rpalign == RPALIGN_NEUTRAL )
act_info.c:    if ( gch->pcdata->rpalign == RPALIGN_NONE )
act_info.c:    if ( ( (gch->level > 6) && (gch->level <= ch->level) ) ||
act_info.c:	   (gch->level > 6 && can_see(ch,gch) ) )
act_info.c:        title2, pkratio, invis, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:    else if (gch->level >= 3 && gch->level <= 6)
act_info.c:      if (gch->race > 35)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 32)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 30)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 27)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 25)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 22)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 20)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 17)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 15)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 12)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 10)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 7)
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race > 5)  
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:      else if (gch->race >= 1)   
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:          title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:    else if (gch->level < 3)
act_info.c:        title2, pkratio, sex, kav, rp, gch->pcdata->switchname, gch->pcdata->title, faith);
act_info.c:    if (!IS_SET(ch->act, PLR_BRIEF)){
act_info.c:    if (!IS_SET(ch->act, PLR_BRIEF)){
act_info.c:    if (!IS_SET(ch->act, PLR_BRIEF))
act_info.c:        if ( !IS_NPC(ch) && (obj = ch->pcdata->chobj) == NULL)
act_info.c:	    location = ch->in_room;
act_info.c:	    for ( portal = ch->in_room->contents; portal != NULL; portal = portal_next )
act_info.c:			REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:			SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:			SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:			REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_info.c:    show_list_to_char( ch->carrying, ch, TRUE, TRUE );
act_info.c:	    &&   victim->in_room->area == ch->in_room->area
act_info.c:	    &&   victim->in_room->area == ch->in_room->area
act_info.c:            return ch->short_descr;
act_info.c:            return ch->name;
act_info.c:    free_string( ch->prefix );
act_info.c:    ch->prefix = str_dup( buf );
act_info.c:	if ( ch->prefix ) free_string(ch->prefix);
act_info.c:	ch->prefix = NULL;
act_info.c:    free_string( ch->pcdata->title );
act_info.c:    ch->pcdata->title = str_dup( buf );
act_info.c:    free_string( ch->pcdata->title );
act_info.c:    ch->pcdata->title = str_dup( buf );   
act_info.c:    if ( ch->level == 7 || ch->trust == 7 )
act_info.c:/*    if ( ch->pcdata->quest < 5000)
act_info.c://    ch->pcdata->quest -= 5000;
act_info.c:    	if (ch->position == POS_FIGHTING) return;
act_info.c:    /*if ( ch->tick_timer[TIMER_NOAFK] >= 2 )
act_info.c:       if (ch->fight_timer>0)
act_info.c:        if (IS_SET(ch->extra, EXTRA_AFK))
act_info.c:	sprintf(buf,"%s is BaCk!!!!",ch->name);
act_info.c:	REMOVE_BIT(ch->extra,EXTRA_AFK);
act_info.c:        if (((ch->in_room == NULL || ch->in_room->vnum != 3054) && ch->in_room->vnum != 86000 && ch->in_room->vnum != 86010 && ch->in_room->vnum != 
act_info.c:86020 && ch->in_room->vnum != 86030 && ch->in_room->vnum != 86099) && ch->level < 7)
act_info.c:				if ( ch->tick_timer[TIMER_NOAFK] >= 2 )
act_info.c:	if (!IS_SET(ch->extra,EXTRA_AFK))
act_info.c:	sprintf(buf,"%s is #rA#Rw#rA#Ry #rF#Rr#rO#Rm #rK#Re#rY#Rb#rO#Ra#rR#Rd#!#Y!#n",ch->name);
act_info.c:	SET_BIT(ch->extra,EXTRA_AFK);
act_info.c:        if (ch->master) stop_follower(ch);
act_info.c:	ch->tick_timer[TIMER_AFK] = 20;
act_info.c:	    if ( ch->description != NULL )
act_info.c:		strcat( buf, ch->description );
act_info.c:	free_string( ch->description );
act_info.c:	ch->description = str_dup( buf );
act_info.c:    send_to_char( ch->description ? ch->description : "(None).\n\r", ch );
act_info.c:    sprintf(hit_str, "%d", ch->hit);
act_info.c:    COL_SCALE(hit_str, ch, ch->hit, ch->max_hit);
act_info.c:    sprintf(mana_str, "%d", ch->mana);
act_info.c:    COL_SCALE(mana_str, ch, ch->mana, ch->max_mana);
act_info.c:    sprintf(move_str, "%d", ch->move);
act_info.c:    COL_SCALE(move_str, ch, ch->move, ch->max_move);
act_info.c:    sprintf(exp_str, "%d", ch->exp);
act_info.c:    COL_SCALE(exp_str, ch, ch->exp, 1000);
act_info.c:    sprintf(mhit_str, "%d", ch->max_hit);
act_info.c:    sprintf(mmana_str, "%d", ch->max_mana);
act_info.c:    sprintf(mmove_str, "%d", ch->max_move);
act_info.c:	vch_next	= vch->next;
act_info.c:	if ( vch->in_room == NULL ) continue;
act_info.c:	if ( vch->in_room != ch->in_room ) continue;
act_info.c:    	sprintf(hit_str, "%d", ch->hit);
act_info.c:    	COL_SCALE(hit_str, vch, ch->hit, ch->max_hit);
act_info.c:    	sprintf(mana_str, "%d", ch->mana);
act_info.c:    	COL_SCALE(mana_str, vch, ch->mana, ch->max_mana);
act_info.c:    	sprintf(move_str, "%d", ch->move);
act_info.c:    	COL_SCALE(move_str, vch, ch->move, ch->max_move);
act_info.c:    	sprintf(exp_str, "%d", ch->exp);
act_info.c:    	COL_SCALE(exp_str, vch, ch->exp, 1000);
act_info.c:    	sprintf(mhit_str, "%d", ch->max_hit);
act_info.c:    	sprintf(mmana_str, "%d", ch->max_mana);
act_info.c:    	sprintf(mmove_str, "%d", ch->max_move);
act_info.c:	    ch->morph,
act_info.c:	    IS_NPC(ch) ? capitalize(ch->short_descr) : ch->name,
act_info.c:	    if ( ch->level < skill_table[sn].skill_level )
act_info.c:	    if (number == 0) sprintf(buf, "#P%18s %d%%#n   ", skill_table[sn].name,ch->pcdata->learned[sn]);
act_info.c:	    if (number == 1) sprintf(buf, "#R%18s %d%%#n   ", skill_table[sn].name,ch->pcdata->learned[sn]);
act_info.c:	    if (number == 2) sprintf(buf, "#L%18s %d%%#n   ", skill_table[sn].name,ch->pcdata->learned[sn]);
act_info.c:	    if (number == 3) sprintf(buf, "#G%18s %d%%#n   ", skill_table[sn].name,ch->pcdata->learned[sn]);
act_info.c:	    if (number == 4) sprintf(buf, "#y%18s %d%%#n   ", skill_table[sn].name,ch->pcdata->learned[sn]);
act_info.c:		skill_table[sn].name, ch->pcdata->learned[sn] ); */
act_info.c:	sprintf( buf, "You have %d exp left.\n\r", ch->exp );
act_info.c:        if (ch->exp < 1000000)
act_info.c:            if ((skill_table[sn].name != NULL) && (ch->level >= skill_table[sn].skill_level))
act_info.c:                ch->pcdata->learned[sn]     = 100; 
act_info.c:        ch->exp -= 1000000;
act_info.c:	if ( ch->exp <= 0 )
act_info.c:	&&   ch->level < skill_table[sn].skill_level ) )
act_info.c:	if ( ch->pcdata->learned[sn] >= SKILL_ADEPT )
act_info.c:	else if ( ch->pcdata->learned[sn] > 0 &&
act_info.c:		ch->exp < 5000 )
act_info.c:	else if ( ch->pcdata->learned[sn] == 0 && ch->exp < 5000 )
act_info.c:	    if (ch->pcdata->learned[sn] == 0)
act_info.c:	    	ch->exp -= 5000;
act_info.c:	    	ch->pcdata->learned[sn] +=100;
act_info.c:	    	ch->exp -= (ch->pcdata->learned[sn]/2);
act_info.c:	    	ch->pcdata->learned[sn] += int_app[get_curr_int(ch)].learn;
act_info.c:	    if ( ch->pcdata->learned[sn] < SKILL_ADEPT )
act_info.c:		ch->pcdata->learned[sn] = SKILL_ADEPT;
act_info.c:    if ( strcmp( arg1, ch->pcdata->pwd ) &&
act_info.c:         strcmp( crypt( arg1, ch->pcdata->pwd ), ch->pcdata->pwd ))
act_info.c:    pwdnew = crypt( arg2, ch->pcdata->switchname );
act_info.c:    free_string( ch->pcdata->pwd );
act_info.c:    ch->pcdata->pwd = str_dup( pwdnew );
act_info.c:    if (!IS_EXTRA(ch,EXTRA_NEWPASS)) SET_BIT(ch->extra,EXTRA_NEWPASS);
act_info.c:    if (ch->desc != NULL && ch->desc->connected == CON_PLAYING )
act_info.c:	if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_SILENCE) )
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_RPCHAT)
act_info.c:        send_to_char( !IS_SET(ch->deaf, CHANNEL_CHAT)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_GAME)
act_info.c:        send_to_char( !IS_SET(ch->deaf, CHANNEL_NEWBIE)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_SOCIAL)
act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_IMMTALK)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_MUSIC)
act_info.c:        send_to_char( !IS_SET(ch->deaf, CHANNEL_KINGDOM)
act_info.c:        send_to_char( !IS_SET(ch->deaf, CHANNEL_AUCTION)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_HOWL)
act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_LOG)
act_info.c:		send_to_char( !IS_SET(ch->deaf, CHANNEL_TELEPATH)
act_info.c:            send_to_char( !IS_SET(ch->deaf, CHANNEL_MAGETALK)
act_info.c:            send_to_char( !IS_SET(ch->deaf, CHANNEL_MONK)
act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_PRAY)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_INFO)
act_info.c:	    send_to_char( !IS_SET(ch->deaf, CHANNEL_VAMPTALK)
act_info.c:		send_to_char( !IS_SET(ch->deaf, CHANNEL_HIGHTALK)
act_info.c:		send_to_char( !IS_SET(ch->deaf, CHANNEL_SIGN)
act_info.c:	send_to_char( !IS_SET(ch->deaf, CHANNEL_TELL)
act_info.c:	    REMOVE_BIT (ch->deaf, bit);
act_info.c:	    SET_BIT    (ch->deaf, bit);
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_ANSI)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_AUTOEXIT)
act_info.c:	send_to_char(  IS_SET(ch->act2, PLR2_AUTOGEM)
act_info.c:	send_to_char(  IS_SET(ch->act2, PLR2_AUTOHILT)
act_info.c:	send_to_char(  IS_SET(ch->act2, PLR2_AUTOSLAB)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_AUTOLOOT)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_AUTOSAC)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BLANK)
act_info.c:        send_to_char(  IS_SET(ch->act, PLR_MAP)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_BRIEF)
act_info.c:	send_to_char(  IS_SET(ch->act, PLR_TELNET_GA)
act_info.c:	send_to_char( !IS_SET(ch->act, PLR_NO_TELL)
act_info.c:	    SET_BIT    (ch->act, bit);
act_info.c:	    REMOVE_BIT (ch->act, bit);
act_info.c:    if ( IS_SET(ch->extra, EXTRA_FRYBALLS) ) return;
act_info.c:    if (IS_SET(ch->act, PLR_ANSI)) do_config(ch,"-ansi");
act_info.c:    if (IS_SET(ch->act, PLR_AUTOEXIT)) do_config(ch,"-autoexit");
act_info.c:    if (IS_SET(ch->act2, PLR2_AUTOGEM)) 
act_info.c:	REMOVE_BIT(ch->act2,PLR2_AUTOGEM);
act_info.c:	SET_BIT(ch->act2,PLR2_AUTOGEM);
act_info.c:    if (IS_SET(ch->act2, PLR2_AUTOSLAB))
act_info.c:	REMOVE_BIT(ch->act2,PLR2_AUTOSLAB);
act_info.c:	SET_BIT(ch->act2,PLR2_AUTOSLAB);
act_info.c:    if (IS_SET(ch->act2, PLR2_AUTOHILT))
act_info.c:	REMOVE_BIT(ch->act2,PLR2_AUTOHILT);
act_info.c:	SET_BIT(ch->act2,PLR2_AUTOHILT);
act_info.c:    if (IS_SET(ch->act, PLR_AUTOLOOT)) do_config(ch,"-autoloot");
act_info.c:    if (IS_SET(ch->act, PLR_AUTOSAC)) do_config(ch,"-autosac");
act_info.c:    if (IS_SET(ch->act, PLR_BLANK)) do_config(ch,"-blank");
act_info.c:  if (IS_SET(ch->act, PLR_MAP))
act_info.c:    if (IS_SET(ch->act, PLR_BRIEF)) do_config(ch,"-brief");
act_info.c:    if (IS_SET(ch->act, PLR_BRIEF2)) do_config(ch,"-brief2");
act_info.c:    if (IS_SET(ch->act, PLR_BRIEF3)) do_config(ch,"-brief3");
act_info.c:    if (IS_SET(ch->act, PLR_BRIEF4)) do_config(ch,"-brief4");
act_info.c:    if (IS_SET(ch->act, PLR_BRIEF5)) do_config(ch,"-brief5");
act_info.c:    if (IS_SET(ch->act, PLR_BRIEF6)) do_config(ch,"-brief6");
act_info.c:         SET_BIT(ch->extra, EXTRA_PROMPT);
act_info.c:         REMOVE_BIT(ch->extra, EXTRA_PROMPT);
act_info.c:      free_string(ch->prompt);
act_info.c:      ch->prompt = str_dup( "" );
act_info.c:   free_string( ch->prompt );
act_info.c:   ch->prompt = str_dup( buf );
act_info.c:      free_string(ch->cprompt);
act_info.c:      ch->cprompt = str_dup( "" );
act_info.c:   free_string( ch->cprompt );
act_info.c:   ch->cprompt = str_dup( buf );
act_info.c:    if (ch->level > 6) send_to_char(" @",ch);
act_info.c:    if (ch->level > 6) send_to_char(buf,ch);
act_info.c:	if (ch->level > 6) send_to_char(" @",ch);
act_info.c:        if (ch->level > 6) send_to_char(buf,ch);
act_move.c:    in_room = ch->in_room;
act_move.c:if(IS_CLASS(ch,CLASS_RPONLY)&&ch->level<4&& ch->in_room->vnum==3001){
act_move.c:    if ( ch->furn )
act_move.c:	if ( ch->position == POS_STANDING )
act_move.c:	    act("You're standing in $p right now.",ch,ch->furn,NULL,TO_CHAR);
act_move.c:	else if ( ch->position == POS_SITTING )
act_move.c:	    act("You're sitting in $p right now.",ch,ch->furn,NULL,TO_CHAR);
act_move.c:	else act("You're in $p right now.",ch,ch->furn,NULL,TO_CHAR);
act_move.c:if  (door == DIR_NORTH && ((obj=get_obj_list(ch,"walln",ch->in_room->contents)) != NULL ||
act_move.c:if  (door== DIR_SOUTH && ((obj=get_obj_list(ch,"walls",ch->in_room->contents)) != NULL ||
act_move.c:if  (door== DIR_EAST && ((obj=get_obj_list(ch,"walle",ch->in_room->contents)) != NULL ||
act_move.c:if  (door== DIR_WEST && ((obj=get_obj_list(ch,"wallw",ch->in_room->contents)) != NULL ||
act_move.c:if  (door== DIR_UP && ((obj=get_obj_list(ch,"wallu",ch->in_room->contents)) != NULL ||
act_move.c:if  (door== DIR_DOWN && ((obj=get_obj_list(ch,"walld",ch->in_room->contents)) != NULL ||
act_move.c:	if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_WEREWOLF) &&ch->power[DISC_WERE_BOAR] > 0 && !IS_SET(pexit->exit_info, EX_PRISMATIC_WALL))
act_move.c:    &&	 ch->master != NULL
act_move.c:    &&	 in_room == ch->master->in_room
act_move.c:    if (IS_NPC(ch) && (mount=ch->mount) != NULL && IS_SET(ch->mounted,IS_MOUNT))
act_move.c:        for (rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room) {
act_move.c:                if (rch->spec_fun == spec_wall_force && (ch->level <= 100) ) {
act_move.c:                    if (door == 0 && is_name("north", rch->long_descr))
act_move.c:                    else if (door == 1 && is_name("east", rch->long_descr))
act_move.c:                    else if (door == 2 && is_name("south", rch->long_descr))
act_move.c:                    else if (door == 3 && is_name("west", rch->long_descr))
act_move.c:                    else if (door == 4 && is_name("up", rch->long_descr))
act_move.c:                    else if (door == 5 && is_name("down", rch->long_descr))
act_move.c:	if ( IS_NPC( ch ) || ch->level < 10)
act_move.c:!IS_SET(ch->pcdata->powers[1], DPOWER_LEVITATION))) &&
act_move.c:	    &&	 !((mount=ch->mount) != NULL && IS_SET(ch->mounted,IS_RIDING) &&
act_move.c:		else if ((mount=ch->mount) != NULL && IS_SET(ch->mounted, IS_RIDING) 
act_move.c:	else if (!IS_NPC(ch) && (IS_CLASS(ch, CLASS_DROW) && IS_SET(ch->pcdata->powers[1], DPOWER_LEVITATION)))
act_move.c:		for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
act_move.c:	if(ch->move <= 0)
act_move.c:	if (IS_SET(ch->mounted, IS_RIDING) && (ch->move < move || ch->move < 1))
act_move.c:    if (IS_SET(pexit->exit_info, EX_QPFILTER) && (ch->pcdata->quest < 50 ) && (!IS_IMMORTAL(ch)) )
act_move.c:	&& ch->power[DISC_DAEM_GELU] < 5 && (!IS_IMMORTAL(ch)))
act_move.c:	&& ch->class == 0)
act_move.c:	&& ch->class != 0 && !IS_NPC(ch) && ch->level > 2)
act_move.c:	ch->hit -= dice(6, 50);
act_move.c:	&& ch->class == 0)
act_move.c:	&& ch->class != 0 && !IS_NPC(ch) && ch->level > 2)
act_move.c:	ch->hit -= dice(6, 70);
act_move.c:	ch->hit /= 2;
act_move.c:	ch->move /= 2;
act_move.c:	if (!IS_SET(ch->mounted, IS_RIDING)) ch->move -= move;
act_move.c:    if ( (mount = ch->mount) != NULL && ch->mounted == IS_RIDING )
act_move.c:    else if ( ch->in_room->sector_type == SECT_WATER_SWIM )
act_move.c:    else if ( IS_SET(ch->polyaff,POLY_SERPENT) )
act_move.c:    else if ( IS_SET(ch->polyaff,POLY_WOLF) )
act_move.c:    else if ( IS_SET(ch->polyaff,POLY_FROG) )
act_move.c:    else if ( IS_SET(ch->polyaff,POLY_FISH) )
act_move.c:    else if ( ch->hit < (ch->max_hit/4) )
act_move.c:    else if ( ch->hit < (ch->max_hit/3) )
act_move.c:    else if ( ch->hit < (ch->max_hit/2) )
act_move.c:	if (ch->pcdata->condition[COND_DRUNK] > 10)
act_move.c:    if (!IS_NPC(ch) && ch->stance[0] != -1) do_stance(ch,"");
act_move.c:	if ( ch->in_room == NULL || victim->in_room == NULL ) continue;
act_move.c:	if ( ch == victim || ch->in_room != victim->in_room) continue;
act_move.c:	&& ( IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS) )
act_move.c:	    if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING &&
act_move.c:		sprintf(poly,"%s flies $T%s",ch->morph,mount2);
act_move.c:	    else if ( (mount = ch->mount) != NULL && ch->mounted == IS_RIDING )
act_move.c:		sprintf(poly,"%s rides $T%s",ch->morph,mount2);
act_move.c:		sprintf(poly,"%s %s $T%s",ch->morph,leave,mount2);
act_move.c:	&& ( IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS) )
act_move.c:	    if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING &&
act_move.c:	    else if ( (mount = ch->mount) != NULL && ch->mounted == IS_RIDING )
act_move.c:	    if ( ch->fight_timer > 0 )
act_move.c:		    ch->name);
act_move.c:		ch->position = POS_SLEEPING;
act_move.c:		ch->fight_timer += 10;
act_move.c:	    if ( ch->fight_timer > 0 )
act_move.c:		    ch->name);
act_move.c:		ch->position = POS_SLEEPING;
act_move.c:		ch->fight_timer += 10;
act_move.c:    if ( IS_SET(to_room->room_flags,ROOM_NODECAP) && ch->fight_timer > 0 )
act_move.c:		ch->name);
act_move.c:	ch->position = POS_SLEEPING;
act_move.c:	ch->fight_timer += 10;
act_move.c:	if ( ch->in_room == NULL || victim->in_room == NULL ) continue;
act_move.c:	if ( ch == victim || ch->in_room != victim->in_room) continue;
act_move.c:	&& ( IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS) ) && can_see(victim,ch))
act_move.c:	    if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING &&
act_move.c:		sprintf(poly,"%s flies in from %s%s",ch->morph,buf,mount2);
act_move.c:	    else if ( (mount = ch->mount) != NULL && ch->mounted == IS_RIDING )
act_move.c:		sprintf(poly,"%s rides in from %s%s",ch->morph,buf,mount2);
act_move.c:		sprintf(poly,"%s %s in from %s%s",ch->morph,leave,buf,mount2);
act_move.c:	&& ( IS_NPC(ch) || !IS_SET(ch->act, PLR_WIZINVIS) ) )
act_move.c:	    if (((mount = ch->mount) != NULL && ch->mounted == IS_RIDING &&
act_move.c:	    else if ( (mount = ch->mount) != NULL && ch->mounted == IS_RIDING )
act_move.c:	fch_next = fch->next_in_room;
act_move.c:	if ( (mount = fch->mount) != NULL && mount == ch && IS_SET(fch->mounted,IS_MOUNT))
act_move.c:	    char_to_room(fch,ch->in_room);
act_move.c:	if ( fch->master == ch && fch->position == POS_STANDING 
act_move.c:		&& fch->in_room != ch->in_room)
act_move.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
act_move.c:    ch->pcdata->obj_vnum = 0;
act_move.c:    ch->pcdata->chobj = NULL;
act_move.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
act_move.c:    REMOVE_BIT(ch->extra, EXTRA_OSWITCH);
act_move.c:    free_string(ch->morph);
act_move.c:    ch->morph = str_dup("");
act_move.c:    if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
act_move.c:	REMOVE_BIT(ch->immune, IMM_TRAVEL);
act_move.c:	SET_BIT(ch->immune, IMM_TRAVEL);
act_move.c:    if (IS_NPC(ch) && IS_SET(ch->act, ACT_DUMMY)) return;
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:	old_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room) add_tracks( ch, DIR_SOUTH );
act_move.c:    if (IS_NPC(ch) && IS_SET(ch->act, ACT_DUMMY)) return;
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:	old_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room) add_tracks( ch, DIR_WEST );
act_move.c:    if (IS_NPC(ch) && IS_SET(ch->act, ACT_DUMMY)) return;
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:	old_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room) add_tracks( ch, DIR_NORTH );
act_move.c:    if (IS_NPC(ch) && IS_SET(ch->act, ACT_DUMMY))
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:	old_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room) add_tracks( ch, DIR_EAST );
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:	old_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room) add_tracks( ch, DIR_DOWN );
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room)
act_move.c:	old_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && ch->in_room != in_room) add_tracks( ch, DIR_UP );
act_move.c:	    if ( ( pexit = ch->in_room->exit[door] ) != NULL
act_move.c:    if ( ( pexit = ch->in_room->exit[door] ) == NULL )
act_move.c:    obj = get_obj_list( ch, arg, ch->in_room->contents );
act_move.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
act_move.c:    location = ch->in_room;
act_move.c:	sprintf(poly,"%s steps into $p.",ch->morph);
act_move.c:	sprintf(poly,"%s steps out of $p.",ch->morph);
act_move.c:    for ( portal = ch->in_room->contents; portal != NULL; portal = portal_next )
act_move.c:		REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_move.c:		SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_move.c:    if ( ( mount = ch->mount ) == NULL ) return;
act_move.c:    char_to_room( mount, ch->in_room );
act_move.c:    location = ch->in_room;
act_move.c:	sprintf(poly,"%s steps into $p.",ch->morph);
act_move.c:	sprintf(poly,"%s steps out of $p.",ch->morph);
act_move.c:    for ( portal = ch->in_room->contents; portal != NULL; portal = portal_next )
act_move.c:		REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_move.c:		SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
act_move.c:    if ( ( mount = ch->mount ) == NULL ) return;
act_move.c:    char_to_room( mount, ch->in_room );
act_move.c:	pexit = ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
act_move.c:	pexit	= ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	    for ( rch = to_room->people; rch != NULL; rch = rch->next_in_room )
act_move.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
act_move.c:	pexit	= ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	pexit = ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:    for ( gch = ch->in_room->people; gch; gch = gch->next_in_room )
act_move.c:	if ( IS_NPC(gch) && IS_AWAKE(gch) && ch->level + 5 < gch->level )
act_move.c:    if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[gsn_pick_lock] )
act_move.c:	pexit = ch->in_room->exit[door];
act_move.c:	&&   pexit_rev->to_room == ch->in_room )
act_move.c:	if ( ch->position == POS_FIGHTING )
act_move.c:	if ( ch->position != POS_STANDING )
act_move.c:		ch->furn = obj;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_STANDING;
act_move.c:	ch->position = POS_STANDING;
act_move.c:	ch->position = POS_STANDING;
act_move.c:	if ( ch->furn )
act_move.c:	    act("You step out of $p.",ch,ch->furn,NULL,TO_CHAR);
act_move.c:	    act("$n steps out of $p.",ch,ch->furn,NULL,TO_CHAR);
act_move.c:	    ch->furn->value[2]--;
act_move.c:	    ch->furn = NULL;
act_move.c:    if ( ch->position == POS_STANDING && ch->furn )
act_move.c:	{ ch->furn->value[2]--; ch->furn = NULL; }
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_RESTING;
act_move.c:	if ( ch->position == POS_FIGHTING )
act_move.c:	if ( ch->position != POS_STANDING )
act_move.c:		ch->furn = obj;
act_move.c:		ch->position = POS_SITTING;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_SITTING;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_MEDITATING;
act_move.c:	ch->position = POS_MEDITATING;
act_move.c:    if (IS_NPC(ch) || (!IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_PROT] < 8))
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_MEDITATING;
act_move.c:	ch->position = POS_MEDITATING;
act_move.c:    switch ( ch->position )
act_move.c:	ch->position = POS_SLEEPING;
act_move.c:    if ( IS_NPC(ch) || number_percent( ) < ch->pcdata->learned[gsn_sneak] )
act_move.c:	af.duration  = ch->level;
act_move.c:	REMOVE_BIT(ch->affected_by, AFF_HIDE);
act_move.c:    if ( IS_NPC(ch) || number_percent( ) < ch->pcdata->learned[gsn_hide] )
act_move.c:	SET_BIT(ch->affected_by, AFF_HIDE);
act_move.c:    REMOVE_BIT	 ( ch->affected_by, AFF_HIDE		);
act_move.c:    REMOVE_BIT	 ( ch->affected_by, AFF_INVISIBLE	);
act_move.c:    REMOVE_BIT	 ( ch->affected_by, AFF_SNEAK		);
act_move.c:    if ( ch->position == POS_FIGHTING)
act_move.c:    if ( !IS_NPC(ch) && ch->fight_timer > 0 )
act_move.c:    if ( ( location = get_room_index( ch->home ) ) == NULL )
act_move.c:	REMOVE_BIT(ch->affected_by, AFF_DARKNESS);
act_move.c:    if ( ch->in_room == location )
act_move.c:    if ( (IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
act_move.c:    ||	 IS_AFFECTED(ch, AFF_CURSE)) && (ch->level < 6) )
act_move.c:    if (ch->fight_timer > 0)
act_move.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NO_CHANT))
act_move.c:    if ( IS_SET(ch->flag2, AFF_TOTALBLIND) )
act_move.c:    if ( ( victim = ch->fighting ) != NULL )
act_move.c:    if ( ( mount = ch->mount ) == NULL ) return;
act_move.c:    char_to_room( mount, ch->in_room );
act_move.c:    if ( ch->in_room->vnum == ch->home )
act_move.c:    if ( ch->pcdata->kingdom >= 0 )
act_move.c:	if ( ch->pcdata->kingdom == 0 && ch->in_room->vnum >= 86000 && ch->in_room->vnum <= 86099 )
act_move.c:	sprintf(buf, "%s, has tried unsucessfully to make a kingdom not his own his home!\n\r", ch->pcdata->switchname);
act_move.c:	if ( ch->pcdata->kingdom != 1 && ch->in_room->vnum >= 86090 && ch->in_room->vnum <= 86099 )
act_move.c:	sprintf(buf, "%s, has tried unsucessfully to make a kingdom not his own his home!\n\r", ch->pcdata->switchname);
act_move.c:	if ( ch->pcdata->kingdom != 2 && ch->in_room->vnum >= 86010 && ch->in_room->vnum <= 86019 )
act_move.c:	sprintf(buf, "%s, has tried unsucessfully to make a kingdom not his own his home!\n\r", ch->pcdata->switchname);
act_move.c:	if ( ch->pcdata->kingdom != 3 && ch->in_room->vnum >= 86000 && ch->in_room->vnum <= 86009 )
act_move.c:	sprintf(buf, "%s, has tried unsucessfully to make a kingdom not his own his home!\n\r", ch->pcdata->switchname);
act_move.c:	if ( ch->pcdata->kingdom != 4 && ch->in_room->vnum >= 86020 && ch->in_room->vnum <= 86029 )
act_move.c:	sprintf(buf, "%s, has tried unsucessfully to make a kingdom not his own his home!\n\r", ch->pcdata->switchname);
act_move.c:	if ( ch->pcdata->kingdom != 5 && ch->in_room->vnum >= 86030 && ch->in_room->vnum <= 86039 )
act_move.c:	sprintf(buf, "%s, has tried unsucessfully to make a kingdom not his own his home!\n\r", ch->pcdata->switchname);
act_move.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL) ||
act_move.c:	 IS_SET(ch->in_room->room_flags, ROOM_SAFE) )
act_move.c:    ch->home = ch->in_room->vnum;
act_move.c:    if ( ch->position >= POS_SLEEPING )
act_move.c:    if( ch->fight_timer > 0)
act_move.c:    if (ch->in_room != NULL)
act_move.c:      if (IS_SET(ch->in_room->room_flags, ROOM_ARENA) || in_fortress(ch))
act_move.c:    if ( ch->in_room == location )
act_move.c:    ch->move = 0;
act_move.c:    ch->mana = 0;
act_move.c:    sprintf(buf,"%s has escaped #Gdefenceless#n, easy kill for the quick.",ch->pcdata->switchname);
act_move.c:    if (IS_SET(ch->newbits, NEW_DARKNESS)) {
act_move.c:	REMOVE_BIT(ch->newbits, NEW_DARKNESS);
act_move.c:	if (ch->in_room != NULL)
act_move.c:	if (IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
act_move.c:	REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
act_move.c:    return (ch->power[ch->pcdata->disc_research] + 1) * 10;
act_move.c:    if (ch->pcdata->disc_points == 666) return;
act_move.c:    if (ch->pcdata->disc_research == -1) return;
act_move.c:    ch->pcdata->disc_points += points;
act_move.c:    if (ch->pcdata->disc_points < 0)
act_move.c:	ch->pcdata->disc_points = 0;
act_move.c:    if (ch->pcdata->disc_points >= 
act_move.c:	ch->pcdata->disc_points = 999;
act_move.c:	if (ch->pcdata->rank == AGE_CHILDE || ch->pcdata->rank == AGE_NEONATE)
act_move.c:	else if (ch->pcdata->rank == AGE_ANCILLA)
act_move.c:	else if (ch->pcdata->rank == AGE_ELDER)
act_move.c:	if (ch->pcdata->disc_research == -1)
act_move.c:	ch->pcdata->disc_research = -1;
act_move.c:	ch->pcdata->disc_points = 0;
act_move.c:    if (ch->pcdata->disc_research != -1)
act_move.c:		needed = ((ch->power[i] - 5) * 10);
act_move.c:	    if (ch->power[i] < 0)	    
act_move.c:	     && ch->power[i] >= maxlevel)
act_move.c:	  if ( ch->power[i] >= 10 )
act_move.c:	    ch->pcdata->disc_points = 0;
act_move.c:	    ch->pcdata->disc_research = i;
act_move.c:	&& ch->power[loop] >= 0 )
act_move.c:		ch->power[loop]);
act_move.c:    if (ch->pcdata->disc_research < 0)
act_move.c:    if (ch->power[ch->pcdata->disc_research] < 0)
act_move.c:    if (ch->pcdata->disc_points == 999)
act_move.c:	    discipline[ch->pcdata->disc_research]);
act_move.c:    if (ch->pcdata->disc_research < MAX_DISCIPLINES)
act_move.c:	    discipline[ch->pcdata->disc_research]);
act_move.c:    percent = ch->pcdata->disc_points * 40 / disc_points_needed(ch);
act_move.c:		REMOVE_BIT(ch->immune, IMM_SLASH);
act_move.c:		REMOVE_BIT(ch->immune, IMM_STAB);
act_move.c:		REMOVE_BIT(ch->immune, IMM_SMASH);
act_move.c:		REMOVE_BIT(ch->immune, IMM_ANIMAL);
act_move.c:		REMOVE_BIT(ch->immune, IMM_MISC);
act_move.c:		REMOVE_BIT(ch->immune, IMM_CHARM);
act_move.c:		REMOVE_BIT(ch->immune, IMM_HEAT);
act_move.c:		REMOVE_BIT(ch->immune, IMM_COLD);
act_move.c:		REMOVE_BIT(ch->immune, IMM_LIGHTNING);
act_move.c:		REMOVE_BIT(ch->immune, IMM_ACID);
act_move.c:		REMOVE_BIT(ch->immune, IMM_COLD);
act_move.c:		REMOVE_BIT(ch->immune, IMM_DRAIN);
act_move.c:		REMOVE_BIT(ch->immune, IMM_VOODOO);
act_move.c:		REMOVE_BIT(ch->immune, IMM_HURL);
act_move.c:		REMOVE_BIT(ch->immune, IMM_BACKSTAB);
act_move.c:		REMOVE_BIT(ch->immune, IMM_KICK);
act_move.c:		REMOVE_BIT(ch->immune, IMM_DISARM);
act_move.c:		REMOVE_BIT(ch->immune, IMM_STEAL);
act_move.c:  if (ch->pcdata->upgrade_level > 0)
act_move.c:    max_stat = max_stat + ((ch->pcdata->upgrade_level) * 25);
act_move.c:  //    if (ch->generation < 3)
act_move.c://      if (ch->generation == 3) gencost = 400000000;
act_move.c://      else if (ch->generation == 4) gencost = 200000000;
act_move.c://      else if (ch->generation == 5) gencost =  50000000;
act_move.c://      if (ch->exp < gencost)
act_move.c://      ch->generation--;
act_move.c://      ch->exp -= gencost;
act_move.c:      if (!str_cmp(arg1,"fodder") && ch->pcdata->rank == 0)
act_move.c:	if (ch->exp < 10000000)
act_move.c:	ch->exp -= 10000000;
act_move.c:	ch->pcdata->rank++;
act_move.c:	sprintf( buf, "%s is now fodder in the Blood Wars!",ch->pcdata->switchname );
act_move.c:      if (!str_cmp(arg1,"fighter") && ch->pcdata->rank == 1)
act_move.c:	if (ch->pcdata->powers[TANARRI_POWER_COUNTER] < 3)
act_move.c:	if (ch->exp < 20000000)
act_move.c:	ch->exp -= 20000000;
act_move.c:	ch->pcdata->rank++;
act_move.c:	sprintf( buf, "%s is now a fighter in the Blood Wars!",ch->pcdata->switchname );
act_move.c:      if (!str_cmp(arg1,"elite") && ch->pcdata->rank == 2)
act_move.c:	if (ch->pcdata->powers[TANARRI_POWER_COUNTER] < 6)
act_move.c:	if (ch->exp < 40000000)
act_move.c:	ch->exp -= 40000000;
act_move.c:	ch->pcdata->rank++;
act_move.c:	sprintf( buf, "%s is now an elite warrior in the Blood Wars!",ch->pcdata->switchname );
act_move.c:      if (!str_cmp(arg1,"captain") && ch->pcdata->rank == 3)
act_move.c:	if (ch->pcdata->powers[TANARRI_POWER_COUNTER] < 9)
act_move.c:	if (ch->exp < 80000000)
act_move.c:	ch->exp -= 80000000;
act_move.c:	ch->pcdata->rank++;
act_move.c:	sprintf( buf, "%s is now a captain in the Blood Wars!",ch->pcdata->switchname );
act_move.c:      if (!str_cmp(arg1,"warlord") && ch->pcdata->rank == 4)
act_move.c:	if (ch->pcdata->powers[TANARRI_POWER_COUNTER] < 12)
act_move.c:	if (ch->exp < 160000000)
act_move.c:	ch->exp -= 160000000;
act_move.c:	ch->pcdata->rank++;
act_move.c:	sprintf( buf, "%s is now a warlord in the Blood Wars!",ch->pcdata->switchname );
act_move.c:      if (!str_cmp(arg1,"balor") && ch->pcdata->rank == 5)
act_move.c:	if (ch->pcdata->powers[TANARRI_POWER_COUNTER] < 15)
act_move.c:	if (ch->exp < 320000000)
act_move.c:	ch->exp -= 320000000;
act_move.c:	ch->pcdata->rank++;
act_move.c:	sprintf( buf, "%s is now a Tanar'ri Balor!",ch->pcdata->switchname );
act_move.c:      if (!IS_CLASS(ch, CLASS_ANGEL) || ch->pcdata->powers[ANGEL_JUSTICE] > 4)
act_move.c:      if (ch->exp < (ch->pcdata->powers[ANGEL_JUSTICE]+1)*10000000)
act_move.c:      ch->pcdata->powers[ANGEL_JUSTICE]++;
act_move.c:      ch->exp -= ch->pcdata->powers[ANGEL_JUSTICE]*10000000;
act_move.c:      if (!IS_CLASS(ch, CLASS_ANGEL) || ch->pcdata->powers[ANGEL_LOVE] > 4)
act_move.c:      if (ch->exp < (ch->pcdata->powers[ANGEL_LOVE]+1)*10000000)
act_move.c:      ch->pcdata->powers[ANGEL_LOVE]++;
act_move.c:      ch->exp -= ch->pcdata->powers[ANGEL_LOVE]*10000000;
act_move.c:      if (!IS_CLASS(ch, CLASS_ANGEL) || ch->pcdata->powers[ANGEL_HARMONY] > 4)
act_move.c:      if (ch->exp < (ch->pcdata->powers[ANGEL_HARMONY]+1)*10000000)
act_move.c:      ch->pcdata->powers[ANGEL_HARMONY]++;
act_move.c:      ch->exp -= ch->pcdata->powers[ANGEL_HARMONY]*10000000;
act_move.c:      if (!IS_CLASS(ch, CLASS_ANGEL) || ch->pcdata->powers[ANGEL_PEACE] > 4)
act_move.c:      if (ch->exp < (ch->pcdata->powers[ANGEL_PEACE]+1)*10000000)
act_move.c:      ch->pcdata->powers[ANGEL_PEACE]++;
act_move.c:      ch->exp -= ch->pcdata->powers[ANGEL_PEACE]*10000000;
act_move.c:if ( ch->race >= 1)
act_move.c: 	statcap = UMIN(1000000, (200000 + (4000 * ch->race) + (get_curr_con(ch) * 1000)));
act_move.c:if ( ch->race == 0)
act_move.c:  /*  statcap = statcap + (ch->pcdata->mod_con * 0.05);
act_move.c:    if (ch->pcdata->mod_con > 0)
act_move.c:    statcap = statcap + (ch->pcdata->mod_con * 0.05);
act_move.c:    if (ch->max_hit >= statcap)
act_move.c:      if (ch->max_hit < 0 && ch->exp < UMAX(1, (-1 * (ch->max_hit + 1) ) ) )
act_move.c:      if (ch->exp >= UMAX(1, (ch->max_hit + 1)) && ch->max_hit < statcap)
act_move.c:	ch->max_hit++;
act_move.c:	if (ch->max_hit < 0)
act_move.c:	    ch->exp -= ch->max_hit * -1;
act_move.c:	ch->exp -= UMAX(1, ch->max_hit);
act_move.c:    int statcap = UMIN(500000, 200000 + (4000 * ch->race));
act_move.c:    if (ch->max_move >= statcap)
act_move.c:      if (ch->max_move < 0 && ch->exp < UMAX(1, (-1 * (ch->max_move + 1) ) ) )
act_move.c:      if (ch->exp >= UMAX(1, (ch->max_move + 1)) && ch->max_move < statcap)
act_move.c:	ch->max_move++;
act_move.c:	if (ch->max_move < 0)
act_move.c:	    ch->exp -= ch->max_move * -1;
act_move.c:	    ch->exp -= UMAX(1, ch->max_move);
act_move.c:    int statcap = UMIN(500000, 200000 + (4000 * ch->race));
act_move.c:    if (ch->max_mana >= statcap)
act_move.c:      if (ch->max_mana < 0 && ch->exp < UMAX(1, (-1 * (ch->max_mana + 1) ) ) )
act_move.c:      if (ch->exp >= UMAX(1, (ch->max_mana + 1)) && ch->max_mana < statcap)
act_move.c:	ch->max_mana++;
act_move.c:	if (ch->max_mana < 0)
act_move.c:	    ch->exp -= ch->max_mana * -1;
act_move.c:	    ch->exp -= UMAX(1, ch->max_mana);
act_move.c:	sprintf( buf, "You have %d experience points.\n\r", ch->exp );
act_move.c:    (ch->pcdata->rank == AGE_NEONATE))
act_move.c:    (ch->pcdata->rank == AGE_CHILDE))
act_move.c:	&& ch->beast > 0 )
act_move.c:else if (!str_cmp(arg1,"belt1") && IS_CLASS(ch, CLASS_NINJA) && (ch->pcdata->rank == 0))	
act_move.c:(ch->pcdata->rank == BELT_ONE))        
act_move.c:(ch->pcdata->rank == BELT_TWO))   
act_move.c:(ch->pcdata->rank == BELT_THREE))   
act_move.c:(ch->pcdata->rank == BELT_FOUR))   
act_move.c:(ch->pcdata->rank == BELT_FIVE))   
act_move.c:(ch->pcdata->rank == BELT_SIX))   
act_move.c:(ch->pcdata->rank == BELT_SEVEN))   
act_move.c:(ch->pcdata->rank == BELT_EIGHT))   
act_move.c:(ch->pcdata->rank == BELT_NINE))   
act_move.c:(ch->pcdata->rank == AGE_ANCILLA))
act_move.c:(ch->pcdata->rank == AGE_ELDER))
act_move.c:(ch->pcdata->rank == AGE_METHUSELAH))
act_move.c:(ch->pcdata->rank == AGE_LA_MAGRA))
act_move.c:	    && ch->power[loop] > -1 && str_cmp(arg1, "con") )
act_move.c:	    if (ch->pcdata->disc_research == -1)
act_move.c:	    if (ch->pcdata->disc_points != 999)
act_move.c:	    if (loop != ch->pcdata->disc_research)
act_move.c:	    ch->power[loop]+=1;
act_move.c:	    ch->pcdata->disc_research = -1;
act_move.c:	    ch->pcdata->disc_points = 0;
act_move.c:	    if (ch->power[DISC_DAEM_GELU] == 5)
act_move.c:	pow = ch->power[DISC_DAEM_ATTA];
act_move.c:	    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
act_move.c:	   SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_TAIL);
act_move.c:	    SET_BIT(ch->pcdata->stats[UNI_GEN], VAM_WINGS);
act_move.c:    magic = (1+ch->pcdata->stats[DROW_MAGIC])*100;
act_move.c:    silver = (1+ch->siltol)*2500;
act_move.c:    gnosis = ( 1 + ch->gnosis[GMAXIMUM] ) * 250000;
act_move.c:    if ( ch->beast > 25 )
act_move.c:    else if ( ch->beast > 15 )
act_move.c:    else if ( ch->beast > 10 )
act_move.c:    else if ( ch->beast > 2 )
act_move.c:	pAbility    = &ch->pcdata->perm_str;
act_move.c:	pAbility    = &ch->pcdata->perm_int;
act_move.c:	pAbility    = &ch->pcdata->perm_wis;
act_move.c:	pAbility    = &ch->pcdata->perm_dex;
act_move.c:	pAbility    = &ch->pcdata->perm_con;
act_move.c:	  if( ch->level >= 3 ) return stcf(ch,"You're already an avatar.\n\r");
act_move.c:	  if( ch->max_hit < 2000)
act_move.c:	  if( ch->max_hit < 2000)
act_move.c:	  ch->level		 = 3;
act_move.c:	  if (!ragnarok) ch->pcdata->safe_counter = 10;
act_move.c:	  else ch->pcdata->safe_counter = 3;
act_move.c:	  ch->pcdata->last_killer = NULL;
act_move.c:	  if (IS_SET(ch->pcdata->jflags, JFLAG_SETAVATAR)) avatar_message(ch);
act_move.c:	    sprintf( buf, "%s has become an avatar!",ch->pcdata->switchname );
act_move.c:	  sh_int quiet_pointer=ch->pcdata->stats[DROW_MAGIC];
act_move.c:	sh_int quiet_pointer=ch->siltol; /* dirrent type of int*/
act_move.c:	sh_int quiet_pointer = ch->gnosis[GMAXIMUM];
act_move.c:	sh_int quiet_pointer = ch->beast;
act_move.c:((ch->pcdata->rank ==AGE_NEONATE) || (ch->pcdata->rank == AGE_CHILDE))) 
act_move.c:    if (ch->exp < ancilla)
act_move.c:      ch->exp -= 1500000;
act_move.c:      ch->pcdata->rank = AGE_ANCILLA;
act_move.c:      sprintf(buf,"%s is now an Ancilla!", ch->name);
act_move.c:   (ch->pcdata->rank == AGE_ANCILLA))
act_move.c:	if (ch->exp < elder)
act_move.c:	ch->exp -= 7500000;   
act_move.c:	ch->pcdata->rank = AGE_ELDER;
act_move.c:	sprintf(buf,"%s is now an Elder!", ch->name);
act_move.c:&& (ch->pcdata->rank == AGE_ELDER))
act_move.c:     if (ch->exp < methuselah)
act_move.c:    ch->exp -= 15000000;
act_move.c:    ch->pcdata->rank = AGE_METHUSELAH;
act_move.c:    sprintf(buf,"%s is now a Methuselah!", ch->name);
act_move.c:&& (ch->pcdata->rank == AGE_METHUSELAH))
act_move.c:     if (ch->exp < lamagra)
act_move.c:    ch->exp -= 30000000;
act_move.c:    ch->pcdata->rank = AGE_LA_MAGRA;
act_move.c:    sprintf(buf,"%s is now a La Magra!", ch->name);
act_move.c:&& (ch->pcdata->rank == AGE_LA_MAGRA))
act_move.c:     if (ch->exp < trueblood)
act_move.c:    ch->exp -= 60000000;
act_move.c:    ch->pcdata->rank = AGE_TRUEBLOOD;
act_move.c:    sprintf(buf,"%s is now a TrueBlood!", ch->name);
act_move.c:      if (ch->exp < 1000000)
act_move.c:ch->exp = ch->exp - 1000000;
act_move.c:SET_BIT(ch->immune, IMM_SUNLIGHT);
act_move.c:&& (ch->pcdata->rank < BELT_ONE))
act_move.c:     if (ch->exp < belt1)
act_move.c:    ch->exp -= 5000000;
act_move.c:    ch->pcdata->rank = BELT_ONE;
act_move.c:    sprintf(buf,"%s has started martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_ONE))
act_move.c:     if (ch->exp < belt2)
act_move.c:    ch->exp -= 10000000;
act_move.c:    ch->pcdata->rank = BELT_TWO;
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_TWO))
act_move.c:     if (ch->exp < belt3)
act_move.c:    ch->exp -= 15000000;
act_move.c:    ch->pcdata->rank = BELT_THREE;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_THREE))
act_move.c:     if (ch->exp < belt4)
act_move.c:    ch->exp -= 20000000;
act_move.c:    ch->pcdata->rank = BELT_FOUR;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_FOUR))
act_move.c:     if (ch->exp < belt5)
act_move.c:    ch->exp -= 25000000;
act_move.c:    ch->pcdata->rank = BELT_FIVE;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_FIVE))
act_move.c:     if (ch->exp < belt6)
act_move.c:    ch->exp -= 30000000;
act_move.c:    ch->pcdata->rank = BELT_SIX;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_SIX))
act_move.c:     if (ch->exp < belt7)
act_move.c:    ch->exp -= 35000000;
act_move.c:    ch->pcdata->rank = BELT_SEVEN;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_SEVEN))
act_move.c:     if (ch->exp < belt8)
act_move.c:    ch->exp -= 40000000;
act_move.c:    ch->pcdata->rank = BELT_EIGHT;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_EIGHT))
act_move.c:     if (ch->exp < belt9)
act_move.c:    ch->exp -= 45000000;
act_move.c:    ch->pcdata->rank = BELT_NINE;  
act_move.c:    sprintf(buf,"%s advances in their martial arts studies!", ch->name);
act_move.c:&& (ch->pcdata->rank == BELT_NINE))
act_move.c:     if (ch->exp < belt10)
act_move.c:    ch->exp -= 50000000;
act_move.c:    ch->pcdata->rank = BELT_TEN;  
act_move.c:    sprintf(buf,"%s has completed their martial arts studies!", ch->name);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_SLASH);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_STAB);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_SMASH);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_ANIMAL);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_MISC);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_CHARM);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_HEAT);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_COLD);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_LIGHTNING);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_ACID);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_SLEEP);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_DRAIN);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_VOODOO);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_HURL);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_BACKSTAB);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_KICK);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_DISARM);
act_move.c:	if (ch->exp < immcost)
act_move.c:	ch->exp = ch->exp - immcost;
act_move.c:	SET_BIT(ch->immune, IMM_STEAL);
act_move.c:	if ( ch->pcdata->perm_str < max_stat ) send_to_char( " Str", ch );
act_move.c:	if ( ch->pcdata->perm_int < max_stat ) send_to_char( " Int", ch );
act_move.c:	if ( ch->pcdata->perm_wis < max_stat ) send_to_char( " Wis", ch );
act_move.c:	if ( ch->pcdata->perm_dex < max_stat ) send_to_char( " Dex", ch );
act_move.c:	if ( ch->pcdata->perm_con < max_stat ) send_to_char( " Con", ch );
act_move.c:	if ( ( ch->pcdata->perm_str >= max_stat )
act_move.c:		&& ( ch->pcdata->perm_wis >= max_stat )
act_move.c:		&& ( ch->pcdata->perm_int >= max_stat )
act_move.c:		&& ( ch->pcdata->perm_dex >= max_stat )
act_move.c:		&& ( ch->pcdata->perm_con >= max_stat ) )
act_move.c:	if ( ch->level == 2 && ch->max_hit > 1999)
act_move.c:	if ( ch->max_hit      < (500000) )
act_move.c:	   sprintf( buf, "Hp		   - %d exp per point.\n\r",(ch->max_hit+1));
act_move.c:	if ( ch->max_mana      < (500000) )
act_move.c:	   sprintf( buf, "Mana		   - %d exp per point.\n\r",(ch->max_mana+1));
act_move.c:	if ( ch->max_move      < (500000) )
act_move.c:	   sprintf( buf, "Move		   - %d exp per point.\n\r",(ch->max_move+1));
act_move.c:	 if (ch->pcdata->powers[ANGEL_JUSTICE] < 5)
act_move.c:	   sprintf(buf,"Angel Justice : %d mill exp\n\r", (ch->pcdata->powers[ANGEL_JUSTICE]+1)*10);
act_move.c:	 if (ch->pcdata->powers[ANGEL_HARMONY] < 5)
act_move.c:	   sprintf(buf,"Angel Harmony : %d mill exp\n\r", (ch->pcdata->powers[ANGEL_HARMONY]+1)*10);
act_move.c:	 if (ch->pcdata->powers[ANGEL_PEACE] < 5)
act_move.c:	   sprintf(buf,"Angel Peace   : %d mill exp\n\r", (ch->pcdata->powers[ANGEL_PEACE]+1)*10);
act_move.c:	 if (ch->pcdata->powers[ANGEL_LOVE] < 5)
act_move.c:	   sprintf(buf,"Angel Love    : %d mill exp\n\r", (ch->pcdata->powers[ANGEL_LOVE]+1)*10);
act_move.c:   //    if (ch->generation == 3)      send_to_char ("Generation	       : 400 mill exp\n\r",ch);
act_move.c:   //    else if (ch->generation == 4) send_to_char ("Generation	       : 200 mill exp\n\r",ch);
act_move.c:   //    else if (ch->generation == 5) send_to_char ("Generation	       : 50 mill exp\n\r",ch);
act_move.c:   //    else if (ch->generation > 5)  send_to_char ("Generation	       : 10 mill exp\n\r",ch);
act_move.c:	 if (ch->pcdata->rank < TANARRI_FODDER)
act_move.c:	 else if (ch->pcdata->rank == TANARRI_FODDER)
act_move.c:	 else if (ch->pcdata->rank == TANARRI_FIGHTER)
act_move.c:	 else if (ch->pcdata->rank == TANARRI_ELITE)
act_move.c:	 else if (ch->pcdata->rank == TANARRI_CAPTAIN)
act_move.c:	 else if (ch->pcdata->rank == TANARRI_WARLORD)
act_move.c:       if  ( ch->pcdata->rank == AGE_CHILDE)
act_move.c:       else if (ch->pcdata->rank == AGE_NEONATE)
act_move.c:       else if (ch->pcdata->rank == AGE_ANCILLA)
act_move.c:	else if (ch->pcdata->rank == AGE_ELDER)
act_move.c:	else if (ch->pcdata->rank == AGE_METHUSELAH)
act_move.c:	else if (ch->pcdata->rank == AGE_LA_MAGRA)
act_move.c:	if  ( ch->pcdata->rank < BELT_ONE)send_to_char("Studies: belt1\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_ONE)send_to_char("Studies: belt2\n\r",ch); 
act_move.c:	else if  ( ch->pcdata->rank == BELT_TWO)send_to_char("Studies: belt3\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_THREE)send_to_char("Studies: belt4\n\r",ch);	
act_move.c:	else if  ( ch->pcdata->rank == BELT_FOUR)send_to_char("Studies: belt5\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_FIVE)send_to_char("Studies: belt6\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_SIX)send_to_char("Studies: belt7\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_SEVEN)send_to_char("Studies: belt8\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_EIGHT)send_to_char("Studies: belt9\n\r",ch);
act_move.c:	else if  ( ch->pcdata->rank == BELT_NINE)send_to_char("Studies: belt10\n\r",ch);
act_move.c:       if ( ch->siltol < 100 && IS_CLASS(ch, CLASS_WEREWOLF))
act_move.c:       if ( ch->gnosis[GMAXIMUM] < 20 && IS_CLASS(ch, CLASS_WEREWOLF))
act_move.c:       if ( ch->beast > 0 && IS_CLASS(ch, CLASS_VAMPIRE) )
act_move.c:	if (ch->pcdata->stats[DROW_MAGIC] < 100 && IS_CLASS(ch, CLASS_DROW))
act_move.c:	   qcost =  ch->pcdata->perm_str*100*1.5;
act_move.c:	   qcost = ch->pcdata->perm_int*100*1.5;
act_move.c:	   qcost = ch->pcdata->perm_wis*100*1.5;
act_move.c:	   qcost = ch->pcdata->perm_dex*100*1.5;
act_move.c:	   qcost = ch->pcdata->perm_con*100*1.5;
act_move.c:if (cost > ch->practice)
act_move.c:ch->practice-=cost;
act_move.c:ch->exp+=cost;
act_move.c:    if ( cost > ch->pcdata->stats[DROW_POWER] && !str_cmp(arg1, "magic"))
act_move.c:else	 if ( cost > ch->exp )
act_move.c:	ch->pcdata->stats[DROW_POWER] -= cost;
act_move.c:    ch->exp		-= cost;
act_move.c:    if ( qcost > ch->pcdata->quest )
act_move.c:        if (last) stcf(ch, "You don't have enough quest points. You need [%d] more quest points to gain a stat.\n\r", qcost - ch->pcdata->quest);
act_move.c:    else ch->pcdata->quest -= qcost;
act_move.c:		ch->siltol += 1;
act_move.c:	   ch->gnosis[GCURRENT]++;
act_move.c:	   ch->gnosis[GMAXIMUM]++;
act_move.c:	  ch->beast--;
act_move.c:	  if( ch->beast < 0 ) ch->beast = 0;
act_move.c:		ch->pcdata->stats[DROW_MAGIC] += 1;
act_move.c:    if ( ch->mounted > 0 )
act_move.c:    if ( IS_NPC(ch) && (victim->level > ch->level) )
act_move.c:	ch->hit -= 100+number_range(1,100);
act_move.c:    if (!IS_NPC(ch) && ch->stance[0] != -1) do_stance(ch,"");
act_move.c:    ch->mounted     = IS_RIDING;
act_move.c:    ch->mount = victim;
act_move.c:if (IS_SET(ch->mounted,IS_RIDING))
act_move.c:if ((victim = ch->mount) == NULL)
act_move.c:{ ch->mounted = 0;send_to_char("You stop riding the air.\n\r",ch);return;}
act_move.c:    if ( ch->mounted == 0 )
act_move.c:    if ( (victim = ch->mount) == NULL )
act_move.c:    ch->mounted     = IS_ON_FOOT;
act_move.c:    ch->mount = NULL;
act_move.c:    if (IS_SET (ch->in_room->room_flags, ROOM_NODECAP))
act_move.c:	ch->hit = ch->max_hit;
act_move.c:	victim->hit = ch->max_hit;
act_move.c:	sprintf(buf,"#C%s #ohas been vanquished from the #Rarena#o by #C%s#n",victim->name,ch->name);
act_move.c:	      victim->in_room->area == ch->in_room->area &&
act_move.c:	  sprintf(buf,"#C%s #oemerges victorious from the #Rarena#n",ch->name);
act_move.c:	  ch->pcdata->awins++;
act_move.c:	  ch->fight_timer = 0;
act_move.c:    if ( IS_SET(ch->pcdata->jflags, JFLAG_SETTIE) )
act_move.c:    else sprintf(buf,"#P%s #yhas been tied up by #R%s#n",victim->name,ch->name);
act_move.c:    sprintf(buf, "%s tied up by %s at %d.", victim->name, ch->name, ch->in_room->vnum);
act_move.c:    if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_track])
act_move.c:	if (strlen(ch->hunting) > 1)
act_move.c:	    free_string(ch->hunting);
act_move.c:	    ch->hunting = str_dup( "" );
act_move.c:    if (!str_cmp(arg,ch->name))
act_move.c:    free_string(ch->hunting);
act_move.c:    ch->hunting = str_dup(arg);
act_move.c:    in_room = ch->in_room;
act_move.c:    if (!IS_NPC(ch) && number_percent() > ch->pcdata->learned[gsn_track])
act_move.c:	free_string(ch->hunting);
act_move.c:	ch->hunting = str_dup( "" );
act_move.c:    if (check_track(ch,0)) {found = TRUE;direction = ch->in_room->track_dir[0];}
act_move.c:    else if (check_track(ch,1)) {found = TRUE;direction = ch->in_room->track_dir[1];}
act_move.c:    else if (check_track(ch,2)) {found = TRUE;direction = ch->in_room->track_dir[2];}
act_move.c:    else if (check_track(ch,3)) {found = TRUE;direction = ch->in_room->track_dir[3];}
act_move.c:    else if (check_track(ch,4)) {found = TRUE;direction = ch->in_room->track_dir[4];}
act_move.c:    else if ( ( victim = get_char_room( ch, ch->hunting ) ) == NULL )
act_move.c:	free_string(ch->hunting);
act_move.c:	ch->hunting = str_dup( "" );
act_move.c:    if (strlen(ch->hunting) < 2) return;
act_move.c:    if ( ( victim = get_char_room( ch, ch->hunting ) ) != NULL ) return;
act_move.c:    if (in_room == ch->in_room || victim != NULL)
act_move.c:	free_string(ch->hunting);
act_move.c:	ch->hunting = str_dup( "" );
act_move.c:    if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_LYNX] > 0)
act_move.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_SORA] >= 4)
act_move.c:	if (ch->in_room->track[loop] != NULL && !str_cmp(ch->in_room->track[loop],ch->name))
act_move.c:	    free_string(ch->in_room->track[loop]);
act_move.c:	    ch->in_room->track[loop] = str_dup("");
act_move.c:    if (ch->in_room->track[0] != NULL && strlen(ch->in_room->track[0]) < 2)
act_move.c:	free_string(ch->in_room->track[0]);
act_move.c:	ch->in_room->track[0]	  = str_dup(ch->pcdata->switchname);
act_move.c:	ch->in_room->track_dir[0] = direction;
act_move.c:    else if (ch->in_room->track[1] != NULL && strlen(ch->in_room->track[1]) < 2)
act_move.c:	free_string(ch->in_room->track[1]);
act_move.c:	ch->in_room->track[1]	  = str_dup(ch->pcdata->switchname);
act_move.c:	ch->in_room->track_dir[1] = direction;
act_move.c:    else if (ch->in_room->track[2] != NULL && strlen(ch->in_room->track[2]) < 2)
act_move.c:	free_string(ch->in_room->track[2]);
act_move.c:	ch->in_room->track[2]	  = str_dup(ch->pcdata->switchname);
act_move.c:	ch->in_room->track_dir[2] = direction;
act_move.c:    else if (ch->in_room->track[3] != NULL && strlen(ch->in_room->track[3]) < 2)
act_move.c:	free_string(ch->in_room->track[3]);
act_move.c:	ch->in_room->track[3]	  = str_dup(ch->pcdata->switchname);
act_move.c:	ch->in_room->track_dir[3] = direction;
act_move.c:    else if (ch->in_room->track[4] != NULL && strlen(ch->in_room->track[4]) < 2)
act_move.c:	free_string(ch->in_room->track[4]);
act_move.c:	ch->in_room->track[4]	  = str_dup(ch->pcdata->switchname);
act_move.c:	ch->in_room->track_dir[4] = direction;
act_move.c:	free_string(ch->in_room->track[0]);
act_move.c:	ch->in_room->track[0]	  = str_dup(ch->in_room->track[1]);
act_move.c:	ch->in_room->track_dir[0] = ch->in_room->track_dir[1];
act_move.c:	free_string(ch->in_room->track[1]);
act_move.c:	ch->in_room->track[1]	  = str_dup(ch->in_room->track[2]);
act_move.c:	ch->in_room->track_dir[1] = ch->in_room->track_dir[2];
act_move.c:	free_string(ch->in_room->track[2]);
act_move.c:	ch->in_room->track[2]	  = str_dup(ch->in_room->track[3]);
act_move.c:	ch->in_room->track_dir[2] = ch->in_room->track_dir[3];
act_move.c:	free_string(ch->in_room->track[3]);
act_move.c:	ch->in_room->track[3]	  = str_dup(ch->in_room->track[4]);
act_move.c:	ch->in_room->track_dir[3] = ch->in_room->track_dir[4];
act_move.c:	free_string(ch->in_room->track[4]);
act_move.c:	ch->in_room->track[4]	  = str_dup(ch->name);
act_move.c:	ch->in_room->track_dir[4] = direction;
act_move.c:    if (ch->hunting != NULL) strcpy(vict,ch->hunting);
act_move.c:    if (!str_cmp(ch->hunting,vict))
act_move.c:	    free_string(ch->hunting);
act_move.c:	    ch->hunting = str_dup( "" );
act_move.c:    if (strlen(ch->in_room->track[direction]) < 2) return FALSE;
act_move.c:    if (!str_cmp(ch->in_room->track[direction],ch->name)) return FALSE;
act_move.c:    if (strlen(ch->hunting) > 1 && str_cmp(ch->in_room->track[direction],ch->hunting)) return FALSE;
act_move.c:    door = ch->in_room->track_dir[direction];
act_move.c:    sprintf(buf,"You sense the trail of %s leading $T from here.",ch->in_room->track[direction]);
act_move.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
act_move.c:    obj_to_room(obj,ch->in_room);
act_move.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
act_move.c:	obj_to_room(obj,ch->in_room);
act_move.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->newbits, NEW_DROWHATE)) return;
act_move.c:	vch_next = vch->next;
act_move.c:	if ( vch->in_room == NULL) continue;
act_move.c:	if ( vch->in_room == ch->in_room) {
act_move.c:		do_kill(ch,vch->name);
act_obj.c:    new_ob = create_object( get_obj_index( first_ob->value[2] ), ch->level );
act_obj.c:      new_ob->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:	str_cmp(obj->questowner,ch->pcdata->switchname) || obj->item_type == ITEM_PAGE)
act_obj.c:	if (gch->desc && gch->desc->connected != CON_PLAYING) return;
act_obj.c:	chroom = ch->in_room;
act_obj.c:	    str_cmp( ch->pcdata->switchname, obj->questowner ) || obj->item_type == ITEM_PAGE)
act_obj.c:	      if (gch->desc && gch->desc->connected != CON_PLAYING) continue;
act_obj.c:	    chroom = ch->in_room;
act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w(ch) )
act_obj.c:	ch->gold += obj->value[0];
act_obj.c:  if (ch->level == 1)
act_obj.c:	ch->pcdata->security = 6;
act_obj.c:	ch->level = 12;
act_obj.c:	ch->trust = 12;
act_obj.c:        ch->level = 1;
act_obj.c:	ch->trust = 0;
act_obj.c:	ch->pcdata->security = 0;
act_obj.c:  if (ch->level >= 2)
act_obj.c:	temp = ch->pcdata->security;
act_obj.c:	ch->pcdata->security = 6;
act_obj.c:	ch->pcdata->security = temp;
act_obj.c:	    obj = get_obj_list( ch, arg1, ch->in_room->contents );
act_obj.c:                sprintf(buffer,"#R%s#y finds #R%s#y for quest!#n\n\r",ch->name,obj->short_descr);
act_obj.c:		obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:		obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:	    for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_obj.c:				sprintf(buffer,"#R%s#y finds #R%s#y for quest!#n\n\r",ch->name,obj->short_descr);
act_obj.c:    			obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:			obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:		if ( str_cmp( name, ch->name ) && !IS_IMMORTAL(ch) )
act_obj.c:		obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:		obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:			obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:			obj->questowner = str_dup(ch->pcdata->switchname);
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:                obj_to_room( obj, ch->in_room );
act_obj.c:	obj_to_room( obj, ch->in_room );
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:		obj_to_room( obj, ch->in_room );
act_obj.c:        obj_to_room( obj, ch->in_room );
act_obj.c:        for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:                obj_to_room( obj, ch->in_room );
act_obj.c:    for ( fountain = ch->in_room->contents; fountain != NULL;
act_obj.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
act_obj.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
act_obj.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
act_obj.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
act_obj.c:    else bloodpool = (250 / ch->generation);
act_obj.c:	for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
act_obj.c:    if ( !IS_NPC(ch) && ch->pcdata->condition[COND_DRUNK] > 10 )
act_obj.c:	    if ( ch->fighting != NULL || ch->fight_timer > 0 ) return stcf(ch,"Not while fighting you dumb ass.\n\r");
act_obj.c:	    if ( (ch->hit+(ch->max_hit/25)) <= ch->max_hit )
act_obj.c:	    ch->hit += ch->max_hit/25;
act_obj.c:	    else ch->hit = ch->max_hit;
act_obj.c:	    if ( (ch->mana+(ch->max_mana/25)) <= ch->max_mana )
act_obj.c:	    ch->mana += ch->max_mana/25;
act_obj.c:	    else ch->mana = ch->max_mana;
act_obj.c:	    if ( (ch->move+(ch->max_move/25)) <= ch->max_move )
act_obj.c:	    ch->move += ch->max_move/25;
act_obj.c:	    else ch->move = ch->max_move;
act_obj.c:	    ch->pcdata->condition[COND_THIRST] += number_range(2000,3500);
act_obj.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
act_obj.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
act_obj.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
act_obj.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
act_obj.c:    else bloodpool = (250 / ch->generation);
act_obj.c:		ch->pcdata->condition[COND_DRUNK]  > 10 )
act_obj.c:		ch->pcdata->condition[COND_FULL]   > 50 )
act_obj.c:		ch->pcdata->condition[COND_THIRST] > ((25000/ch->generation)+bloodpool ))
act_obj.c:               ch->pcdata->condition[COND_THIRST] >= ((25000/ch->generation)+bloodpool)))
act_obj.c:	else if(( !IS_NPC(ch) && IS_CLASS(ch, CLASS_VAMPIRE) && (ch->pcdata->condition[COND_THIRST] >= ((25000/ch->generation)+bloodpool))))
act_obj.c:	    if ( ch->fighting != NULL || ch->fight_timer > 0 ) return stcf(ch,"Not while fighting you dumb ass.\n\r");
act_obj.c:	    if ( (ch->hit+(ch->max_hit/25)) <= ch->max_hit )
act_obj.c:	    ch->hit += ch->max_hit/25;
act_obj.c:	    else ch->hit = ch->max_hit;
act_obj.c:	    if ( (ch->mana+(ch->max_mana/25)) <= ch->max_mana )
act_obj.c:	    ch->mana += ch->max_mana/25;
act_obj.c:	    else ch->mana = ch->max_mana;
act_obj.c:	    if ( (ch->move+(ch->max_move/25)) <= ch->max_move )
act_obj.c:	    ch->move += ch->max_move/25;
act_obj.c:	    else ch->move = ch->max_move;
act_obj.c:	    ch->pcdata->condition[COND_THIRST] += number_range(2000,5000);
act_obj.c:		ch->pcdata->condition[COND_DRUNK]  > 10 )
act_obj.c:		ch->pcdata->condition[COND_FULL]   > 50 )
act_obj.c:		ch->pcdata->condition[COND_THIRST] > (25000/ch->generation)+bloodpool )
act_obj.c:		ch->pcdata->condition[COND_THIRST] >= (25000 / ch->generation) + bloodpool )
act_obj.c:	    if (IS_NPC(ch) || !IS_SET(ch->special,SPC_WOLFMAN) || 
act_obj.c:	if ( !IS_NPC(ch) && ch->pcdata->condition[COND_FULL] > 50 &&
act_obj.c:       if(ch->max_hit-ch->hit>=10000)
act_obj.c:       ch->hit+=10000;
act_obj.c:    if(ch->max_mana-ch->mana>=10000)
act_obj.c:       ch->mana+=10000;
act_obj.c: if(ch->max_mana-ch->mana>=10000)
act_obj.c:      ch->move+=10000;
act_obj.c:if(ch->pcdata->Bootcamp[5]<0)
act_obj.c: ch->pcdata->Bootcamp[5]+=1;    
act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 10 )
act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 50 )
act_obj.c:	if (ch->position == POS_FIGHTING) 
act_obj.c:			ch->race +=obj->value[0];
act_obj.c:          ch->race +=obj->value[0];
act_obj.c: ch->pcdata->quest += obj->value[0];}
act_obj.c:          ch->max_hit +=obj->value[1];
act_obj.c:          ch->max_mana +=obj->value[2];
act_obj.c: ch->practice += obj->value[2];}
act_obj.c:	if ( ch->practice < 0 && !IS_NPC(ch) ) ch->practice = 2000000000;
act_obj.c:     ch->max_move +=obj->value[3];
act_obj.c:        ch->pcdata->store += obj->value[1];}
act_obj.c:	if ( ch->pcdata->store > 2000000000 ) ch->pcdata->store = 2000000000;
act_obj.c:	   ch->pcdata->stats[DEMON_CURRENT] += obj->value[0];
act_obj.c:	    condition = ch->pcdata->condition[COND_FULL];
act_obj.c:	    if ( condition == 0 && ch->pcdata->condition[COND_FULL] > 10 )
act_obj.c:	    else if ( ch->pcdata->condition[COND_FULL] > 50 )
act_obj.c:    if (IS_SET(obj->extra_flags,ITEM_ENGRAVED) && str_cmp(obj->questowner,ch->pcdata->switchname) )
act_obj.c:	  if(IS_CLASS(ch, CLASS_MONK) && ch->pcdata->upgrade_level > 3)
act_obj.c:		    if ( obj->questowner != NULL && str_cmp(ch->pcdata->switchname,obj->questowner) && strlen(obj->questowner) > 1 )
act_obj.c:			obj_to_room(obj,ch->in_room);
act_obj.c:		if (!IS_NPC(ch)) do_skill(ch, ch->name);
act_obj.c:		    if ( obj->questowner != NULL && str_cmp(ch->pcdata->switchname,obj->questowner) && strlen(obj->questowner) > 1 )
act_obj.c:			obj_to_room(obj,ch->in_room);
act_obj.c:		if (!IS_NPC(ch)) do_skill(ch, ch->name);
act_obj.c:	    if ( obj->questowner != NULL && str_cmp(ch->pcdata->switchname,obj->questowner) && strlen(obj->questowner) > 1 )
act_obj.c:		obj_to_room(obj,ch->in_room);
act_obj.c:	if (!IS_NPC(ch)) do_skill(ch, ch->name);
act_obj.c:    if (!IS_NPC(ch) && IS_POLYAFF(ch,POLY_ZULOFORM) && IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] < 9)
act_obj.c:if (!IS_NPC(ch) && IS_POLYAFF(ch,POLY_ZULOFORM) && IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] > 8 && IS_CLASS(ch, CLASS_PHOENIX))
act_obj.c:	!IS_CLASS(ch, CLASS_DEMON) && ch->power[DISC_VAMP_OBEA] < 9 && !IS_CLASS(ch, CLASS_DROID)
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:   if( !IS_NPC(ch) && IS_CLASS(ch, CLASS_VAMPIRE) && IS_POLYAFF(ch, POLY_ZULOFORM) && ch->generation > 1 &&
act_obj.c:ch->power[DISC_VAMP_OBEA] < 9)
act_obj.c:   if (!IS_NPC(ch) && IS_POLYAFF(ch,POLY_ZULOFORM) && IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] > 8)
act_obj.c:	for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_obj.c:      next_obj = ch->in_room->contents;
act_obj.c:      for (obj = ch->in_room->contents; next_obj != NULL; obj = next_obj )
act_obj.c:	  || ((obj->questowner != NULL) && (strlen(obj->questowner) > 1) && str_cmp(ch->name,obj->questowner)))
act_obj.c:	    ch->pcdata->quest += obj->points;
act_obj.c:	  ch->pcdata->rune_count--;
act_obj.c:	  ch->pcdata->quest += 25000;
act_obj.c:	    ch->pcdata->quest += 150000;
act_obj.c:	    ch->pcdata->quest += 75000;
act_obj.c:	    ch->pcdata->quest += 47500;
act_obj.c:	    ch->pcdata->quest += 37500;
act_obj.c:	ch->pcdata->quest += questb;
act_obj.c:	ch->exp += b2;
act_obj.c:    obj = get_obj_list( ch, arg, ch->in_room->contents );
act_obj.c:	( obj->questowner != NULL && strlen(obj->questowner) > 1 && str_cmp(ch->name,obj->questowner)))
act_obj.c:    ch->pcdata->quest += questb;
act_obj.c:    ch->exp += b2;
act_obj.c:	ch->pcdata->quest += obj->points;
act_obj.c:      ch->pcdata->rune_count--;
act_obj.c:      ch->pcdata->quest += 50000;
act_obj.c:	ch->pcdata->quest += 150000;
act_obj.c:	ch->pcdata->quest += 75000;
act_obj.c:	ch->pcdata->quest += 47500;
act_obj.c:	ch->pcdata->quest += 37500;
act_obj.c:    if (ch->position == POS_FIGHTING) 
act_obj.c:    if (ch->position == POS_FIGHTING) 
act_obj.c:	for ( vch = ch->in_room->people; vch; vch = vch_next )
act_obj.c:	    vch_next	= vch->next_in_room;
act_obj.c:    if ( ( ch->level + number_range(1,20) < victim->level	   )
act_obj.c:    ||	 ( !IS_NPC(ch) && !IS_NPC(victim) && ch->level < 3	   )
act_obj.c:    ||	 ( !IS_NPC(ch) && percent > ch->pcdata->learned[gsn_steal] ) )
act_obj.c:	sprintf( buf, "%s is a bloody thief!", ch->name );
act_obj.c:    if ( ch->carry_number + 1 > can_carry_n( ch ) )
act_obj.c:    if ( ch->carry_weight + get_obj_weight( obj ) > can_carry_w(ch) )
act_obj.c:    for ( keeper = ch->in_room->people; keeper; keeper = keeper->next_in_room )
act_obj.c:if (IS_SET(ch->in_room->room_flags,ROOM_NO_OTRANS))
act_obj.c:  if ( IS_SET(ch->in_room->room_flags, ROOM_NOTRANS) )
act_obj.c:  if ( IS_SET(ch->in_room->room_flags, ROOM_NO_OTRANS) )
act_obj.c:    obj->specpower = ch->in_room->vnum;
act_obj.c:    if (!IS_SET(obj->quest, QUEST_ARTIFACT) && ( IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) ||
act_obj.c:	 ch->in_room->vnum == 30000 || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL) ) && CAN_WEAR(obj,ITEM_TAKE))
act_obj.c:      ch->position = POS_STUNNED;
act_obj.c:    if ( (mount = ch->mount) == NULL) return;
act_obj.c:    char_to_room( mount, ch->in_room );
act_obj.c:	    ( IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL) )
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	obj2 = create_object(get_obj_index(obj->specpower), ch->level);
act_obj.c:	else			       obj_to_room(obj2,ch->in_room);
act_obj.c:	char_to_room(mob,ch->in_room);
act_obj.c:		if ( victim->in_room == ch->in_room )
act_obj.c:    if (IS_SET(ch->in_room->room_flags,ROOM_NO_OTRANS))
act_obj.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NOTRANS) )
act_obj.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NO_OTRANS) )
act_obj.c:	obj->specpower = ch->in_room->vnum;
act_obj.c:	    ( IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL) )
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	    ( IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL) )
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	obj2 = create_object(get_obj_index(obj->specpower), ch->level);
act_obj.c:	else			       obj_to_room(obj2,ch->in_room);
act_obj.c:	char_to_room(mob,ch->in_room);
act_obj.c:		if ( victim->in_room == ch->in_room )
act_obj.c:    if (IS_SET(ch->in_room->room_flags,ROOM_NO_OTRANS))
act_obj.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NOTRANS) )
act_obj.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NO_OTRANS) )
act_obj.c:	obj->specpower = ch->in_room->vnum;
act_obj.c:	    ( IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL)) && 
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	    ( IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL) )
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	obj2 = create_object(get_obj_index(obj->specpower), ch->level);
act_obj.c:	else			       obj_to_room(obj2,ch->in_room);
act_obj.c:	char_to_room(mob,ch->in_room);
act_obj.c:		if ( victim->in_room == ch->in_room )
act_obj.c:    if (IS_SET(ch->in_room->room_flags,ROOM_NO_OTRANS))
act_obj.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NOTRANS) )
act_obj.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NO_OTRANS) )
act_obj.c:	obj->specpower = ch->in_room->vnum;
act_obj.c:	    (IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))  &&
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	    (IS_SET(ch->in_room->room_flags, ROOM_NO_TELEPORT) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))  &&
act_obj.c:	    ch->position = POS_STUNNED;
act_obj.c:	if ( (mount = ch->mount) == NULL) return;
act_obj.c:	char_to_room( mount, ch->in_room );
act_obj.c:	obj2 = create_object(get_obj_index(obj->specpower), ch->level);
act_obj.c:	else			       obj_to_room(obj2,ch->in_room);
act_obj.c:	char_to_room(mob,ch->in_room);
act_obj.c:		if ( victim->in_room == ch->in_room )
act_obj.c:	if (!IS_NPC(ch) && IS_SET(ch->special, SPC_WOLFMAN) && !wolf_ok && !IS_CLASS(ch, CLASS_VAMPIRE))
act_obj.c:	if (!IS_NPC(ch) && IS_SET(ch->special, SPC_WOLFMAN) && !wolf_ok && !IS_CLASS(ch, CLASS_VAMPIRE))
act_obj.c:      if (!IS_SET(ch->newbits, THIRD_HAND)) return FALSE;
act_obj.c:	if (!IS_NPC(ch) && IS_SET(ch->special, SPC_WOLFMAN) && !wolf_ok && !IS_CLASS(ch, CLASS_VAMPIRE))
act_obj.c:      if (!IS_SET(ch->newbits, FOURTH_HAND)) return FALSE;
act_obj.c:	if (!IS_NPC(ch) && IS_SET(ch->special, SPC_WOLFMAN) && !wolf_ok && !IS_CLASS(ch, CLASS_VAMPIRE))
act_obj.c:	if (ch->in_room == NULL) return;
act_obj.c:	if (ch->in_room == NULL) return;
act_obj.c:	obj_to_room(obj, ch->in_room);
act_obj.c:    if (str_cmp(ch->pcdata->switchname,obj->questowner) && !IS_SET(obj->quest, QUEST_ARTIFACT))
act_obj.c:    ch->pcdata->questsrun += 1;
act_obj.c:    ch->pcdata->questtotal += value;
act_obj.c:    obj->questmaker = str_dup(ch->name);
act_obj.c:	ch->pcdata->score[SCORE_NUM_QUEST]++;
act_obj.c:	ch->pcdata->score[SCORE_QUEST] += value;
act_obj.c://	sprintf(buf,"%s has completed a quest!.",ch->name);
act_obj.c://    else sprintf(buf,"%s has completed a quest!.",ch->pcdata->switchname);
act_obj.c:    if (str_cmp(ch->pcdata->switchname,qobj->questowner) && !IS_SET(qobj->quest, QUEST_ARTIFACT))
act_obj.c:  if(IS_SET(ch->in_room->room_flags, ROOM_ARENA))
act_obj.c:  sprintf(buf, "%s#n has stolen %s#n from %s#n!", ch->name, pObj->short_descr, pVictim->name);
act_obj.c:  sprintf(buf, "%s artisteals object \"%s\" from %s.", ch->name, pObj->short_descr, pVictim->name);
act_wiz.c:        ||   ch->level < obj->level
act_wiz.c:    if(IS_SET(ch->act, PLR_SILENCE))
act_wiz.c:            sprintf(buf, "#0%s #w%s#n", ch->name, argument);
act_wiz.c:	sprintf(buf, "%s's form blurs and shifts to resemble %s.",	ch->name,argument);
act_wiz.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
act_wiz.c:	free_string( ch->morph );
act_wiz.c:	ch->morph = str_dup( "" );
act_wiz.c:	set_pc_name(ch, ch->pcdata->switchname);
act_wiz.c:    sprintf(buf, "%s's form blurs and shifts to resemble %s.",	ch->name,argument);
act_wiz.c:	free_string( ch->morph );
act_wiz.c:	ch->morph = str_dup( argument );
act_wiz.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);    
act_wiz.c:  for (gch = char_list; gch != NULL; gch = gch->next)
act_wiz.c:    if (IS_NPC(gch) || gch->desc) continue;
act_wiz.c:    sprintf(buf, "Name: %12s. (Room: %5d)\n\r", gch->name, gch->in_room == NULL ? : gch->in_room->vnum);
act_wiz.c:    sprintf(buf,"%s: Pset %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ((ch->pcdata->security < 5) && (ch->level < 13))
act_wiz.c:/*	if ( !str_cmp(ch->name, "Seth" ) || !str_cmp(ch->name,"Marisella") ||
act_wiz.c:	 !str_cmp(ch->name,"Raziel" )  || !str_cmp(ch->name,"Aislynn" )  || !str_cmp(ch->name,"Reaver" ) || 
act_wiz.c:	!str_cmp(ch->name,"Nibbles" )  */
act_wiz.c:    if (ch->sex == SEX_MALE) sprintf(buf,"#C%s #pscreams in agony as the #RP#Ga#RR#Ga#RD#Go#RX#p wrecks his puny mortal body#n",ch->name);
act_wiz.c:    else sprintf(buf,"#C%s #pscreams in agony as the #RP#Ga#RR#Ga#RD#Go#RX#p wrecks her puny mortal body#n",ch->name);
act_wiz.c:    ch->hit	=  -10;
act_wiz.c:    ch->mana	=  -10;
act_wiz.c:    ch->move	=  -10;
act_wiz.c:    if ( ch->pcdata->quest < 1000 )
act_wiz.c:	if ( ch->generation > 4 )
act_wiz.c:	    if ( ch->pcdata->upgrade_level < 2 )
act_wiz.c:		 if (ch->wpn[i] >= 1000)
act_wiz.c:		     ch->wpn[i] -= 1000;
act_wiz.c:		     ch->wpn[i] = 0;
act_wiz.c:		ch->pcdata->upgrade_level--;
act_wiz.c:	    ch->generation++;
act_wiz.c:	ch->pcdata->quest -= 1000;
act_wiz.c:    SET_BIT(ch->extra, TIED_UP);   
act_wiz.c:    SET_BIT(ch->extra, GAGGED);
act_wiz.c:    SET_BIT(ch->extra, BLINDFOLDED);
act_wiz.c:	free_string( ch->pcdata->bamfin );
act_wiz.c:	ch->pcdata->bamfin = str_dup( argument );
act_wiz.c:	free_string( ch->pcdata->bamfout );
act_wiz.c:	ch->pcdata->bamfout = str_dup( argument );
act_wiz.c:	REMOVE_BIT(ch->immune, IMM_SUMMON);
act_wiz.c:	SET_BIT(ch->immune, IMM_SUMMON);
act_wiz.c:	REMOVE_BIT(ch->immune, IMM_TRANSPORT);
act_wiz.c:	SET_BIT(ch->immune, IMM_TRANSPORT);
act_wiz.c:/*    if (IS_NPC(ch) || !IS_SET(ch->act, PLR_WATCHER)
act_wiz.c:	|| (ch->level > 6)
act_wiz.c:	|| (ch->level < 2)
act_wiz.c:	|| (ch->trust > 0) )
act_wiz.c:    sprintf(buf,"%s: Deny %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    make_note( "Immortal", ch->name, "imm", "Denied", 5, buf );
act_wiz.c:    sprintf(buf,"%s: Disconnect %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ( victim->level >= ch->level )
act_wiz.c:	    !IS_SET(ch->deaf,CHANNEL_LOG) && ch->level >= d->character->level)
act_wiz.c:    sprintf(buf,"%s: Echo %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Recho %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	&&   d->character->in_room == ch->in_room )
act_wiz.c:    sprintf(buf,"%s: Cecho %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Recho %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	&&   d->character->in_room == ch->in_room
act_wiz.c:    sprintf(buf,"%s: Transfer %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	location = ch->in_room;
act_wiz.c:    sprintf(buf,"%s: At %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    original = ch->in_room;
act_wiz.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
act_wiz.c:    in_room = ch->in_room;
act_wiz.c:    if ( ch->fighting )
act_wiz.c:if(ch->level<=12)
act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
act_wiz.c:	    (ch->pcdata && ch->pcdata->bamfout[0] != '\0')
act_wiz.c:	    ? ch->pcdata->bamfout : "leaves in a swirling mist.",  TO_ROOM );
act_wiz.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
act_wiz.c:	    (ch->pcdata && ch->pcdata->bamfin[0] != '\0')
act_wiz.c:	    ? ch->pcdata->bamfin : "appears in a swirling mist.", TO_ROOM );
act_wiz.c:    if ( ch->in_room == in_room )
act_wiz.c:    location = ( arg[0] == '\0' ) ? ch->in_room : find_location( ch, arg );
act_wiz.c:    if ( ch->in_room != location && room_is_private( location ) )
act_wiz.c:    for ( rch = location->people; rch; rch = rch->next_in_room )
act_wiz.c:	one_argument( rch->name, buf );
act_wiz.c:    sprintf( buf, "Shutdown by %s.", ch->name );
act_wiz.c:    sprintf(buf,"%s: Snoop %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	    if ( d->snoop_by == ch->desc )
act_wiz.c:    if ( ch->desc != NULL )
act_wiz.c:	for ( d = ch->desc->snoop_by; d != NULL; d = d->snoop_by )
act_wiz.c:    victim->desc->snoop_by = ch->desc;
act_wiz.c:    sprintf(buf,"%s: Oswitch %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ( (mount = ch->mount) != NULL) do_dismount(ch,"");
act_wiz.c:    ch->pcdata->chobj = obj;
act_wiz.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:    SET_BIT(ch->extra, EXTRA_OSWITCH);
act_wiz.c:    free_string(ch->morph);
act_wiz.c:    ch->morph = str_dup(obj->short_descr);
act_wiz.c:    sprintf(buf,"%s: Oreturn",ch->name);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ( ( obj = ch->pcdata->chobj ) != NULL ) obj->chobj = NULL;
act_wiz.c:    ch->pcdata->chobj = NULL;
act_wiz.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:    REMOVE_BIT(ch->extra, EXTRA_OSWITCH);
act_wiz.c:    if (IS_HEAD(ch,LOST_HEAD)) REMOVE_BIT(ch->loc_hp[0], LOST_HEAD);
act_wiz.c:    free_string(ch->morph);
act_wiz.c:    ch->morph = str_dup("");
act_wiz.c:    sprintf(buf,"%s: Switch %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ( ch->desc == NULL )
act_wiz.c:    if ( ch->desc->original != NULL )
act_wiz.c:    SET_BIT(ch->extra, EXTRA_SWITCH);
act_wiz.c:    ch->desc->character = victim;
act_wiz.c:    ch->desc->original	= ch;
act_wiz.c:    victim->desc	= ch->desc;
act_wiz.c:    ch->desc		= NULL;
act_wiz.c:    sprintf(buf,"%s: Return %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ( ch->desc == NULL )
act_wiz.c:    if ( ch->desc->original == NULL )
act_wiz.c:    REMOVE_BIT(ch->desc->original->extra, EXTRA_SWITCH);
act_wiz.c:    ch->desc->character       = ch->desc->original;
act_wiz.c:    ch->desc->original	      = NULL;
act_wiz.c:    ch->desc->character->desc = ch->desc; 
act_wiz.c:    ch->desc		      = NULL;
act_wiz.c:    if ( ch->pcdata->security < 4 )
act_wiz.c:    sprintf(buf,"%s: Mload %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH && ch->trust > 3) do_watching(ch,buf);
act_wiz.c:    char_to_room( victim, ch->in_room );
act_wiz.c:    int nLevel = ch->level;
act_wiz.c:    if ( IS_NPC(ch) || ch->desc == NULL || ch->in_room == NULL ) return;
act_wiz.c:    sprintf(buf,"%s: Pload %s",ch->name,argument);
act_wiz.c://    if (ch->level < NO_WATCH && ch->trust > 3) 
act_wiz.c:    d = ch->desc;
act_wiz.c:    in_room = ch->in_room;
act_wiz.c:    ch->next = char_list;
act_wiz.c:    if ( ch->level >= nLevel ) do_quit(ch,"");
act_wiz.c:    if (ch->pload == NULL) {send_to_char("Huh?\n\r",ch);return;}
act_wiz.c:    sprintf(arg,ch->pload);
act_wiz.c:    if (!str_cmp(ch->name,arg)) {send_to_char("Huh?\n\r",ch);return;}
act_wiz.c:    d = ch->desc;
act_wiz.c:    sprintf(buf,"You transform back into %s.\n\r",capitalize(ch->pload));
act_wiz.c:    sprintf(buf,"$n transforms back into %s.",capitalize(ch->pload));
act_wiz.c:    if (ch != NULL && ch->desc != NULL)
act_wiz.c:    if (ch->desc) ch->desc->character = NULL;
act_wiz.c:    ch->next = char_list;
act_wiz.c:    if (ch->in_room != NULL)
act_wiz.c:	char_to_room(ch,ch->in_room);
act_wiz.c:    free_string(ch->pload);
act_wiz.c:    ch->pload = str_dup("");
act_wiz.c:    sprintf(buf,"%s: Oload %s",ch->name,argument);
act_wiz.c://   if ( ch->pcdata->security < 4 && !is_number(arg3))
act_wiz.c: /*  sprintf(buf,"%s: Oload %s",ch->name,argument);*/
act_wiz.c:    if (ch->level < NO_WATCH && ch->trust > 3) do_watching(ch,buf);
act_wiz.c:	obj_to_room( obj, ch->in_room );
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:        for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
act_wiz.c:        for ( obj = ch->in_room->contents; obj != NULL; obj = obj_next )
act_wiz.c:	for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
act_wiz.c:    sprintf(buf,"%s: Trust %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Restore %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	    if (ch->fight_timer > 0) continue;
act_wiz.c:        if (!str_cmp(ch->name, "Chrono"))
act_wiz.c:        if (!str_cmp(ch->name, "Chrono"))
act_wiz.c:    sprintf(buf,"%s: Freeze %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	make_note( "Immortal", ch->name, "imm", "Thawed", 5, buf );
act_wiz.c:	make_note( "Immortal", ch->name, "imm", "Frozen", 5, buf );
act_wiz.c:    sprintf(buf,"%s: Log %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Undeny %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	oldname = str_dup(ch->pcdata->switchname);
act_wiz.c:	d = ch->desc;
act_wiz.c:	in_room = ch->in_room;
act_wiz.c:	ch->next = char_list;
act_wiz.c:    if ( IS_SET(ch->act, PLR_DENY) )
act_wiz.c:	REMOVE_BIT(ch->act, PLR_DENY);
act_wiz.c:	d = ch->desc;
act_wiz.c:	in_room = ch->in_room;
act_wiz.c:	ch->next = char_list;
act_wiz.c:    make_note( "Immortal", ch->name, "imm", "Undenied", 5, buf );
act_wiz.c:    sprintf(buf,"%s: Silence %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Peace %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
act_wiz.c:	if ( rch->fighting != NULL )
act_wiz.c:    sprintf(buf2,"%s: Ban %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    make_note( "Immortal", ch->name, "imm", "Banned", 5, buf );
act_wiz.c:    sprintf(buf,"%s: Allow %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	    make_note( "Immortal", ch->name, "imm", "Allowed", 5, buf );
act_wiz.c:    sprintf(buf,"%s: Wizlock %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Newlock %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    sprintf(buf,"%s: Wizlock %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:    if ( ch->pcdata->security < 6 )
act_wiz.c:    sprintf(buf,"%s: Mset %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	if (value >= (ch->level-2) && !IS_NPC(victim) && ch->level < 13 ) 
act_wiz.c:	if (( value > (ch->pcdata->security - 2) || value < 0) && ch->level < 13)
act_wiz.c:	    if ( ch->pcdata->security != 0 && ch->level < 13)
act_wiz.c:		    ch->pcdata->security - 2);
act_wiz.c:    if ( ch->pcdata->security < 6 )
act_wiz.c:    sprintf(buf,"%s: Oset %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:str_cmp(ch->name,obj->questmaker)))
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	morph->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	    obj->questmaker = str_dup(ch->name);
act_wiz.c:	    obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	    obj->questmaker = str_dup(ch->name);}
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:		obj->questmaker = str_dup(ch->name);}
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	if (!IS_JUDGE(ch) && (obj->questmaker == NULL || str_cmp(ch->name,obj->questmaker)))
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:	obj->questmaker = str_dup(ch->name);
act_wiz.c:    if ( ch->pcdata->security < 6 )
act_wiz.c:    sprintf(buf,"%s: Rset %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:		wch->pcdata->switchname,
act_wiz.c:		wch->level,
act_wiz.c:		wch->trust,
act_wiz.c:		wch->generation,
act_wiz.c:		wch->max_hit,
act_wiz.c:		wch->max_mana,
act_wiz.c:		wch->max_move,
act_wiz.c:		wch->pcdata->quest,
act_wiz.c:                wch->in_room->vnum
act_wiz.c:    sprintf(buf,"%s: Force %s",ch->name,argument);
act_wiz.c:    if (ch->level < NO_WATCH) do_watching(ch,buf);
act_wiz.c:	    vch_next = vch->next;
act_wiz.c:        if (IS_SET(vch->extra, EXTRA_AFK))
act_wiz.c:          SET_BIT(vch->extra, EXTRA_AFK);
act_wiz.c:	if ((get_trust( victim ) >= get_trust( ch )) && (ch->level < MAX_LEVEL))
act_wiz.c:	if ( ch->level < 10 )
act_wiz.c:	vch_next = vch->next;
act_wiz.c:    if ( IS_SET(ch->act, PLR_WIZINVIS) )
act_wiz.c:	REMOVE_BIT(ch->act, PLR_WIZINVIS);
act_wiz.c:	SET_BIT(ch->act, PLR_WIZINVIS);
act_wiz.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
act_wiz.c:	REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
act_wiz.c:	SET_BIT(ch->act, PLR_HOLYLIGHT);
act_wiz.c:    if ( IS_SET(ch->in_room->room_flags,ROOM_SAFE) )
act_wiz.c:    if (ch->in_room->sector_type == SECT_INSIDE)
act_wiz.c:    if ( room_is_dark(ch->in_room) )
act_wiz.c:    if ( ch->pcdata->security < 6 )
act_wiz.c:    if (ch->power[DISC_DAEM_DISC] < 2)
act_wiz.c:	if ( ch->poweraction != NULL) {
act_wiz.c:	    sprintf(buf,"Current action: %s.\n\r",ch->poweraction);
act_wiz.c:	if ( ch->powertype != NULL) {
act_wiz.c:	    sprintf(buf,"Current message: %s.\n\r",ch->powertype);
act_wiz.c:	if (IS_SET(ch->spectype,EYE_SPELL)) send_to_char(" Spell",ch);
act_wiz.c:	if (IS_SET(ch->spectype,EYE_SELFACTION)) send_to_char(" Self",ch);
act_wiz.c:	if (IS_SET(ch->spectype,EYE_ACTION)) send_to_char(" Other",ch);
act_wiz.c:	if (!IS_SET(ch->spectype,EYE_SPELL) &&
act_wiz.c:	    !IS_SET(ch->spectype,EYE_SELFACTION) &&
act_wiz.c:	    !IS_SET(ch->spectype,EYE_ACTION)) send_to_char(" None",ch);
act_wiz.c:	free_string( ch->poweraction );
act_wiz.c:	ch->poweraction = str_dup( arg2 );
act_wiz.c:	free_string( ch->powertype );
act_wiz.c:	ch->powertype = str_dup( arg2 );
act_wiz.c:	if ( !str_cmp( arg2, "spell" ) && IS_SET(ch->spectype,EYE_SPELL))
act_wiz.c:	    REMOVE_BIT(ch->spectype,EYE_SPELL);
act_wiz.c:	else if ( !str_cmp( arg2, "spell" ) && !IS_SET(ch->spectype,EYE_SPELL))
act_wiz.c:	    SET_BIT(ch->spectype,EYE_SPELL);
act_wiz.c:	else if ( !str_cmp( arg2, "self" ) && IS_SET(ch->spectype,EYE_SELFACTION))
act_wiz.c:	    REMOVE_BIT(ch->spectype,EYE_SELFACTION);
act_wiz.c:	else if ( !str_cmp( arg2, "self" ) && !IS_SET(ch->spectype,EYE_SELFACTION))
act_wiz.c:	    SET_BIT(ch->spectype,EYE_SELFACTION);
act_wiz.c:	else if ( !str_cmp( arg2, "other" ) && IS_SET(ch->spectype,EYE_ACTION))
act_wiz.c:	    REMOVE_BIT(ch->spectype,EYE_ACTION);
act_wiz.c:	else if ( !str_cmp( arg2, "other" ) && !IS_SET(ch->spectype,EYE_ACTION))
act_wiz.c:	    SET_BIT(ch->spectype,EYE_ACTION);
act_wiz.c:	if ( ch->poweraction != NULL) {
act_wiz.c:	    sprintf(buf,"Current action: %s.\n\r",ch->poweraction);
act_wiz.c:	if ( ch->powertype != NULL) {
act_wiz.c:	    sprintf(buf,"Current message: %s.\n\r",ch->powertype);
act_wiz.c:	if (IS_SET(ch->spectype,EYE_SPELL)) send_to_char(" Spell",ch);
act_wiz.c:	if (IS_SET(ch->spectype,EYE_SELFACTION)) send_to_char(" Self",ch);
act_wiz.c:	if (IS_SET(ch->spectype,EYE_ACTION)) send_to_char(" Other",ch);
act_wiz.c:	if (!IS_SET(ch->spectype,EYE_SPELL) &&
act_wiz.c:	    !IS_SET(ch->spectype,EYE_SELFACTION) &&
act_wiz.c:	    !IS_SET(ch->spectype,EYE_ACTION)) send_to_char(" None",ch);
act_wiz.c:	    strlen(obj->questowner) < 2 || str_cmp( ch->pcdata->switchname, obj->questowner ))
act_wiz.c:    //if ( ch->exp < 500 ) {send_to_char("It costs 500 exp to claim ownership of an item.\n\r",ch); return;}
act_wiz.c:	if (!str_cmp(ch->pcdata->switchname,obj->questowner))
act_wiz.c:  //  ch->exp -= 500;
act_wiz.c:    obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:    if ( ch->exp < 500 ) {send_to_char("It costs 500 exp to make a gift of an item.\n\r",ch); return;}
act_wiz.c:    if (str_cmp(ch->pcdata->switchname,obj->questowner))
act_wiz.c:    if (IS_SET(obj->quest, QUEST_RELIC) && ch->level < 7)
act_wiz.c:    if ( (IS_SET(obj->quest, QUEST_ANLA) || IS_SET(obj->item_type, ITEM_PIECE) || IS_SET(obj->extra_flags, ITEM_ENGRAVED) ) && ch->level < 7)
act_wiz.c:    ch->exp -= 500;
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:  if ((!IS_IMMORTAL(ch)) && ch->pcdata->quest < 5000 )
act_wiz.c:  if ( ch->level <= 6 )
act_wiz.c:      sprintf(sBuffer,"#R<#yHappy Hour#y: #L%s #y%s #R>#n\n\r",ch->name,argument);
act_wiz.c:      sprintf(sBuffer,"#R<#yHappy Hour#y: #L%s#y buys you happyhour.#R>#n\n\r",ch->name);
act_wiz.c:      sprintf(sBuffer,"#R<#yImmortal Happy Hour#y: #L%s #y%s #R>#n\n\r",ch->name,argument);
act_wiz.c:      sprintf(sBuffer,"#R<#yImmortal Happy Hour#y: #L%s#y buys you happyhour.#R>#n\n\r",ch->name);
act_wiz.c:  ch->pcdata->quest -= 5000;
act_wiz.c:  if ( ch->trust > 12 )
act_wiz.c:	if ( ch->pcdata->quest < 500 )
act_wiz.c:	ch->pcdata->quest -= 500;
act_wiz.c:    if (ch->pcdata->score[SCORE_TOTAL_LEVEL] < 1000)
act_wiz.c:	sprintf( buf, "You only have %d Mob levels. Min of 1000 needed\n\r",ch->pcdata->score[SCORE_TOTAL_LEVEL] );
act_wiz.c:    if (ch->pcdata->score[SCORE_HIGH_LEVEL] < 1000)
act_wiz.c:	sprintf( buf, "You wimpy Knight, Fight harder mobs. Your highest mob fight level is %d.\n\r",ch->pcdata->score[SCORE_HIGH_LEVEL] );
act_wiz.c:    if (ch->pcdata->score[SCORE_TOTAL_LEVEL] >= 1000 && ch->pcdata->score[SCORE_HIGH_LEVEL] >= 100)
act_wiz.c:	if ( ch->generation == 5 )
act_wiz.c:	if ( ch->generation == 4 )
act_wiz.c:	if ( ch->generation == 3 )
act_wiz.c:	if ( ch->generation == 2 )
act_wiz.c:	if ( ch->generation == 1 )
act_wiz.c:	if ( ch->generation == 6 )
act_wiz.c:	kill = value*ch->pcdata->score[SCORE_HIGH_LEVEL];
act_wiz.c:	if (kill > ch->pcdata->score[SCORE_TOTAL_LEVEL])
act_wiz.c:	    sprintf(buf, "You dont have enough mob levels. You need %d moblevels, you have %d.\n\r", kill, ch->pcdata->score[SCORE_TOTAL_LEVEL] );
act_wiz.c:((ch->pcdata->score[SCORE_HIGH_LEVEL]/1000)+(ch->pcdata->score[SCORE_TOTAL_LEVEL]/ch->pcdata->score[SCORE_HIGH_LEVEL]));
act_wiz.c:	ch->pcdata->quest += (ch->pcdata->score[SCORE_HIGH_LEVEL]/1000) + 
act_wiz.c:(ch->pcdata->score[SCORE_TOTAL_LEVEL]/ch->pcdata->score[SCORE_HIGH_LEVEL]);
act_wiz.c:	ch->pcdata->score[SCORE_TOTAL_LEVEL] = 0;
act_wiz.c:	ch->pcdata->score[SCORE_HIGH_LEVEL] = 0;
act_wiz.c:	ch->pcdata->score[SCORE_NUM_QUEST] += 1;
act_wiz.c:	ch->pcdata->score[SCORE_QUEST] += value2;
act_wiz.c:    if(ch->pkill < 2 )
act_wiz.c:    if(ch->pdeath <= 0)
act_wiz.c:    if(ch->pcdata->quest < 10000 )
act_wiz.c:	ch->pcdata->quest -= 10000;
act_wiz.c:	ch->pdeath -= 1;
act_wiz.c:	ch->pkill -= 2;
act_wiz.c:	sprintf(buf,"Your pkrecord is now at %d, pdrecord at %d.\n\r",ch->pkill , ch->pdeath );
act_wiz.c:	sprintf(buf2,"%s has converted his Pdeath down by one! Someone Get it back up.\n\r",ch->pcdata->switchname );
act_wiz.c:   if ( !str_cmp(ch->name, "Seth") || !str_cmp(ch->name, "Marisella"))
act_wiz.c:     sprintf(buf, "#R%s has been fired by %s#n.", victim->name, ch->name);
act_wiz.c:	sprintf(buf, "%s just attempted to NUKE you, but thats ok cuz %s doesn't have that authority.",  ch->name,         ch->sex == SEX_MALE ? "he" : ch->sex == SEX_FEMALE ? "she" : "it");
act_wiz.c:      sprintf(buf, "#L%s pulls out a big #RRED NUKE#L and nukes %s#n.", ch->name, victim->name);
act_wiz.c:      sprintf(buf, "[*****] NUKE: %s has been nuked by %s", victim->name, ch->name);
act_wiz.c:                sprintf(buf, "%s just attempted to FUCK you!", ch->name);
act_wiz.c:                sprintf(buf, "#R%s bends %s over the nearest rail, and #rRAMS THEIR BUTT HARD!#n.", ch->name, victim->name);
act_wiz.c:                sprintf(buf, "[*****] RAILRAM %s has been railed by  %s", victim->name, ch->name);
act_wiz.c:    if ( victim->level >= ch->level )
act_wiz.c:    SET_BIT(ch->pcdata->jflags, JFLAG_BULLY);
act_wiz.c:    if(!str_cmp(ch->pcdata->switchname, "Beorn"))
act_wiz.c:	sprintf(buf, "%s got sent to Niflheim by %s, don't try it people.\n\r", victim->pcdata->switchname, ch->pcdata->switchname );
act_wiz.c:    else if(!str_cmp(ch->pcdata->switchname, "Chrono"))
act_wiz.c:	sprintf(buf, "%s got farted on by %s, don't try it people.\n\r", victim->pcdata->switchname, ch->pcdata->switchname );
act_wiz.c:	sprintf(buf, "%s got Twitted by %s, and lost stats for being an idiot, dont be stupid people!.\n\r", victim->pcdata->switchname, ch->pcdata->switchname );
act_wiz.c:    if ( ch->played/3600 > 5 )
act_wiz.c:    if ( ch->played/3600 < 5 )
act_wiz.c:	ch->played = 18001;
act_wiz.c:    if( ch->generation < 6 )
act_wiz.c:    if( ch->generation == 6 )
act_wiz.c:    if( ch->pcdata->quest < 100000 )
act_wiz.c:    if (ch->level < 3 )
act_wiz.c:    ch->pcdata->quest -= 100000;
act_wiz.c:    ch->generation = 6;
act_wiz.c:    //if ( (ch->pcdata->upgrade_level+1) < 5 )
act_wiz.c://	price = ( (5 - (ch->pcdata->upgrade_level+1)) * 2000 );
act_wiz.c:/*    if ( ch->generation != 1 )
act_wiz.c:    if (ch->pcdata->upgrade_level < 3){
act_wiz.c:    if ( ch->pcdata->quest < price )
act_wiz.c:    ch->pcdata->quest -= price;
act_wiz.c:    obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:    if ( ch->pcdata->quest < 1000 )
act_wiz.c:    ch->pcdata->quest -= 250;
act_wiz.c:    ch->pcdata->score[SCORE_NUM_QUEST] += 1;
act_wiz.c:    ch->pcdata->score[SCORE_QUEST] += 750;
act_wiz.c:    ch->pcdata->questsrun += 1;
act_wiz.c:    ch->pcdata->questtotal += 750;
act_wiz.c:    if ( (get_age(ch) - 17) < 2 || ch->level < 3 || reachedDecapLimit(ch))
act_wiz.c:    else if ( (ch->pkill-ch->pdeath-3) < 1 )
act_wiz.c:	stcf(ch,"Low PK Range: %d High PK Range: %d\n\r",1,ch->pkill-ch->pdeath+3);
act_wiz.c:	stcf(ch,"Low PK Range: %d High PK Range: %d\n\r",ch->pkill-ch->pdeath-3,ch->pkill-ch->pdeath+3);
act_wiz.c:    if ( value*1000000 > ch->exp )
act_wiz.c:ch->exp);
act_wiz.c:    if ( ch->practice > 5000 )
act_wiz.c:    ch->practice += value;
act_wiz.c:    ch->exp -= value*1000000;
act_wiz.c:        if ( value*250000 > ch->pcdata->quest )
act_wiz.c:	sprintf(buf, "You need %d quest points. you have %d.\n\r",value*250000, ch->pcdata->quest);
act_wiz.c:    if ( ch->race > 25 )
act_wiz.c:    ch->race += value;
act_wiz.c:    ch->pcdata->quest -= value*250000;
act_wiz.c:		if ( ch->exp < 2000000000 )
act_wiz.c:			ch->pcdata->store++;
act_wiz.c:			ch->exp -= 2000000000;
act_wiz.c:		if ( ch->exp > 0 )
act_wiz.c:		if ( ch->pcdata->store <= 0 )
act_wiz.c:			ch->pcdata->store--;
act_wiz.c:			ch->exp += 2000000000;
act_wiz.c:		stcf(ch,"You have: %d 2 Billion Exp Stored.\n\r",ch->pcdata->store);
act_wiz.c:    if ( ch->exp <= 0 ) return;
act_wiz.c:    if (value > ch->exp)
act_wiz.c:	sprintf(non,"You only have %d left to put into a exp token.\n\r",ch->exp);
act_wiz.c:    if ( !str_cmp(arg2,"all" ) ) value = ch->exp;
act_wiz.c:    ch->exp -= value;
act_wiz.c:    if (ch->exp < 0) ch->exp = 0;
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:    if ( ch->practice <= 0 ) return;
act_wiz.c:    if (value > ch->practice)
act_wiz.c:	sprintf(non,"You only have %d left to put into a primal token.\n\r",ch->practice);
act_wiz.c:    if ( !str_cmp(arg2,"all" ) ) value = ch->practice;
act_wiz.c:    ch->practice -= value;
act_wiz.c:    if (ch->practice < 0) ch->practice = 0;
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    if ( ch->pcdata->store <= 0 ) return;
act_wiz.c:    if (value > ch->pcdata->store && ch->level < 10)
act_wiz.c:	sprintf(non,"You only have %d left to put into a store token.\n\r",ch->pcdata->store);
act_wiz.c:    if ( !str_cmp(arg2,"all" ) ) value = ch->pcdata->store;
act_wiz.c:    ch->pcdata->store -= value;
act_wiz.c:    if (ch->pcdata->store < 0) ch->pcdata->store = 0;
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:    if ( ch->pcdata->quest <= 0 && !str_cmp(arg2,"all")) return;
act_wiz.c:    else if ( value > ch->pcdata->quest && !IS_QUESTMAKER(ch) && ch->pcdata->security < 2)
act_wiz.c:	sprintf(non,"You only have %d left to put into a quest token.\n\r",ch->pcdata->quest);
act_wiz.c:    if ( !str_cmp(arg2,"all" ) ) value = ch->pcdata->quest;
act_wiz.c:    ch->pcdata->quest -= value;
act_wiz.c:    if (ch->pcdata->quest < 0) ch->pcdata->quest = 0;
act_wiz.c:    obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:    obj->questmaker = str_dup(ch->name);
act_wiz.c:    obj->questowner = str_dup(ch->pcdata->switchname);
act_wiz.c:    sprintf(buf,"#R%s is rolling %d dice.\n\r#n",ch->name, value2);
act_wiz.c:    sprintf(buf,"#R%s rolled a dice onto a %d off of a %d sided dice.\n\r#n",ch->name, total, value);
act_wiz.c:    sprintf(buf,"#R%s has rolled %d dice for a total of %d.\n\r#n",ch->name, totald,total2);
act_wiz.c:    if (ch->level < 7 )
act_wiz.c:    sprintf(buf,"#R%s rolled a dice onto a %d off of a %d sided dice.\n\r#n",ch->name, number_range(1,value), value);
act_wiz.c:    if (ch->level < 7 )
act_wiz.c:    if( !IS_SET(ch->in_room->room_flags, ROOM_DD) )
act_wiz.c:    sprintf(buf,"%s does %d damage.\n\r",ch->name, number_range(1,20));
act_wiz.c:/*    if ( ch->pkill > ch->pdeath )
act_wiz.c:    if ( ch->pkill == 0 && ch->pdeath == 0)
act_wiz.c:    if ( (ch->pdeath-5) >= ch->pkill )
act_wiz.c:	ch->pdeath = 0;
act_wiz.c:	ch->pkill = 0;
act_wiz.c:/*    if ( ch->pcdata->quest < ((ch->pdeath-ch->pkill)*5000)+1000)
act_wiz.c:	sprintf(buf,"You need %d Qps, You only have %d.\n\r",((ch->pdeath-ch->pkill)*5000)+1000, ch->pcdata->quest );
act_wiz.c:    if ( ch->pcdata->quest < 10000 ) return stcf(ch,"You need 10000 qps to pkreset.\n\r");
act_wiz.c:    ch->pcdata->quest -= 10000;
act_wiz.c:    ch->pkill = 0;
act_wiz.c:    ch->pdeath = 0;
act_wiz.c:    if( !IS_SET(ch->in_room->room_flags, ROOM_DD) )
act_wiz.c:    if ( (ch->level < 10) && (ch->trust < 10)) return;
act_wiz.c:    if ( ch->trust > ch->level )
act_wiz.c:	if ( ch->trust >= 10 )
act_wiz.c:	    ch->level = ch->trust;
act_wiz.c:    ch->level = 3;
act_wiz.c:    if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
act_wiz.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
act_wiz.c:    while ( ch->affected )
act_wiz.c:      affect_remove( ch, ch->affected );
act_wiz.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH)) REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:    if (IS_SET(ch->affected_by, AFF_ETHEREAL)) REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
act_wiz.c:    if (IS_EXTRA(ch,EXTRA_DRAGON)) REMOVE_BIT(ch->extra, EXTRA_DRAGON);
act_wiz.c:    if (IS_VAMPAFF(ch, VAM_CHANGED) && IS_POLYAFF(ch, POLY_WOLF))  REMOVE_BIT(ch->polyaff, POLY_WOLF);
act_wiz.c:    ch->affected_by	 = 0;
act_wiz.c:    ch->armor		 = 100;
act_wiz.c:    ch->hit		 = UMAX( 1, ch->hit  );
act_wiz.c:    ch->mana		 = UMAX( 1, ch->mana );
act_wiz.c:    ch->move		 = UMAX( 1, ch->move );
act_wiz.c:    ch->hitroll 	 = 0;
act_wiz.c:    ch->damroll 	 = 0;
act_wiz.c:    ch->rage		 = 0;
act_wiz.c:    ch->form		 = 1048575;
act_wiz.c:    ch->saving_throw	 = 0;
act_wiz.c:    ch->pcdata->mod_str  = 0;
act_wiz.c:    ch->pcdata->mod_int  = 0;
act_wiz.c:    ch->pcdata->mod_wis  = 0;
act_wiz.c:    ch->pcdata->mod_dex  = 0;
act_wiz.c:    ch->pcdata->mod_con  = 0;
act_wiz.c:    ch->pcdata->followers = 0;
act_wiz.c:	str_cmp(ch->name,obj->questmaker) || strlen(obj->questmaker) < 2))
act_wiz.c:	chroom = ch->in_room;
act_wiz.c:    if ( IS_NPC(ch) || ch->pcdata->obj_vnum < 1 )
act_wiz.c:    if ( ( pObjIndex = get_obj_index( ch->pcdata->obj_vnum ) ) == NULL )
act_wiz.c:    if ( ch->in_room == NULL || ch->in_room->vnum == ROOM_VNUM_IN_OBJECT )
act_wiz.c:    else location = ch->in_room;
act_wiz.c:    ch->pcdata->chobj = obj;
act_wiz.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
act_wiz.c:    SET_BIT(ch->extra, EXTRA_OSWITCH);
act_wiz.c:    free_string(ch->morph);
act_wiz.c:    ch->morph = str_dup(obj->short_descr);
act_wiz.c:   if( ch->sex != SEX_FEMALE) return;
act_wiz.c:    if( IS_SET(ch->affected_by2, AFF_CONTRACEPTION))
act_wiz.c:	REMOVE_BIT(ch->affected_by2, AFF_CONTRACEPTION);
act_wiz.c:	SET_BIT(ch->affected_by2, AFF_CONTRACEPTION);
act_wiz.c:    if (  ( ch->pcdata->pwd != '\0' )
act_wiz.c:  for (gch = char_list; gch != NULL; gch = gch->next)
act_wiz.c:/*    if (!IS_NPC(gch) && (IS_HEAD(gch,LOST_HEAD) || IS_SET(gch->extra, EXTRA_OSWITCH)))
act_wiz.c:      if (IS_HEAD(gch,LOST_HEAD)) REMOVE_BIT(gch->loc_hp[0],LOST_HEAD);
act_wiz.c:      REMOVE_BIT(gch->affected_by,AFF_POLYMORPH);
act_wiz.c:      if (IS_SET(gch->extra, EXTRA_OSWITCH)) REMOVE_BIT(gch->extra,EXTRA_OSWITCH);
act_wiz.c://	free_string(gch->morph); // not threadsafe.
act_wiz.c:      gch->morph = str_dup("");
act_wiz.c:      if (gch->pcdata->chobj != NULL) gch->pcdata->chobj = NULL;
act_wiz.c:      if (gch->pcdata->obj_vnum != 0) gch->pcdata->obj_vnum = 0;
act_wiz.c:    if (IS_SET(gch->extra, EXTRA_AFK))
act_wiz.c:      gch->name = str_dup(gch->pcdata->switchname);
act_wiz.c:    if (IS_HEAD(gch, LOST_HEAD) || IS_SET(gch->extra, EXTRA_OSWITCH))
act_wiz.c:      REMOVE_BIT(gch->loc_hp[0], LOST_HEAD);
act_wiz.c:      REMOVE_BIT(gch->affected_by,AFF_POLYMORPH);
act_wiz.c:      REMOVE_BIT(gch->extra, EXTRA_OSWITCH);
act_wiz.c:      gch->morph = str_dup("");
act_wiz.c:      gch->pcdata->chobj = NULL;
act_wiz.c:      gch->pcdata->obj_vnum = 0;
act_wiz.c:      SET_BIT(gch->extra, EXTRA_AFK);
act_wiz.c:     if (gch->desc->out_compress)
act_wiz.c:       if (!compressEnd2(gch->desc)) send_to_char("Could not disable compression, you'll have to reconect in 5 seconds.\n", gch);
act_wiz.c:			fprintf (fp, "%d %s %s\n", d->descriptor, och->name, d->host);
act_wiz.c:			if (och->level == 1)
act_wiz.c:				och->level++; /* Advance_level doesn't do that */
act_wiz.c:sprintf(buf, "%s is about to copyover. Kiss your ass goodbye",ch->name);
act_wiz.c:  if(IS_IMMORTAL(victim) && (victim->level >= ch->level))
act_wiz.c:  sprintf(buf, "#rYou have been warned by #R%s#r for #R%s#n\n\r\n\r", ch->name, reason);
act_wiz.c:  sprintf(buf, "#R%s#r has been given an official warning by #R%s#r.#n\n\r#rReason given: #R%s#n\n\r\n\r#rPlease take this into account for further infractions by #R%s#r.#n", victim->pcdata->switchname, ch->name, reason, victim->pcdata->switchname);
act_wiz.c:  make_note("Immortal", ch->name, "imm", "Official Warning", 30, buf);
act_wiz.c:  sprintf(buf, "%s has been warned by %s for %s.", victim->name, ch->name, reason);
angel.c:  if (ch->pcdata->powers[ANGEL_PEACE] < 2)
angel.c:    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
angel.c:  SET_BIT(ch->affected_by, AFF_ETHEREAL);
angel.c:  if (ch->pcdata->powers[ANGEL_PEACE] < 1)
angel.c:    REMOVE_BIT(ch->affected_by, AFF_PEACE);
angel.c:  SET_BIT(ch->affected_by, AFF_PEACE);
angel.c:  if (ch->pcdata->powers[ANGEL_PEACE] < 3)
angel.c:  if (ch->mana < 1500)
angel.c:  ch->mana -= 1500;
angel.c:  ch->hit += ch->pcdata->powers[ANGEL_PEACE]*500;  
angel.c:  if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
angel.c:  if (ch->pcdata->powers[ANGEL_PEACE] < 5)
angel.c:  if (ch->pcdata->powers[ANGEL_PEACE_COUNTER] > 0)
angel.c:  ch->pcdata->powers[ANGEL_PEACE_COUNTER] = 50;
angel.c:  nLevel = ch->level;
angel.c:  ch->level = 12;
angel.c:  ch->level = nLevel;
angel.c:  if (ch->pcdata->powers[ANGEL_HARMONY] < 2)
angel.c:  if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_AURA))
angel.c:    REMOVE_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_AURA);
angel.c:  SET_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_AURA);
angel.c:  if (ch->pcdata->powers[ANGEL_HARMONY] < 3)
angel.c:    if (ch->fighting == NULL) set_fighting(ch, victim);
angel.c:  if (ch->pcdata->powers[ANGEL_HARMONY] < 5)
angel.c:  if (ch->pcdata->powers[ANGEL_LOVE] < 1)
angel.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT))
angel.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
angel.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
angel.c:  if (ch->pcdata->powers[ANGEL_LOVE] < 2)
angel.c:  if (ch->alignment != 1000) ch->alignment = 1000;
angel.c:  if (IS_SET(ch->newbits, NEW_CUBEFORM))
angel.c:    REMOVE_BIT(ch->newbits, NEW_CUBEFORM);
angel.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
angel.c:    ch->damroll -=2000;
angel.c:    ch->hitroll -=2000;
angel.c:    free_string(ch->morph);
angel.c:    ch->morph=str_dup("");
angel.c:  if (ch->move < 2000 || ch->mana < 2000)
angel.c:    SET_BIT(ch->newbits, NEW_CUBEFORM);
angel.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
angel.c:    sprintf(buf,"%s the angel",ch->name);
angel.c:    free_string(ch->morph);
angel.c:    ch->morph = str_dup(buf);
angel.c:    ch->move -= 2000;
angel.c:    ch->mana -= 2000;
angel.c:    ch->damroll +=2000;
angel.c:    ch->hitroll +=2000;
angel.c:  if (ch->pcdata->powers[ANGEL_LOVE] < 3)
angel.c:  if (ch->pcdata->powers[ANGEL_LOVE] < 5)
angel.c:  if (ch->hit < ch->max_hit)
angel.c:  ch->level = 12;
angel.c:  for (ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room)
angel.c:    if (!IS_NPC(ich) && ich->fight_timer == 0 ) do_restore(ch,ich->pcdata->switchname);
angel.c:  ch->level = 3;
angel.c:  ch->hit = 1;
angel.c:  ch->move = 1;
angel.c:  ch->mana = 1;
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 1)
angel.c:  if (!IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_WINGS))                       
angel.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
angel.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ARENA) || IS_SET(victim->in_room->room_flags, ROOM_ARENA) )
angel.c:  if (ch->move < 500)
angel.c:  ch->move -= 500;
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 4)
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 1)
angel.c:  if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_WINGS))
angel.c:    REMOVE_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_WINGS);
angel.c:  SET_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_WINGS);
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 2)
angel.c:  if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_HALO))
angel.c:    REMOVE_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_HALO);
angel.c:  SET_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_HALO);
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 3)
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 3)
angel.c:  if ((victim = ch->fighting) == NULL)
angel.c:  if (ch->pcdata->powers[ANGEL_JUSTICE] < 5)
angel.c:  if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_EYE))
angel.c:    REMOVE_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_EYE);
angel.c:  SET_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_EYE);
angel.c:  if ( ch->practice < 150 )
angel.c: if (ch->pcdata->upgrade_level >= 1){
angel.c:  obj->questowner = str_dup(ch->pcdata->switchname);
angel.c:  ch->practice -= 150;
arena.c:  if (ch->in_room != NULL)
arena.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
arena.c:  for (vch=char_list;vch!=NULL;vch=vch->next)
arena.c:    if (vch->in_room != NULL)
arena.c:      if (IS_SET (vch->in_room->room_flags, ROOM_ARENA))
arena.c:        REMOVE_BIT(vch->act, PLR_FREEZE);
arena.c:  if (ch->fight_timer > 0)
arena.c:  if (ch->hit < ch->max_hit)
arena.c:  if (ch->move < ch->max_move)
arena.c:  if (ch->mana < ch->max_mana)
arena.c:  if (ch->in_room != NULL)
arena.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
arena.c:  sprintf(buf,"%s has joined the arena!",ch->name);
arena.c:  if (ch->in_room != NULL)
arena.c:    if (!IS_SET(ch->in_room->room_flags, ROOM_ARENA))
arena.c:  sprintf(buf,"%s resigns from the arena",ch->name);
arena.c:  ch->fight_timer = 0;
arena.c:  ch->pcdata->alosses++;
arena.c:    sprintf(buf,"#C%s #yemerges victorious from the #Rarena#n",gch->name);
arena.c:    gch->pcdata->awins++;
arena.c:    gch->fight_timer = 0;
arena.c:  if (ch->in_room != NULL)
arena.c:    if (!IS_SET(ch->in_room->room_flags, ROOM_ARENA))
arena.c:  sprintf(buf,"%s resigns from the arena",ch->name);
arena.c:  ch->fight_timer = 0;
arena.c:  ch->pcdata->alosses++;
arena.c:    sprintf(buf,"#C%s #oemerges victorious from the #Rarena#n",gch->name);
arena.c:    gch->pcdata->awins++;
arena.c:    gch->fight_timer = 0;
auction.c:    auc->owner = str_dup(ch->name);
auction.c:    if(ch->played<18000){
auction.c:    if (str_cmp(ch->pcdata->switchname,obj->questowner))
auction.c:	   ( IS_SET(obj->extra_flags, ITEM_ENGRAVED) && str_cmp(obj->questowner, ch->pcdata->switchname) ) )
auction.c:	   && ch->level < 13 && ch->trust < 13)
auction.c:    if ( ch->pcdata->quest < ( (start/15) + (bid/10) + time ) && ( ch->level < 6 ))
auction.c:    if ( ch->level < 6 )
auction.c:        ch->pcdata->quest -= (start/15) + (bid/10) + time;
auction.c:		ch->name, obj->short_descr );
auction.c:	if ( (IS_IMMORTAL(ch) || !str_cmp(auc->owner,ch->name) )
auction.c:    sprintf(buf,"%s has removed '%s#n' from the auction block.",ch->name,auc->item->short_descr);
auction.c:    if ( !str_cmp(ch->name,auc->owner) )
auction.c:    if ( bShow || ch->level > LEVEL_BUILDER )
auction.c:    if ( !str_cmp(auc->lastbid,ch->name) )
auction.c:    if ( bid > ch->pcdata->quest )
auction.c:    auc->lastbid = str_dup(ch->name);
auction.c:    ch->pcdata->quest -= 10;
auction.c:	ch->name, bid, auc->item->short_descr );
auction.c:    spell_identify( skill_lookup("identify"), ch->level, ch, auc->item );
auction.c:    if ( str_cmp(auc->owner,str_dup(ch->name) ) )
auction.c:    if ( (bid*100) > ch->pcdata->quest )
auction.c:    ch->pcdata->quest -= (bid*100);
auction.c:        ch->name, bid, auc->item->short_descr );
board.c:	if (!str_cmp (ch->pcdata->switchname, note->sender))
board.c:	if (is_full_name (ch->pcdata->switchname, note->to_list))
board.c:	if( ((ch->pcdata->kingdom != 0) && is_full_name(kingdom_table[ch->pcdata->kingdom].name, note->to_list)) || IS_IMMORTAL(ch) )
board.c:	last_read = ch->pcdata->last_note[board_number(board)];
board.c:        if (IS_SET(ch->act, PLR_SILENCE) )
board.c:	if (ch->pcdata->board == NULL) {
board.c:	if (get_trust(ch) < ch->pcdata->board->write_level)
board.c:	if (ch->pcdata->in_progress && (!ch->pcdata->in_progress->text))
board.c:		free_note (ch->pcdata->in_progress);		              
board.c:		ch->pcdata->in_progress = NULL;
board.c:		sprintf(buf2," %s is Writing a note.\n\r",ch->name);
board.c:	if (!ch->pcdata->in_progress)
board.c:		ch->pcdata->in_progress = new_note();
board.c:		ch->pcdata->in_progress->sender = str_dup (ch->name);
board.c:		ch->pcdata->in_progress->date = str_dup (strtime);
board.c:	sprintf(buf2," %s is writing a note.\n\r",ch->name);
board.c:	               ch->pcdata->in_progress->text ? "continuing" : "posting",
board.c:	               ch->pcdata->board->short_name);
board.c:	sprintf (buf, BOLD YELLOW "From" NO_COLOR ":    %s\n\r\n\r", ch->name);
board.c:	if (!ch->pcdata->in_progress->text) /* Are we continuing an old note or not? */
board.c:		switch (ch->pcdata->board->force_type)
board.c:					  ch->pcdata->board->names);
board.c:						   ch->pcdata->board->names);
board.c:						   ch->pcdata->board->names);
board.c:		ch->desc->connected = CON_NOTE_TO;
board.c:		               ch->pcdata->in_progress->to_list,
board.c:		               ctime(&ch->pcdata->in_progress->expire),
board.c:		               ch->pcdata->in_progress->subject);
board.c:		if (ch->pcdata->in_progress != NULL)
board.c:		send_to_char (ch->pcdata->in_progress->text,ch);
board.c:		ch->desc->connected = CON_NOTE_TEXT;		            
board.c:	time_t *last_note = &ch->pcdata->last_note[board_number(ch->pcdata->board)];
board.c:		for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:	if (ch->pcdata->board == NULL) {
board.c:	if (ch->pcdata->board->note_first == NULL) {
board.c:		for (p = ch->pcdata->board->note_first; p ; p = p->next, count++)
board.c:			sprintf (buf, "Changed to next board, %s.\n\r", ch->pcdata->board->short_name);
board.c:	p = find_note (ch, ch->pcdata->board, atoi(argument));
board.c:	if (str_cmp(ch->pcdata->switchname,p->sender) && ch->trust < MAX_LEVEL - 1)
board.c:	unlink_note (ch->pcdata->board,p);
board.c:	save_board(ch->pcdata->board); /* save the board */
board.c:		for (p = ch->pcdata->board->note_first; p; p = p->next)
board.c:	last_note = ch->pcdata->last_note[board_number (ch->pcdata->board)];
board.c:	for (p = ch->pcdata->board->note_first; p ; p = p->next)
board.c:	for (p = ch->pcdata->board->note_first; p && p->next; p = p->next);
board.c:		ch->pcdata->last_note[board_number(ch->pcdata->board)] = p->date_stamp;
board.c:		if (ch->pcdata->board != NULL) {
board.c:		sprintf (buf, "\n\rYou current board is " BOLD "%s" NO_COLOR ".\n\r", ch->pcdata->board->short_name);
board.c:		if (ch->pcdata->board->read_level > get_trust(ch))
board.c:		else if (ch->pcdata->board->write_level > get_trust(ch))
board.c:			ch->pcdata->board = &boards[i];
board.c:	ch->pcdata->board = &boards[i];
board.c:	int i = board_number (ch->pcdata->board) + 1;
board.c:		ch->pcdata->board = &boards[i];
board.c:	if (!ch->pcdata->in_progress)
board.c:	switch (ch->pcdata->board->force_type)
board.c:				ch->pcdata->in_progress->to_list = str_dup (ch->pcdata->board->names);
board.c:				sprintf (buf, "Assumed default recipient: " BOLD "%s" NO_COLOR "\n\r", ch->pcdata->board->names);
board.c:				ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:			if (!is_full_name (ch->pcdata->board->names, buf))
board.c:				strcat (buf, ch->pcdata->board->names);
board.c:				ch->pcdata->in_progress->to_list = str_dup(buf);
board.c:						 ch->pcdata->board->names, ch->pcdata->in_progress->to_list);
board.c:				ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:			if (is_full_name (ch->pcdata->board->names, buf))
board.c:				         BOLD YELLOW "To" NO_COLOR ":      ", ch->pcdata->board->names);
board.c:				ch->pcdata->in_progress->to_list = str_dup (buf);
board.c:	if (!ch->pcdata->in_progress)
board.c:		ch->pcdata->in_progress->subject = str_dup(buf);
board.c:		                 ch->pcdata->board->purge_days);
board.c:			ch->pcdata->in_progress->expire = 
board.c:				current_time + ch->pcdata->board->purge_days * 24L * 3600L;				
board.c:			sprintf (buf, "This note will expire %s\r",ctime(&ch->pcdata->in_progress->expire));
board.c:	if (!ch->pcdata->in_progress)
board.c:		days = 	ch->pcdata->board->purge_days;
board.c:	ch->pcdata->in_progress->expire = expire;
board.c:	if (!ch->pcdata->in_progress)
board.c:	if (ch->pcdata->in_progress->text != NULL)
board.c:		strcpy (letter, ch->pcdata->in_progress->text);
board.c:		free_string (ch->pcdata->in_progress->text);
board.c:		ch->pcdata->in_progress->text = NULL; /* be sure we don't free it twice */
board.c:		free_note (ch->pcdata->in_progress);
board.c:		ch->pcdata->in_progress = NULL;			/* important */
board.c:	ch->pcdata->in_progress->text = str_dup (letter);
board.c:		if (!ch->pcdata->in_progress)
board.c:				if (ch->pcdata->in_progress->text)
board.c:					write_to_buffer (d, ch->pcdata->in_progress->text, 0);
board.c:				finish_note (ch->pcdata->board, ch->pcdata->in_progress);
board.c:				ch->pcdata->in_progress = NULL;
board.c:                                if (board_number(ch->pcdata->board)+1 < 4)
board.c:                                    ch->name, board_number(ch->pcdata->board)+1);
board.c:				free_note (ch->pcdata->in_progress);
board.c:				ch->pcdata->in_progress = NULL;
build.c:    if ( (d = ch->desc) == NULL )
build.c:   if ( ch->substate <= SUB_PAUSE )
build.c:      sprintf(buf,"Edit_buffer: illegal ch->substate (%d)", ch->substate);
build.c:   if ( !ch->editor )
build.c:   edit = ch->editor;
build.c:   if ( ch->substate == SUB_MPROG_EDIT || ch->substate == SUB_HELP_EDIT )
build.c:	    int substate = ch->substate;
build.c:	    ch->substate = SUB_RESTRICTED;
build.c:	    ch->substate = substate;
build.c:            if ( !ch->last_cmd )
build.c:            (*ch->last_cmd) ( ch, "" );
build.c:	if ( !ch->desc )
build.c:	if ( ch->substate == SUB_RESTRICTED )
build.c:	   bug( "NOT GOOD: start_editing: ch->substate == SUB_RESTRICTED", 0 );
build.c:	if ( ch->editor )
build.c:	ch->editor = edit;
build.c:	ch->desc->connected = CON_EDITING;
build.c:   if ( !ch->editor )
build.c:   for ( x = 0; x < ch->editor->numlines; x++ )
build.c:      strcpy( tmp, ch->editor->line[x] );
build.c:    DISPOSE( ch->editor );
build.c:    ch->editor = NULL;
build.c:    ch->dest_buf  = NULL;
build.c:    ch->substate  = SUB_NONE;
build.c:    if ( !ch->desc )
build.c:    ch->desc->connected = CON_PLAYING;
build.c:          sprintf(buf, "Do_help: %s tried '%s'", ch->name, argument);
change.c:    changes_table[maxChanges-1].coder   = str_dup( ch->name );
change.c:    if (!ch->desc || NULLSTR(arg1) )
chrono.c:   stcf(ch,"%s, here's the Gem's.\n\r",ch->name);
chrono.c:   stcf(ch,"And here's the Hilt's.\n\r",ch->name);
chrono.c:   stcf(ch,"Plus a free bag to put them in.\n\r",ch->name);
chrono.c:             vch->name,
chrono.c:             vch->in_room == NULL ? 0 : vch->in_room->vnum,
chrono.c:             vch->in_room->area->name  );
chrono.c:   sprintf(buf,"%s has turned TEST mode on!\n\r",ch->name);
chrono.c:   sprintf(buf,"%s has turned TEST mode off!\n\r",ch->name);
chrono.c:   sprintf(buf,"%s has turned pk on!\n\r",ch->name);
chrono.c:   sprintf(buf,"%s has turned pk off!\n\r",ch->name);
chrono.c:  if(victim->trust > ch->trust)
chrono.c:  if(victim->trust > ch->trust)
chrono.c:            vch_next = vch->next;
chrono.c:            vch_next = vch->next;
chrono.c:            &&   vch->level < LEVEL_HERO)
chrono.c:            vch_next = vch->next;
chrono.c:            &&   vch->level >= LEVEL_HERO)
chrono.c:   original = ch->in_room;
chrono.c:   if (ch->position == POS_FIGHTING)
chrono.c:      if (!can_drop_obj(ch, obj) && ch->level < 7)
chrono.c:      if (ch->in_room != get_room_index(ROOM_VNUM_ALTAR))
chrono.c:            ch->pcdata->quest += amount;
chrono.c:         pit = get_obj_list(ch, "pit", ch->in_room->contents);
chrono.c:  if (victim == ch->challenger)
chrono.c:  if (!str_cmp(arg2, "death")) ch->deathmatch = TRUE;
chrono.c:  else if (!str_cmp(arg2, "spar")) ch->deathmatch = FALSE;
chrono.c:  if (ch->deathmatch)
chrono.c:    if (!str_cmp(ch->pcdata->last_decap[0], victim->name)) canDecap = FALSE;
chrono.c:    if (!str_cmp(victim->pcdata->last_decap[0], ch->name)) canKillYou = FALSE;
chrono.c:  ch->challenger = victim;
chrono.c:  if (ch->deathmatch) sprintf(buf, "You have been challenged to a #Gdeathmatch#n by %s. Type agree %s to start the fight.\n\r", ch->name, ch->name);
chrono.c:  else sprintf(buf, "You have been challenged to a #Gspar#n by %s. Type agree %s to start the fight.\n\r", ch->name, ch->name);
chrono.c:  if (ch->in_room == NULL) return FALSE;
chrono.c:  if ((ch->in_room->vnum >= 151) && (ch->in_room->vnum <= 160))
chrono.c:  ch->fight_timer = 0;
chrono.c:  do_restore(ch, ch->name);
chrono.c:  ch->pcdata->awins++;
chrono.c:  sprintf(buf, "%s was beaten in The Forbidden Fortress by %s.", victim->name, ch->name);
chrono.c:  if (ch->fight_timer > 0)
chrono.c:  if (ch->in_room != NULL)
chrono.c:    if (IS_SET(ch->in_room->room_flags, ROOM_ARENA) || IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
chrono.c:    if (!str_cmp(ch->pcdata->last_decap[0], victim->name)) canDecap = FALSE;
chrono.c:    if (!str_cmp(victim->pcdata->last_decap[0], ch->name)) canKillYou = FALSE;
chrono.c:  do_restore(ch, ch->name);
chrono.c:    sprintf(buf, "%s and %s enter #CThe Forbidden Fortress#n to test their skills", ch->name, victim->name);
chrono.c:    sprintf(buf, "%s and %s enter #CThe Forbidden Fortress#n to duel for their lives", ch->name, victim->name);
chrono.c:    if (ch->fight_timer > 0)
chrono.c: if(ch->level > 6)
chrono_comm.c:  else if (!str_cmp(arg, "immt") && (ch->level > 8)) showchannel(ch, STORE_IMMT);
chrono_comm.c://  else if (!str_cmp(arg, "tell") && ch->level > 6) showchannel(ch, STORE_TELL);
chrono_comm.c:  else if (ch->level < 7) send_to_char("Show the last chat/newbie/ooc/flame/roleplay messages ?\n\r", ch);
chrono_data.c:  if (ch->level > 6) return;
chrono_data.c:  if (ch->level < 3) return;
chrono_data.c:  if (ch->class == 0) return;
chrono_data.c:  if (ch->class == CLASS_DEMON) {j=0; sprintf(class,"Demon");}
chrono_data.c:  if (ch->class == CLASS_WEREWOLF) {j=1; sprintf(class,"Werewolf");}
chrono_data.c:  if (ch->class == CLASS_DROW) {j=2; sprintf(class,"Drow");}
chrono_data.c:  if (ch->class == CLASS_NINJA) {j=3; sprintf(class,"Ninja");}
chrono_data.c:  if (ch->class == CLASS_VAMPIRE) {j=4; sprintf(class,"Vampire");}
chrono_data.c:  if (ch->class == CLASS_MONK) {j=5; sprintf(class,"Monk");}
chrono_data.c:  if (ch->class == CLASS_MAGE) {j=6; sprintf(class,"Mage");}
chrono_data.c:  if (ch->class == CLASS_TANARRI) {j=7; sprintf(class,"Tanarri");}
chrono_data.c:  if (ch->class == CLASS_SHAPESHIFTER) {j=8; sprintf(class,"Shapeshifter");}
chrono_data.c:  if (ch->class == CLASS_WIZARD) {j=9; sprintf(class,"WIZARD");}
chrono_data.c:  if (ch->class == CLASS_SAMURAI) {j=10; sprintf(class,"Samurai");}
chrono_data.c:  if (ch->class == CLASS_UNDEAD_KNIGHT) {j=11; sprintf(class,"Undead Knight");}
chrono_data.c:  if (ch->class == CLASS_ANGEL) {j=12; sprintf(class,"Angel");}
chrono_data.c:  if (ch->class == CLASS_LICH) {j=13; sprintf(class,"Lich");}
chrono_data.c:  if (ch->class == CLASS_KAHN) {j=14; sprintf(class,"Kahn");}
chrono_data.c:  if (ch->class == CLASS_MILITARY) {j=15; sprintf(class,"Doomtrooper");}
chrono_data.c:  if (ch->class == CLASS_PHOENIX) {j=16; sprintf(class,"Phoenix");}
chrono_data.c:  if (ch->class == CLASS_ELF) {j=17; sprintf(class,"Elf");}
chrono_data.c:  if (ch->class == CLASS_DRAGON) {j=18; sprintf(class,"Dragon");}
chrono_data.c:  //if (ch->class == CLASS_DROID) {j=19; sprintf(class,"Spider Droid");}
chrono_data.c:  if (ch->race == best[j].status)
chrono_data.c:    if (!str_cmp(ch->pcdata->switchname,best[j].name) && getMight(ch) != best[j].pkscore)
chrono_data.c:   if (str_cmp(ch->pcdata->switchname,best[j].name) && ch->race >= best[j].status && getMight(ch) > best[j].pkscore)
chrono_data.c:    sprintf(buf,"#L%s#0 has taken the ranking of strongest #G%s#0 from #L%s#n.",ch->pcdata->switchname,class,best[j].name);
chrono_data.c:    best[j].status = ch->race;
chrono_data.c:    best[j].name = str_dup(ch->name);
chrono_data.c: if (ch->race != best[j].status)
chrono_data.c:   if (!str_cmp(ch->pcdata->switchname,best[j].name) && ch->race != best[j].status)
chrono_data.c:     best[j].status = ch->race;
chrono_data.c: else if (str_cmp(ch->pcdata->switchname,best[j].name) && ch->race > best[j].status)
chrono_data.c:  sprintf(buf,"#L%s#0 has taken the ranking of strongest #G%s#0 from #L%s#n.",ch->pcdata->switchname,class,best[j].name);
chrono_data.c:  best[j].status = ch->race;
chrono_data.c:  best[j].name = str_dup(ch->name);
clan.c:    if ( !IS_SET(ch->act, PLR_BRIEF ) )
clan.c:	ch->wpn[1], ch->wpn[2], ch->wpn[3], ch->wpn[11]);
clan.c:	ch->wpn[5], ch->wpn[7], ch->wpn[8], ch->wpn[10]);
clan.c:	ch->wpn[4], ch->wpn[6], ch->wpn[9], ch->wpn[12]);
clan.c:    sprintf(skill,"#RUnarmed:#7 %-4d#R #n\n\r", ch->wpn[0]);
clan.c:    if ( !IS_SET(ch->act, PLR_BRIEF) )
clan.c:    sprintf(skill,"#yViper   :#G %-4d  ", ch->stance[1]);
clan.c:    sprintf(skill,"#yCrane   :#G %-4d  ", ch->stance[2]);
clan.c:    sprintf(skill,"#yCrab    :#G %-4d  ", ch->stance[3]);
clan.c:    sprintf(skill,"#yMongoose:#G %-4d  ", ch->stance[4]);
clan.c:    sprintf(skill,"#yBull    :#G %-4d \n\r", ch->stance[5]);
clan.c:    sprintf(skill,"#yMantis  :#G %-4d  ", ch->stance[6]);
clan.c:    sprintf(skill,"#yDragon  :#G %-4d  ", ch->stance[7]);
clan.c:    sprintf(skill,"#yTiger   :#G %-4d  ", ch->stance[8]);
clan.c:    sprintf(skill,"#yMonkey  :#G %-4d  ", ch->stance[9]);
clan.c:    sprintf(skill,"#ySwallow :#G %-4d  \n\r", ch->stance[10]);
clan.c:    if ( !IS_SET(ch->act,PLR_BRIEF))
clan.c:    sprintf(skill,"#l  SS1 : #P%-4d", ch->stance[13]);
clan.c:    sprintf(skill,"#g  SS2 : #P%-4d", ch->stance[14]);
clan.c:    sprintf(skill,"#l  SS3 : #P%-4d", ch->stance[15]);
clan.c:    sprintf(skill,"#g  SS4 : #P%-4d", ch->stance[16]);
clan.c:    sprintf(skill,"#l  SS5 : #P%-4d\n\r", ch->stance[17]);
clan.c:    if ( !IS_SET(ch->act,PLR_BRIEF))
clan.c:    if (IS_ITEMAFF(ch, ITEMA_AFFENTROPY)) sprintf(skill,"#5Purple#n : #7%-4d", ch->spl[0] + 75);
clan.c:    else sprintf(skill,"#5Purple#n: #7%-4d", ch->spl[0]);
clan.c:    if (IS_ITEMAFF(ch, ITEMA_AFFENTROPY)) sprintf(skill,"#4Blue#n   : #7%-4d", ch->spl[2] + 75);
clan.c:    else sprintf(skill,"#4Blue#n: #7%-4d", ch->spl[2]);
clan.c:    if (IS_ITEMAFF(ch, ITEMA_AFFENTROPY)) sprintf(skill,"#1Red#n    : #7%-4d", ch->spl[1] + 75);
clan.c:    else sprintf(skill,"#1Red#n: #7%-4d", ch->spl[1]);
clan.c:    if (IS_ITEMAFF(ch, ITEMA_AFFENTROPY)) sprintf(skill,"#2Green#n  : #7%-4d", ch->spl[3] + 75);
clan.c:    else sprintf(skill,"#2Green#n: #7%-4d", ch->spl[3]);
clan.c:    if (IS_ITEMAFF(ch, ITEMA_AFFENTROPY)) sprintf(skill,"#3Yellow#n : #7%-4d\r\n", ch->spl[4] + 75);
clan.c:    else sprintf(skill, "#3Yellow#n: #7%-4d\n", ch->spl[4]);
clan.c:    sprintf(skill, "Recall Room : %d     \n\r", ch->home);
clan.c:    if (IS_SET(ch->act, PLR_RIGHTHAND))
clan.c:    else if(IS_SET(ch->act, PLR_LEFTHAND))
clan.c:    sprintf(skill, "Generation : %d\n\r", ch->generation);
clan.c:     if (IS_SET(ch->special,SPC_ELF_MAGE))
clan.c:     if (IS_SET(ch->special,SPC_ELF_WARRIOR))
clan.c:     if (IS_SET(ch->special,SPC_ELF_ARCHER))
clan.c:  if (ch->pcdata->rank == TANARRI_FODDER)
clan.c:  if (ch->pcdata->rank == TANARRI_FIGHTER)
clan.c:  if (ch->pcdata->rank == TANARRI_ELITE)
clan.c:  if (ch->pcdata->rank == TANARRI_CAPTAIN)
clan.c:  if (ch->pcdata->rank == TANARRI_WARLORD)
clan.c:  if (ch->pcdata->rank == TANARRI_BALOR)
clan.c:	if (ch->pcdata->rank == AGE_TRUEBLOOD)
clan.c:	else if (ch->pcdata->rank == AGE_LA_MAGRA)
clan.c:	else if (ch->pcdata->rank == AGE_METHUSELAH)
clan.c:	else if (ch->pcdata->rank == AGE_ELDER)
clan.c:	else if (ch->pcdata->rank == AGE_ANCILLA)
clan.c:	else if (ch->pcdata->rank == AGE_NEONATE)
clan.c:    if ( number_percent() > (ch->level*10) )
clan.c:	    SET_BIT(ch->affected_by, AFF_FREEZING);
clan.c:    inroom=ch->in_room;
clan.c:    if ( number_percent() > (ch->level*10) )
clan.c:	    SET_BIT(ch->affected_by, AFF_FLAMING);
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->generation > 0 && ch->generation < 14)
clan.c:      if ( ch->generation == 1 )
clan.c:	sprintf(buf,"My name is %s.  I am of the First Generation.  I am the Sire of all Kindred.\n\r", ch->name);
clan.c:      else if ( ch->generation == 2 )
clan.c:	sprintf(buf,"My name is %s.  I am of the Second Generation.  My sire is Caine.\n\r",ch->name );
clan.c:      else if ( ch->generation == 3 )
clan.c:	sprintf(buf,"My name is %s.  I am of the Third Generation.  My sire is Caine.\n\r",ch->name );
clan.c:      else if ( ch->generation > 3 )
clan.c:	sprintf(buf,"My name is %s.  I am of the %dth Generation.  My sire is Caine.\n\r",ch->name, ch->generation );
clan.c:        ch->generation > 0 && ch->generation < 7)
clan.c:	if ( ch->generation == 1 )
clan.c:	  sprintf(buf,"My name is %s.  I am the chosen champion of Gaia.\n\r",ch->name );
clan.c:	else if ( ch->generation > 1 )
clan.c:	  sprintf(buf,"My name is %s.  I am the pup of Gaia.",ch->name );
clan.c:    if (ch->power[DISC_VAMP_SERP] < 8)
clan.c:    if (!IS_SET(ch->newbits, NEW_COIL))
clan.c:     SET_BIT(ch->newbits, NEW_COIL);
clan.c:    else if (IS_SET(ch->newbits, NEW_COIL))
clan.c:     REMOVE_BIT(ch->newbits, NEW_COIL);
clan.c:    if (ch->power[DISC_VAMP_THAU] < 5)
clan.c:    if (ch->practice < 10)
clan.c:    if (IS_SET(ch->newbits, NEW_TIDE))
clan.c:    SET_BIT(ch->newbits, NEW_TIDE);
clan.c:    ch->practice -= 10;
clan.c:    if (ch->power[DISC_VAMP_QUIE] < 9)
clan.c:    if (ch->pcdata->condition[COND_THIRST] < 200)
clan.c:    SET_BIT(ch->extra, EXTRA_FLASH);
clan.c:    ch->power[DISC_VAMP_CELE] += 2;
clan.c:    ch->pcdata->condition[COND_THIRST] -= 200;
clan.c:    sprintf(buf, "%s starts moving with lightening speed.",ch->name);
clan.c:    inroom= ch->in_room;
clan.c:    if (ch->power[DISC_VAMP_QUIE] < 5)
clan.c:    if (!str_cmp(ch->in_room->area->name, "diku    midgaard"))
clan.c:    if (RTIMER(ch->in_room, RTIMER_SILENCE) != 0)
clan.c:     SET_RTIMER(ch->in_room, RTIMER_SILENCE, 0);
clan.c:    if (ch->pcdata->condition[COND_THIRST] < 300)
clan.c:    ch->pcdata->condition[COND_THIRST] -= 300;
clan.c:    sprintf(buf,"A look of concentration passes over %s's face.\n\r", ch->name);
clan.c:    if (ch->power[DISC_VAMP_DOMI] < 4)
clan.c:    if (ch->pcdata->condition[COND_THIRST] < 500)
clan.c:    if (IS_SET(ch->act, PLR_ACID))
clan.c:	REMOVE_BIT( ch->act, PLR_ACID);
clan.c:    SET_BIT(ch->act, PLR_ACID);
clan.c:    if (ch->power[DISC_VAMP_DOMI] < 8)
clan.c:    if (ch->pcdata->condition[COND_THIRST] < 250)
clan.c:    if (ch->practice < 25)
clan.c:    ch->pcdata->condition[COND_THIRST] -= 250;
clan.c:    ch->practice -= 25;
clan.c:    if (ch->power[DISC_VAMP_VICI] < 2)
clan.c:        if (ch->power[DISC_VAMP_VICI] < 8)
clan.c:        if ((victim = ch->fighting) == NULL)
clan.c:        if (ch->pcdata->condition[COND_THIRST] < 6)
clan.c:         dam += ch->power[DISC_VAMP_VICI] * 50;
clan.c:         dam += ch->power[DISC_VAMP_VICI] * 200;
clan.c:        ch->pcdata->condition[COND_THIRST] -= 6;
clan.c:         if (ch->power[DISC_WERE_BOAR] > 2) dam *= 1.5;
clan.c:        if (ch->power[DISC_VAMP_PRES] < 1)
clan.c:	  REMOVE_BIT(ch->extra, EXTRA_AWE);
clan.c:        SET_BIT(ch->extra, EXTRA_AWE);
clan.c:    if (ch->power[DISC_VAMP_VICI] < 5)
clan.c:    if (ch->fight_timer>0)
clan.c:    ch->pcdata->obj_vnum = ch->pcdata->powers[VPOWER_OBJ_VNUM];
clan.c:    ch->pcdata->chobj = obj;
clan.c:    ch->pcdata->obj_vnum = 30007;
clan.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:    SET_BIT(ch->extra, EXTRA_OSWITCH);
clan.c:    free_string(ch->morph);
clan.c:    ch->morph = str_dup("a pool of blood");
clan.c:    obj_to_room(obj,ch->in_room);
clan.c:    if (ch->power[DISC_VAMP_THAU] < 1)
clan.c:    if (ch->power[DISC_VAMP_OBTE] < 4)
clan.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
clan.c:    if (victim->in_room == ch->in_room)
clan.c:    if ( ch->power[DISC_VAMP_PROT] < 4 )
clan.c:            REMOVE_BIT(ch->affected_by, AFF_SHIFT);
clan.c:            REMOVE_BIT(ch->extra, EXTRA_EARTHMELD);
clan.c:            REMOVE_BIT(ch->act, PLR_WIZINVIS);
clan.c:           if (IS_HEAD(ch,LOST_HEAD)) REMOVE_BIT(ch->loc_hp[0],LOST_HEAD);
clan.c:            free_string(ch->morph);
clan.c:            ch->morph = str_dup("");
clan.c:            sprintf(buf, "%s rises up from the ground",ch->name);
clan.c:    if ( (mount = ch->mount) != NULL) do_dismount(ch,"");
clan.c:    SET_BIT(ch->affected_by, AFF_SHIFT);
clan.c:    SET_BIT(ch->extra, EXTRA_EARTHMELD);
clan.c:    SET_BIT(ch->act, PLR_WIZINVIS);
clan.c:    free_string(ch->morph);
clan.c:    ch->morph = str_dup("Someone");
clan.c:    sprintf(buf, "%s sinks into the ground.",ch->name);
clan.c:    if (ch->power[DISC_VAMP_ANIM] < 2)
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->beast < 1)
clan.c:	if ( ch->rage < 1 )
clan.c:	ch->rage = 0;
clan.c:    if (ch->generation <= 0)
clan.c:        ch->generation = 1;
clan.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
clan.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
clan.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
clan.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
clan.c:    else bloodpool = (250 / ch->generation);
clan.c:    if (IS_SET(ch->newbits, NEW_TIDE))
clan.c:    bloodpool += (3000 / ch->generation);
clan.c:    else bloodpool += (2000 / ch->generation);
clan.c:    if (ch->power[DISC_VAMP_THAU] < 4)
clan.c:        sprintf(buf,"A stream of blood shoots from %s into %s.",victim->name,ch->name);
clan.c:        sprintf(buf,"A stream of blood shoots from your body into %s.",ch->name);
clan.c:        sprintf(buf,"A stream of blood shoots from %s into %s.",victim->short_descr,ch->name);
clan.c:        sprintf(buf,"A stream of blood shoots from your body into %s.",ch->name);
clan.c:        ch->pcdata->condition[COND_THIRST] += number_range(10,15);
clan.c:            (ch->pcdata->condition[COND_THIRST] += blpr);
clan.c:		 if (ch->pcdata->condition[COND_THIRST] > (3000/ch->generation)+bloodpool)
clan.c:              ch->pcdata->condition[COND_THIRST] = ((3000 / ch->generation)+bloodpool);
clan.c:	if (ch->fighting == NULL) set_fighting(ch,victim);
clan.c:    if (ch->pcdata->condition[COND_THIRST] > (3000/ ch->generation)+bloodpool)
clan.c:       ch->pcdata->condition[COND_THIRST] = ((3000/ch->generation)+bloodpool);
clan.c:	if (ch->fighting == NULL) set_fighting(ch,victim);
clan.c:        REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
clan.c:        REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:        ch->damroll -= 2000;
clan.c:        ch->hitroll -= 2000;
clan.c:        ch->armor   += 3000;
clan.c:	free_string( ch->morph );
clan.c:        ch->morph = str_dup( "" );
clan.c:        if (ch->stance[0] != -1) do_stance(ch,"");
clan.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
clan.c:        ch->pcdata->mod_str = 25;
clan.c:        ch->pcdata->mod_dex = 25;
clan.c:        SET_BIT(ch->polyaff, POLY_ZULOFORM);
clan.c:        SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:        sprintf(buf, "%s the huge hulking demon", ch->name);
clan.c:        free_string( ch->morph );
clan.c:        ch->morph = str_dup( buf );
clan.c:	ch->damroll += 2000;
clan.c:	ch->hitroll += 2000;
clan.c:        ch->armor   -= 3000;
clan.c:    if (ch->power[DISC_VAMP_VICI] < 2)
clan.c:        REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
clan.c:        REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:        if (ch->hit < 1) ch->hit = 1;
clan.c:        ch->damroll = ch->damroll - 150;
clan.c:        ch->hitroll = ch->hitroll - 150; 
clan.c:        free_string( ch->morph );
clan.c:        ch->morph = str_dup( "" );
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 200 )
clan.c:        if (ch->stance[0] != -1) do_stance(ch,"");
clan.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
clan.c:    	ch->pcdata->condition[COND_THIRST] -= number_range(100,200);
clan.c:        ch->pcdata->mod_str = 15;
clan.c:        ch->pcdata->mod_dex = 15;
clan.c:        SET_BIT(ch->polyaff, POLY_ZULOFORM);
clan.c:        SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:        free_string( ch->morph );
clan.c:        ch->morph = str_dup( buf );
clan.c:        ch->damroll = ch->damroll + 150;
clan.c:        ch->hitroll = ch->hitroll + 150;
clan.c:    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
clan.c:    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_HORNS);
clan.c:    if (ch->power[DISC_DAEM_ATTA] < 4) return;
clan.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_HORNS);
clan.c:    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
clan.c:	if (ch->power[DISC_WERE_WOLF] < 1)
clan.c:	if (!IS_DEMPOWER( ch, DEM_CLAWS) && ch->power[DISC_DAEM_ATTA] < 1)
clan.c:	if (ch->power[DISC_VAMP_PROT] < 2)
clan.c:   if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_CLAWS))
clan.c:	if (ch->rage >0)
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
clan.c:	if (ch->power[DISC_WERE_WOLF] < 2)
clan.c:	if (!IS_DEMPOWER( ch, DEM_FANGS) && ch->power[DISC_DAEM_ATTA] < 2)
clan.c:	if (ch->rage >0)
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
clan.c:	if ( ch->power[DISC_WERE_HAWK] < 1 )
clan.c:	if ( ch->monkab[AWARE] < 1 )
clan.c:	if (ch->pcdata->classthree[KAHN_TIGER] < 1)
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_PROT] < 1 &&
clan.c:       ch->power[DISC_VAMP_OBTE] < 3) 
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->rage > 0)
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
clan.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
clan.c:    if (ch->pcdata->rank < AGE_ELDER)
clan.c:    if (IS_SET(ch->special, SPC_INCONNU))
clan.c:    if (ch->exp < 1000000)
clan.c:    ch->exp -= 1000000;
clan.c:    sprintf(buf,"%s is now an Inconnu!",ch->name);
clan.c:    SET_BIT(ch->special, SPC_INCONNU);
clan.c:    if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_HAWK] < 2)
clan.c:    if (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_ARCHER) && ch->pcdata->classtwo[ELF_ARC_ARCPOWER] < 2)
clan.c:    else if ( IS_CLASS(ch, CLASS_MONK) && ch->monkab[AWARE] < 2 )
clan.c:    else if ( IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBTE] < 2)
clan.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWSIGHT);
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->pcdata->condition[COND_THIRST] < 10)
clan.c:	ch->pcdata->condition[COND_THIRST] -= number_range(5,10);
clan.c:    SET_BIT(ch->affected_by, AFF_SHADOWSIGHT);
clan.c:	if ( ch->wpn[dtype] > 200 )
clan.c:		ch->wpn[dtype] = 200;
clan.c:	if ( ch->spl[dtype] > 200 )
clan.c:		ch->spl[dtype] = 200;
clan.c:    ch->exp = ch->exp + 1000;
clan.c:    if (ch->power[DISC_VAMP_OBFU] < 2 && IS_CLASS(ch, CLASS_VAMPIRE))
clan.c:    if (IS_CLASS(ch, CLASS_SHAPESHIFTER) && ch->pcdata->powers[SHAPE_POWERS] < 4)
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 40 && IS_CLASS(ch, CLASS_VAMPIRE))
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE)) ch->pcdata->condition[COND_THIRST] -= number_range(30,40);
clan.c:	sprintf(buf,"Your form shimmers and transforms into %s.",ch->name);
clan.c:	sprintf(buf,"%s's form shimmers and transforms into %s.",ch->morph,ch->name);
clan.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
clan.c:    	free_string( ch->morph );
clan.c:    	ch->morph = str_dup( "" );
clan.c:    	sprintf(buf,"%s's form shimmers and transforms into a clone of %s.",ch->morph,victim->name);
clan.c:    	sprintf(buf,"%s's form shimmers and transforms into a clone of you!",ch->morph);
clan.c:    	free_string( ch->morph );
clan.c:    	ch->morph = str_dup( victim->name );
clan.c:    sprintf(buf,"%s's form shimmers and transforms into a clone of %s.",ch->name,victim->name);
clan.c:    sprintf(buf,"%s's form shimmers and transforms into a clone of you!",ch->name);
clan.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
clan.c:    free_string( ch->morph );
clan.c:    ch->morph = str_dup( victim->name );
clan.c:    if (ch->power[DISC_VAMP_PROT] < 3  )
clan.c:    	if ( ch->pcdata->condition[COND_THIRST] < 50 )
clan.c:	if (ch->stance[0] != -1) do_stance(ch,"");
clan.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
clan.c:    	ch->pcdata->condition[COND_THIRST] -= number_range(40,50);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FLYING);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_SONIC);
clan.c:/*	SET_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_BAT);*/
clan.c:	SET_BIT(ch->polyaff, POLY_BAT);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
clan.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:	sprintf(buf, "%s the vampire bat", ch->name);
clan.c:    	free_string( ch->morph );
clan.c:    	ch->morph = str_dup( buf );
clan.c:    	if ( ch->pcdata->condition[COND_THIRST] < 50 )
clan.c:	if (ch->stance[0] != -1) do_stance(ch,"");
clan.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
clan.c:    	ch->pcdata->condition[COND_THIRST] -= number_range(40,50);
clan.c:    	ch->pcdata->mod_str = 10;
clan.c:/*	SET_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_WOLF);*/
clan.c:	SET_BIT(ch->polyaff, POLY_WOLF);
clan.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
clan.c:	sprintf(buf, "%s the dire wolf", ch->name);
clan.c:    	free_string( ch->morph );
clan.c:    	ch->morph = str_dup( buf );
clan.c:    	if ( ch->pcdata->condition[COND_THIRST] < 50 )
clan.c:	if (ch->stance[0] != -1) do_stance(ch,"");
clan.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
clan.c:    	ch->pcdata->condition[COND_THIRST] -= number_range(40,50);
clan.c:	    REMOVE_BIT(ch->extra, TIED_UP);
clan.c:	    REMOVE_BIT(ch->extra, GAGGED);
clan.c:	    REMOVE_BIT(ch->extra, BLINDFOLDED);
clan.c:/*	SET_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_MIST);*/
clan.c:	SET_BIT(ch->polyaff, POLY_MIST);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
clan.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:	SET_BIT(ch->affected_by, AFF_ETHEREAL);
clan.c:	sprintf(buf, "%s the white mist", ch->name);
clan.c:    	free_string( ch->morph );
clan.c:    	ch->morph = str_dup( buf );
clan.c:	    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FLYING);
clan.c:	    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_SONIC);
clan.c:	    REMOVE_BIT(ch->polyaff, POLY_BAT);
clan.c:/*	    REMOVE_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_BAT);*/
clan.c:/*	    REMOVE_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_WOLF);*/
clan.c:	    REMOVE_BIT(ch->polyaff, POLY_WOLF);
clan.c:	    if (ch->hit < 1) ch->hit = 1;
clan.c:/*	    REMOVE_BIT(ch->pcdata->powers[WOLF_POLYAFF], POLY_MIST);*/
clan.c:	    REMOVE_BIT(ch->polyaff, POLY_MIST);
clan.c:	    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
clan.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
clan.c:  	free_string( ch->morph );
clan.c:    	ch->morph = str_dup( "" );
clan.c:            if (ch->power[DISC_VAMP_ANIM] < 1) 
clan.c:            if (ch->power[DISC_VAMP_ANIM] > 0) 
clan.c:            if (ch->power[DISC_VAMP_AUSP] < 1) 
clan.c:            if (ch->power[DISC_VAMP_AUSP] > 0) 
clan.c:            if (ch->power[DISC_VAMP_AUSP] > 1) 
clan.c:            if (ch->power[DISC_VAMP_AUSP] > 2) 
clan.c:            if (ch->power[DISC_VAMP_DAIM] < 1) 
clan.c:            if (ch->power[DISC_VAMP_DOMI] < 1) 
clan.c:            if (ch->power[DISC_VAMP_DOMI] > 0) 
clan.c:            if (ch->power[DISC_VAMP_DOMI] > 1) 
clan.c:            if (ch->power[DISC_VAMP_DOMI] > 3) 
clan.c:            if (ch->power[DISC_VAMP_FORT] < 1) 
clan.c:            if (ch->power[DISC_VAMP_OBFU] < 1) 
clan.c:            if (ch->power[DISC_VAMP_OBTE] < 1) 
clan.c:            if (ch->power[DISC_VAMP_PRES] < 1) 
clan.c:            if (ch->power[DISC_VAMP_PROT] < 1) 
clan.c:            if (ch->power[DISC_VAMP_QUIE] < 1) 
clan.c:            if (ch->power[DISC_VAMP_QUIE] > 3)
clan.c:            if (ch->power[DISC_VAMP_SERP] < 1) 
clan.c:            if (ch->power[DISC_VAMP_THAU] < 1) 
clan.c:            if (ch->power[DISC_VAMP_THAU] > 0) 
clan.c:            if (ch->power[DISC_VAMP_VICI] < 1) 
clan.c:            if (ch->power[DISC_VAMP_VICI] > 3) 
clan.c:        cost = (ch->power[improve]+1) * 10;
clan.c:	if ( ch->power[improve] >= max && ch->pcdata->rank ==AGE_METHUSELAH)
clan.c:        if (ch->power[improve] >= max)
clan.c:	if ( cost > ch->practice )
clan.c:	ch->power[improve] += 1;
clan.c:	ch->practice -= cost;
clan.c:	SET_BIT(ch->immune, IMM_VAMPIRE);
clan.c:    REMOVE_BIT(ch->immune, IMM_VAMPIRE);
clan.c:    if (!IS_CLASS(ch, CLASS_WEREWOLF) || ch->power[DISC_WERE_OWL] < 3)
clan.c:        if (ch->power[DISC_VAMP_OBTE] < 3)
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->pcdata->condition[COND_THIRST] < 75)
clan.c:	ch->pcdata->condition[COND_THIRST] -= number_range(65,75);
clan.c:	    SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	    if ( !IS_SET(ch->act, PLR_SUPERINVIS) )
clan.c:	    SET_BIT(ch->act,PLR_SUPERINVIS);
clan.c:    	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	if ( IS_SET(ch->act,PLR_SUPERINVIS) )
clan.c:	REMOVE_BIT(ch->act,PLR_SUPERINVIS);
clan.c:    if (ch->power[DISC_VAMP_SERP] < 1  )
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 1000 / (10 - ch->generation) )
clan.c:    ch->pcdata->condition[COND_THIRST] -= 100;
clan.c:    ch->hit = ch->hit - number_range(10,20);
clan.c:    if (ch->position == POS_DEAD && !IS_HERO(ch))
clan.c:    SET_BIT(ch->immune, IMM_STAKE);
clan.c:  if (IS_CLASS(ch, CLASS_TANARRI) && !IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_TRUESIGHT))
clan.c: if ((ch->power[DISC_VAMP_AUSP] < 1) && IS_CLASS(ch, CLASS_VAMPIRE))
clan.c:  if (IS_CLASS(ch, CLASS_SHAPESHIFTER) && ch->pcdata->powers[SHAPE_POWERS] < 1)
clan.c:    if ((ch->power[DISC_WERE_HAWK] < 3) && IS_CLASS(ch,CLASS_WEREWOLF))
clan.c:   if ( IS_CLASS(ch, CLASS_MONK) && ch->monkab[AWARE] < 3 )
clan.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
clan.c:	REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
clan.c:      SET_BIT(ch->act, PLR_HOLYLIGHT);
clan.c:    if (ch->power[DISC_VAMP_PRES] < 5  )
clan.c:        REMOVE_BIT(ch->affected_by, AFF_PEACE);
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 45 )
clan.c:    ch->pcdata->condition[COND_THIRST] -= number_range(35,45);
clan.c:    SET_BIT(ch->affected_by, AFF_PEACE);
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_AUSP] < 2 )
clan.c:    if (IS_CLASS(ch, CLASS_DRAGON) && (ch->pcdata->classfour[DRAGON_POWER] < 4))
clan.c:    if (IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 3)
clan.c:    if (IS_CLASS(ch, CLASS_KAHN) && ch->pcdata->classthree[KAHN_RANKS] < 3)
clan.c:  if ( ch->in_room->vnum >= 86000 && ch->in_room->vnum <= 86099)
clan.c:  if( IS_CLASS(ch, CLASS_MAGE) && ch->pcdata->powers[PINVOKE] < 3 )
clan.c:	ch->pcdata->powers[CYBORG_FACE] < 5)
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->pcdata->condition[COND_THIRST] < 25 
clan.c:	ch->pcdata->condition[COND_THIRST] -= number_range(15,25);
clan.c:    chroom = ch->in_room;
clan.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:    if (!IS_NPC(victim)) ch->fight_timer += 5;
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_AUSP] < 3 && !IS_ITEMAFF(ch, ITEMA_VISION))
clan.c:    if (IS_CLASS(ch, CLASS_LICH) && ch->pcdata->powers[DEATH_LORE] < 1)
clan.c:    if (IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 2)
clan.c:    if (IS_CLASS(ch, CLASS_KAHN) && ch->pcdata->classthree[KAHN_RANKS] < 3)
clan.c:    if (IS_CLASS(ch,CLASS_DROID) && ch->pcdata->powers[CYBORG_FACE] < 5)
clan.c:	spell_identify( skill_lookup( "identify" ), ch->level, ch, obj );
clan.c:    if (ch->power[DISC_VAMP_OBFU] < 4)
clan.c:        if ( ch->pcdata->condition[COND_THIRST] < 1000 / (10 - ch->generation) )
clan.c:    	blood = ch->pcdata->condition[COND_THIRST];
clan.c:    	ch->pcdata->condition[COND_THIRST] = 666;
clan.c:    	if (IS_SET(ch->act,PLR_HOLYLIGHT) ) do_truesight(ch,"");
clan.c:	ch->rage = 0;
clan.c:    	ch->pcdata->condition[COND_THIRST] = blood;
clan.c:    	REMOVE_BIT(ch->class, CLASS_VAMPIRE);
clan.c:    	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_MORTAL);
clan.c:    SET_BIT(ch->class, CLASS_VAMPIRE);
clan.c:    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_MORTAL);
clan.c:    	blood = ch->pcdata->condition[COND_THIRST];
clan.c:    	ch->pcdata->condition[COND_THIRST] = 666;
clan.c:    	if (IS_SET(ch->act,PLR_HOLYLIGHT) ) do_truesight(ch,"");
clan.c:	ch->rage = 0;
clan.c:    	ch->pcdata->condition[COND_THIRST] = blood;
clan.c:  if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_OWL] < 2)
clan.c:  if (IS_CLASS(ch, CLASS_DROW) && !IS_SET(ch->pcdata->powers[1],DPOWER_DROWSHIELD))
clan.c:  if (IS_CLASS(ch, CLASS_MONK) && !IS_NPC(ch) && ch->pcdata->powers[PMONK] < 2)
clan.c:  if (IS_CLASS(ch, CLASS_DROID) && ch->pcdata->powers[CYBORG_FACE]<4)
clan.c:  if (IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_GEN] < 4 )
clan.c:  if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBFU] < 3 && ch->power[DISC_VAMP_DOMI] < 2)
clan.c:    SET_BIT(ch->immune, IMM_SHIELDED);
clan.c:  REMOVE_BIT(ch->immune, IMM_SHIELDED);
clan.c:    if (ch->power[DISC_VAMP_SERP] < 2)
clan.c:	REMOVE_BIT(ch->polyaff, POLY_SERPENT);
clan.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:	free_string( ch->morph );
clan.c:	ch->morph = str_dup( "" );
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 50 )
clan.c:    ch->pcdata->condition[COND_THIRST] -= number_range(40,50);
clan.c:    if (ch->wpn[0] > 0)
clan.c:    	ch->hitroll += ch->wpn[0] * 0.75;
clan.c:    	ch->damroll += ch->wpn[0] * 0.75;
clan.c:    	ch->armor   -= ch->wpn[0] * 3;
clan.c:    if (ch->stance[0] != -1) do_stance(ch,"");
clan.c:    if (ch->mounted == IS_RIDING) do_dismount(ch,"");
clan.c:    ch->pcdata->mod_str = 10;
clan.c:    SET_BIT(ch->polyaff, POLY_SERPENT);
clan.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:    sprintf(buf, "%s the huge serpent", ch->name);
clan.c:    free_string( ch->morph );
clan.c:    ch->morph = str_dup( buf );
clan.c:    if (ch->power[DISC_VAMP_SERP] < 3)
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 15 )
clan.c:    ch->pcdata->condition[COND_THIRST] -= number_range(5,15);
clan.c:    if (ch->rage > 0)
clan.c:    if ( ch->position == POS_FIGHTING )
clan.c:    if ( ch->hit >= ch->max_hit && ch->mana >= ch->max_mana && ch->move >= ch->max_move )
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 5 )
clan.c:    ch->pcdata->condition[COND_THIRST] -= number_range(10,20);
clan.c:    if ( ch->hit >= ch->max_hit && ch->mana >= ch->max_mana && ch->move >= ch->max_move )
clan.c:    if (ch->hit < 1 )
clan.c:	ch->hit = ch->hit + 1;
clan.c:    	ch->hit = UMIN(ch->hit + 500, ch->max_hit);
clan.c:	    REMOVE_BIT(ch->loc_hp[1],BROKEN_RIBS_1);
clan.c:	    REMOVE_BIT(ch->loc_hp[1],BROKEN_RIBS_2);
clan.c:	    REMOVE_BIT(ch->loc_hp[1],BROKEN_RIBS_4);
clan.c:	    REMOVE_BIT(ch->loc_hp[1],BROKEN_RIBS_8);
clan.c:	    REMOVE_BIT(ch->loc_hp[1],BROKEN_RIBS_16);
clan.c:	    SET_BIT(ch->loc_hp[1],BROKEN_RIBS_16);}
clan.c:	    SET_BIT(ch->loc_hp[1],BROKEN_RIBS_8);}
clan.c:	    SET_BIT(ch->loc_hp[1],BROKEN_RIBS_4);}
clan.c:	    SET_BIT(ch->loc_hp[1],BROKEN_RIBS_2);}
clan.c:	    SET_BIT(ch->loc_hp[1],BROKEN_RIBS_1);}
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_EYE_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_EYE_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_EAR_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_EAR_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_NOSE);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],BROKEN_NOSE);
clan.c:	    REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_1);
clan.c:	    REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_2);
clan.c:	    REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_4);
clan.c:	    REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_8);
clan.c:	    REMOVE_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_16);
clan.c:	    SET_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_16);}
clan.c:	    SET_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_8);}
clan.c:	    SET_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_4);}
clan.c:	    SET_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_2);}
clan.c:	    SET_BIT(ch->loc_hp[LOC_HEAD],LOST_TOOTH_1);}
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],BROKEN_NOSE);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],BROKEN_JAW);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_HEAD],BROKEN_SKULL);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_BODY],BROKEN_SPINE);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_BODY],BROKEN_NECK);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_ARM);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_ARM);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_L],LOST_HAND);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_ARM);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_ARM);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_R],LOST_HAND);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_L],LOST_LEG);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_L],BROKEN_LEG);
clan.c:	SET_BIT(ch->loc_hp[LOC_LEG_L],LOST_FOOT);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_R],LOST_LEG);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_R],BROKEN_LEG);
clan.c:	SET_BIT(ch->loc_hp[LOC_LEG_R],LOST_FOOT);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_ARM);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_ARM);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_L],BROKEN_LEG);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_R],BROKEN_LEG);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_HAND);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_L],LOST_THUMB);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_I);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_M);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_R);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_HAND);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_R],LOST_THUMB);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_I);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_M);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_R);
clan.c:	SET_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_L],LOST_FOOT);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_LEG_R],LOST_FOOT);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_THUMB);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_THUMB);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_THUMB);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_I);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_I);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_I);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_M);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_M);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_M);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],LOST_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_THUMB);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_THUMB);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_THUMB);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_I);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_I);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_I);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_M);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_M);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_M);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_R);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],LOST_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_L);
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_L);
clan.c:    	if (IS_SET(ch->loc_hp[6], BLEEDING_THROAT)) return;
clan.c:	REMOVE_BIT(ch->loc_hp[LOC_BODY],CUT_THROAT);
clan.c:    if (!IS_NPC(ch) && IS_CLASS(ch,CLASS_VAMPIRE) && ch->beast > 0
clan.c:	&& ch->beast < 100 && number_range(1, 300) <= ch->beast)
clan.c:	if (ch->beast == 1)
clan.c:	    ch->exp += 1000000;
clan.c:		SET_BIT(ch->immune, IMM_SUNLIGHT);
clan.c:	ch->beast -= 1;
clan.c:    if (!IS_NPC(ch) && IS_CLASS(ch,CLASS_VAMPIRE) && ch->beast < 100
clan.c:	&& ch->beast > 0 && number_range(1, 500) <= ch->beast)
clan.c:	if (ch->beast < 99)
clan.c:	ch->beast += 1;
clan.c:    	blood = ch->pcdata->condition[COND_THIRST];
clan.c:    	ch->pcdata->condition[COND_THIRST] = 666;
clan.c:    	ch->pcdata->condition[COND_THIRST] = blood;
clan.c:    if (IS_SET(ch->special, SPC_WOLFMAN)) return;
clan.c:    SET_BIT(ch->special, SPC_WOLFMAN);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
clan.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
clan.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
clan.c:    sprintf(buf,"%s the werewolf", ch->name);
clan.c:    free_string(ch->morph);
clan.c:    ch->morph = str_dup(buf);
clan.c:    ch->rage += 25;
clan.c:    ch->hitroll += 50;
clan.c:    ch->damroll += 50;
clan.c:    if (ch->power[DISC_WERE_WOLF] > 3) ch->rage += 100;
clan.c:    if (ch->rage > 300) 
clan.c:	ch->rage = 300;
clan.c:	vch_next	= vch->next;
clan.c:	if ( vch->in_room == NULL )
clan.c:	if ( !IS_NPC(vch) && vch->pcdata->chobj != NULL )
clan.c:	    if (vch->in_room == ch->in_room)
clan.c:	    else if (vch->in_room->area == ch->in_room->area)
clan.c:	if ( vch->in_room == ch->in_room && can_see( ch, vch) )
clan.c:	    if (vch == NULL || vch->position <= POS_STUNNED) continue;
clan.c:    if (!IS_SET(ch->special, SPC_WOLFMAN)) return;
clan.c:    REMOVE_BIT(ch->special, SPC_WOLFMAN);
clan.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
clan.c:    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
clan.c:    free_string(ch->morph);
clan.c:    ch->morph = str_dup("");
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
clan.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
clan.c:    ch->rage -= 25;
clan.c:    ch->hitroll -= 50;
clan.c:    ch->damroll -= 50;
clan.c:    if (ch->rage < 0) ch->rage = 0;
clan.c:    if (ch->power[DISC_VAMP_DOMI] < 3 && IS_CLASS(ch, CLASS_MAGE) )
clan.c:    if ( ( familiar = ch->pcdata->familiar ) != NULL)
clan.c:	ch->pcdata->familiar = NULL;
clan.c:    if (victim->level > (ch->spl[RED_MAGIC] * 0.25))
clan.c:    if ( ch->pcdata->condition[COND_THIRST] < 50 && IS_CLASS(ch, CLASS_VAMPIRE))
clan.c:    ch->pcdata->condition[COND_THIRST] -= 50;
clan.c:    ch->pcdata->familiar = victim;
clan.c:    if ( ( familiar = ch->pcdata->familiar ) != NULL ) 
clan.c:    ch->pcdata->familiar = victim;
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && (ch->power[DISC_VAMP_DOMI] < 3) )
clan.c:    if ( ( victim = ch->pcdata->familiar ) == NULL )
clan.c:    if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_OWL] < 1)
clan.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBFU] < 1)
clan.c:    if (ch->fight_timer >0) {
clan.c:    if ( ch->move < 5000 ) return stcf(ch,"You don't have the 5,000 move points to use vanish.\n\r");
clan.c:    if ( IS_SET(ch->act, PLR_SUPERINVIS) )
clan.c:	REMOVE_BIT(ch->act, PLR_SUPERINVIS);
clan.c:	SET_BIT(ch->act, PLR_SUPERINVIS);
clan.c:        ch->move -= 5000;
clan.c:	REMOVE_BIT(ch->extra, TIED_UP);
clan.c:	REMOVE_BIT(ch->affected_by, AFF_WEBBED);
clan.c:    if (!IS_SET(ch->special, SPC_WOLFMAN))
clan.c:	ch->rage += number_range(40,60);
clan.c:	if (ch->rage >= 100) do_werewolf(ch,"");
clan.c:	if (ch->power[DISC_DAEM_ATTA] < 3)
clan.c:     if (ch->beast < 1)
clan.c:	ch->beast = 1;
clan.c:        if (ch->beast > ch->rage || ch->rage < 125)
clan.c:	    ch->rage += number_range(ch->generation,25);
clan.c:	    if (number_percent() < (ch->beast + 1))
clan.c:		ch->beast += 1;
clan.c:		if (ch->beast > 100)
clan.c:		  ch->beast = 100;
clan.c:        ch->rage = 0;}
clan.c:    if (ch->power[DISC_WERE_WOLF] < 3)
clan.c:    if (IS_SET(ch->special, SPC_WOLFMAN))
clan.c:	ch->rage -= number_range(60,90);
clan.c:        if (ch->rage < 0) ch->rage = 0;
clan.c:	if (ch->rage < 100) do_unwerewolf(ch,"");
clan.c:ch->rage = 0;
clan.c:    if (ch->power[DISC_DAEM_ATTA] < 4)
clan.c:    if (ch->beast >= 100) ch->beast = 100;
clan.c:    if (ch->beast <= 0) ch->beast = 0;
clan.c:    ch->rage -= (40 - (ch->beast / 3) +dice (1, 10));
clan.c:    if (ch->rage <= 0)
clan.c:	ch->rage = 0;
clan.c:	if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_SPID] < 2) 
clan.c:	if (IS_CLASS(ch, CLASS_DROW) && !IS_SET(ch->pcdata->powers[1],DPOWER_WEB))
clan.c:    if (IS_CLASS(ch, CLASS_MILITARY) && ch->pcdata->Bootcamp[0]<3){
clan.c:    if (IS_CLASS(ch, CLASS_TANARRI) && ch->pcdata->rank < 3)
clan.c:    if (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_WARRIOR) && ch->pcdata->classtwo[ELF_WAR_TECH] < 1)
clan.c:    if (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_ARCHER) && ch->pcdata->classtwo[ELF_ARC_ARCPOWER] < 1)
clan.c:    level = ch->spl[spelltype] * 0.25;
clan.c:	if (!IS_CLASS(ch, CLASS_NINJA) || ch->pcdata->powers[NPOWER_SORA] <1) {
clan.c:    chroom = ch->in_room;
clan.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
clan.c:    if (!IS_NPC(victim)) ch->fight_timer += 5;
clan.c:	if (!IS_CLASS(ch, CLASS_NINJA) || ch->pcdata->powers[NPOWER_SORA] <2) {
clan.c:	spell_identify( skill_lookup( "identify" ), ch->level, ch, obj );
comm.c:	vch_next = vch->next;
comm.c:    sprintf( log_buf, "Closing link to %s.", ch->name );
comm.c:      if (IS_SET(ch->extra, EXTRA_AFK)) REMOVE_BIT(ch->extra,EXTRA_AFK);
comm.c:      if (IS_SET(ch->extra, EXTRA_OSWITCH)) do_humanform(ch,"");
comm.c:      if (ch->position == POS_FIGHTING) stop_fighting(ch,TRUE);
comm.c:      ch->desc = NULL;
comm.c:      ch->desc = NULL;
comm.c:  for (gch = char_list; gch != NULL; gch = gch->next)
comm.c:    if (IS_HEAD(gch,LOST_HEAD) || IS_SET(gch->extra, EXTRA_OSWITCH))
comm.c:      REMOVE_BIT(gch->loc_hp[0], LOST_HEAD);
comm.c:      REMOVE_BIT(gch->affected_by, AFF_POLYMORPH);
comm.c:      REMOVE_BIT(gch->extra, EXTRA_OSWITCH);
comm.c:      gch->morph = str_dup("");
comm.c:      gch->pcdata->chobj = NULL;
comm.c:      gch->pcdata->obj_vnum = 0;
comm.c:    gch->hit = gch->max_hit;
comm.c:    gch->position = POS_STANDING;
comm.c:             fprintf (fp, "%d %s %s\n", d->descriptor, och->name, d->host);
comm.c:	if ( IS_SET(ch->act, PLR_BLANK) )
comm.c:	if (IS_SET(ch->act, PLR_PROMPT) && IS_EXTRA(ch, EXTRA_PROMPT))
comm.c:	else if ( IS_SET(ch->act, PLR_PROMPT) )
comm.c:		sprintf(exp_str, "%d", ch->exp);
comm.c:		COL_SCALE(exp_str, ch, ch->exp, 1000);
comm.c:	    else if (ch->position == POS_FIGHTING)
comm.c:	        victim = ch->fighting;
comm.c:		sprintf(hit_str, "%d", ch->hit);
comm.c:		COL_SCALE(hit_str, ch, ch->hit, ch->max_hit);
comm.c:		sprintf(mana_str, "%d", ch->mana);
comm.c:		COL_SCALE(mana_str, ch, ch->mana, ch->max_mana);
comm.c:		sprintf(move_str, "%d", ch->move);
comm.c:		COL_SCALE(move_str, ch, ch->move, ch->max_move);
comm.c:		sprintf(hit_str, "%d", ch->hit);
comm.c:		COL_SCALE(hit_str, ch, ch->hit, ch->max_hit);
comm.c:		sprintf(mana_str, "%d", ch->mana);
comm.c:		COL_SCALE(mana_str, ch, ch->mana, ch->max_mana);
comm.c:		sprintf(move_str, "%d", ch->move);
comm.c:		COL_SCALE(move_str, ch, ch->move, ch->max_move);
comm.c:		sprintf(exp_str, "%d", ch->exp);
comm.c:		COL_SCALE(exp_str, ch, ch->exp, 1000);
comm.c:	if ( IS_SET(ch->act, PLR_TELNET_GA) )
comm.c:	if ( IS_SET(ch->act, PLR_DENY))	{
comm.c:	    sprintf( log_buf, "Denying access to %s@%s.", argument, ch->lasthost );
comm.c:	    strcmp( argument, ch->pcdata->pwd ) &&
comm.c:	    strcmp( crypt ( argument, ch->pcdata->pwd ),ch->pcdata->pwd )))
comm.c:	    strcmp( crypt ( argument, ch->pcdata->pwd ), ch->pcdata->pwd )))
comm.c:	if (ch->level > 1)
comm.c:	    sprintf(kav,ch->pcdata->switchname);
comm.c:	if (ch->lasthost != NULL) free_string(ch->lasthost);
comm.c:	if (ch->desc != NULL && ch->desc->host != NULL)
comm.c:        ch->lasthost = str_dup(ch->desc->host);
comm.c:	    ch->lasthost = str_dup("(unknown)");
comm.c:	free_string(ch->lasttime);
comm.c:	ch->lasttime = str_dup( strtime );
comm.c:	sprintf( log_buf, "%s@%s has connected.",ch->name, ch->lasthost );
comm.c:        sprintf( log_buf, "%s has %d QP|%d Stores upon login.", ch->name, ch->pcdata->quest, ch->pcdata->store);
comm.c:	if ( fOld && ch->lasthost != NULL && strlen(ch->lasthost) > 1 &&
comm.c:		ch->lasttime != NULL && strlen(ch->lasttime) > 1 )
comm.c:	    sprintf(kav,"Last connected from %s at %s\n\r",ch->lasthost,ch->lasttime);
comm.c:	else if ( fOld && ch->lasthost != NULL && strlen(ch->lasthost) > 1 )
comm.c:	    sprintf(kav,"Last connected from %s.\n\r",ch->lasthost);
comm.c:	if (ch->level < 4 && ch->trust < 4)
comm.c:	ch->trust = 0;
comm.c:	if ( ch->level > 3 && ch->trust == 0)
comm.c:	    ch->level = 3;
comm.c://	    if ( ch->level > MAX_LEVEL )
comm.c://		ch->level = MAX_LEVEL;
comm.c://	    if ( ch->trust > MAX_LEVEL)
comm.c://		ch->trust = MAX_LEVEL;
comm.c:	    if ( ch->trust > ch->level)
comm.c:		ch->trust = ch->level;
comm.c:	ch->next	= char_list;
comm.c:	ch->gnosis[GCURRENT] = ch->gnosis[GMAXIMUM] - 5;
comm.c:	if( ch->gnosis[GCURRENT] < 0 ) ch->gnosis[GCURRENT] = 0;
comm.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
comm.c:	if ( !IS_SET(ch->extra, EXTRA_TRUSTED) )
comm.c:		SET_BIT(ch->extra, EXTRA_TRUSTED);
comm.c:	if ( ch->level == 0 )
comm.c:            ch->pcdata->awins        = 0; /* arena wins           */
comm.c:            ch->pcdata->alosses      = 0; /* arena losses         */
comm.c:		ch->pcdata->board = &boards[0];
comm.c:            ch->gladiator       = NULL; /* set player to bet on to NULL */
comm.c:	    ch->challenger = NULL;
comm.c:	    ch->challenged = NULL;
comm.c:	    ch->level	= 1;
comm.c:	    ch->exp	= 0;
comm.c:	    ch->hit	= ch->max_hit;
comm.c:	    ch->mana	= ch->max_mana;
comm.c:	    ch->move	= ch->max_move;
comm.c:            ch->special = 0;
comm.c:	    set_switchname(ch, ch->name);
comm.c:	else if (!IS_NPC(ch) && ch->pcdata->obj_vnum != 0)
comm.c:	    if (ch->in_room != NULL) char_to_room( ch, ch->in_room );
comm.c:	else if ( ch->in_room != NULL )
comm.c:	    char_to_room( ch, ch->in_room );
comm.c:	sprintf( buf2, "%s has won %d QPS for being the %dth PLAYER!!!\n\r",ch->name, kingdom_table[7].deaths,kingdom_table[7].deaths );
comm.c:	ch->pcdata->quest += kingdom_table[7].deaths;
comm.c:	if ( ( ch->level >= 8 ) || ( ch->trust >= 8 ) )
comm.c:	    if ( 	str_cmp(ch->name,"Seth"		) && str_cmp(ch->name,"Nibbles"	     ) &&
comm.c:	    		str_cmp(ch->name,"Marisella"	) && str_cmp(ch->name,"Alesyira"     ) &&
comm.c:			str_cmp(ch->name,"Hutoshi"	) && str_cmp(ch->name,"Raziel"	     ) &&
comm.c:                        str_cmp(ch->name,"Chrono"       ) && str_cmp(ch->name,"Reaver"       ) &&
comm.c:                        str_cmp(ch->name,"Ghant" 	) && str_cmp(ch->name,"Silk"	     ) &&
comm.c:			str_cmp(ch->name,"Talyn"        ) && str_cmp(ch->name,"Hughes"      ) &&
comm.c:			str_cmp(ch->name,"Kabal"	) && str_cmp(ch->name,"Mavrick"	     ) &&
comm.c:			str_cmp(ch->name,"Serena"	) && str_cmp(ch->name,"Tracey" 	     ) &&
comm.c:			str_cmp(ch->name,"Mordecai"	) && str_cmp(ch->name,"Dertaherup"   ) &&
comm.c:			str_cmp(ch->name,"Beorn"        ))
comm.c:	        ch->level = 3;
comm.c:	        ch->trust = 3;
comm.c:        if (ch->level > 6) ; /* no info */
comm.c:        else if (IS_SET(ch->pcdata->jflags, JFLAG_SETLOGIN)) login_message(ch);
comm.c:  	  if (!ragnarok) sprintf(buf,"#2%s #7enters #R%s.#n", ch->name, MUDNAME);
comm.c:          else sprintf(buf,"#2%s #7enters #R%s #y(#0Ragnarok#y).#n", ch->name, MUDNAME);
comm.c:	ch->fight_timer = 0;
comm.c:        update_wizlist(ch,ch->level);
comm.c:      for ( obj = ch->carrying; obj != NULL; obj = obj->next_content)
comm.c:         sprintf(buf, "ITEM LIMIT BROKEN: %s has %d items on login.", ch->name, iCount);
comm.c:	    if (ch->power[i] > 10 && !IS_SET(ch->extra, EXTRA_FLASH) && !IS_SET(ch->extra, EXTRA_BAAL))
comm.c:		ch->power[i] = 10;
comm.c:	if( !IS_CLASS(ch, CLASS_DEMON) && !IS_IMMORTAL(ch) && ch->level > 2)
comm.c:	    ch->power[DISC_DAEM_ATTA] = -2;
comm.c:	    ch->power[DISC_DAEM_IMMU] = -2;
comm.c:	    ch->power[DISC_DAEM_TEMP] = -2;
comm.c:	    ch->power[DISC_DAEM_CORR] = -2;
comm.c:	    ch->power[DISC_DAEM_HELL] = -2;
comm.c:	    ch->power[DISC_DAEM_GELU] = -2;
comm.c:	    ch->power[DISC_DAEM_MORP] = -2;
comm.c:	    ch->power[DISC_DAEM_NETH] = -2;
comm.c:	    ch->power[DISC_DAEM_DISC] = -2;
comm.c:	if( !IS_CLASS(ch, CLASS_WEREWOLF) && !IS_IMMORTAL(ch) && ch->level > 2)
comm.c:	    ch->power[DISC_WERE_BEAR] = -2;
comm.c:	    ch->power[DISC_WERE_LYNX] = -2;
comm.c:	    ch->power[DISC_WERE_BOAR] = -2;
comm.c:	    ch->power[DISC_WERE_OWL]  = -2;
comm.c:	    ch->power[DISC_WERE_SPID] = -2;
comm.c:	    ch->power[DISC_WERE_WOLF] = -2;
comm.c:	    ch->power[DISC_WERE_HAWK] = -2;
comm.c:	    ch->power[DISC_WERE_MANT] = -2;
comm.c:	    ch->power[DISC_WERE_RAPT] = -2;
comm.c:	    ch->power[DISC_WERE_LUNA] = -2;
comm.c:	    ch->power[DISC_WERE_PAIN] = -2;
comm.c:	    ch->power[DISC_WERE_CONG] = -2;
comm.c:	if( !IS_CLASS(ch, CLASS_VAMPIRE) && !IS_IMMORTAL(ch) && ch->level > 2)
comm.c:	    ch->power[DISC_VAMP_FORT] = -2;
comm.c:	    ch->power[DISC_VAMP_CELE] = -2;
comm.c:	    ch->power[DISC_VAMP_OBTE] = -2;
comm.c:	    ch->power[DISC_VAMP_PRES] = -2;
comm.c:	    ch->power[DISC_VAMP_QUIE] = -2;
comm.c:	    ch->power[DISC_VAMP_THAU] = -2;
comm.c:	    ch->power[DISC_VAMP_AUSP] = -2;
comm.c:	    ch->power[DISC_VAMP_DOMI] = -2;
comm.c:	    ch->power[DISC_VAMP_OBFU] = -2;
comm.c:	    ch->power[DISC_VAMP_POTE] = -2;
comm.c:	    ch->power[DISC_VAMP_PROT] = -2;
comm.c:	    ch->power[DISC_VAMP_SERP] = -2;
comm.c:	    ch->power[DISC_VAMP_VICI] = -2;
comm.c:	    ch->power[DISC_VAMP_DAIM] = -2;
comm.c:	    ch->power[DISC_VAMP_ANIM] = -2;
comm.c:	    ch->power[DISC_VAMP_CHIM] = -2;
comm.c:	    ch->power[DISC_VAMP_MELP] = -2;
comm.c:	    ch->power[DISC_VAMP_NECR] = -2;
comm.c:	    ch->power[DISC_VAMP_THAN] = -2;
comm.c:	    ch->power[DISC_VAMP_OBEA] = -2;
comm.c:	ch->embraced=NULL; 
comm.c:        ch->embracing=NULL;
comm.c:	  if (( ch->level < 10 ) && (multiCh->level < 10))
comm.c:    	     sprintf( buf, "#rThese people are multiplaying: #R%s and %s#r. IP: #R%s#n", ch->name, multiCh->name, d->character->lasthost );
comm.c:	     make_note( "Immortal", ch->name, "imm", "Multiplay Watch", 5, buf );
comm.c://	     if ( !IS_SET(ch->act, PLR_DENY) )  SET_BIT(ch->act, PLR_DENY);
comm.c:		ch->name, echo_off_str );
comm.c:	pwdnew = crypt ( argument, ch->name );
comm.c:	free_string( ch->pcdata->pwd );
comm.c:	ch->pcdata->pwd	= str_dup( pwdnew );
comm.c:  if ( strcmp( crypt ( argument, ch->pcdata->pwd ), ch->pcdata->pwd ) )
comm.c:	case 'm': case 'M': ch->sex = SEX_MALE;    break;
comm.c:	case 'f': case 'F': ch->sex = SEX_FEMALE;  break;
comm.c:        SET_BIT(ch->immune, IMM_TRAVEL);
comm.c:	case 'y': case 'Y': SET_BIT(ch->act,PLR_ANSI);    break;
comm.c:	ch->pcdata->perm_str=1;
comm.c:        ch->pcdata->perm_int=1;
comm.c:        ch->pcdata->perm_wis=1;
comm.c:        ch->pcdata->perm_dex=1;
comm.c:	ch->pcdata->perm_con=1;
comm.c:	ch->class = 0;
comm.c:	sprintf( log_buf, "%s@%s  new player.",ch->name, d->host );
comm.c:	ch->next	= char_list;
comm.c:	ch->gnosis[GCURRENT] = ch->gnosis[GMAXIMUM] - 5;
comm.c:	if( ch->gnosis[GCURRENT] < 0 ) ch->gnosis[GCURRENT] = 0;
comm.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
comm.c:	if ( !IS_SET(ch->extra, EXTRA_TRUSTED) )
comm.c:		SET_BIT(ch->extra, EXTRA_TRUSTED);
comm.c:	if ( ch->level == 0 )
comm.c:            ch->pcdata->awins        = 0; /* arena wins           */
comm.c:            ch->pcdata->alosses      = 0; /* arena losses         */
comm.c:		ch->pcdata->board = &boards[0];
comm.c:            ch->gladiator       = NULL; /* set player to bet on to NULL */
comm.c:	    ch->challenger = NULL;
comm.c:	    ch->challenged = NULL;
comm.c:	    ch->level	= 1;
comm.c:            ch->generation = 6;
comm.c:            ch->stance[19] = -1;
comm.c:            ch->stance[20] = -1;
comm.c:            ch->stance[21] = -1;
comm.c:            ch->stance[22] = -1;
comm.c:            ch->stance[23] = -1;
comm.c:	    ch->exp	= 0;
comm.c:	    ch->hit	= ch->max_hit;
comm.c:	    ch->mana	= ch->max_mana;
comm.c:	    ch->move	= ch->max_move;
comm.c:            ch->special = 0;
comm.c:	    set_switchname(ch, ch->name);
comm.c:	else if (!IS_NPC(ch) && ch->pcdata->obj_vnum != 0)
comm.c:	    if (ch->in_room != NULL) char_to_room( ch, ch->in_room );
comm.c:	else if ( ch->in_room != NULL )
comm.c:	    char_to_room( ch, ch->in_room );
comm.c:	sprintf(buf,"#7A #Rnew player#7 named #2%s #7enters #R%s.#n", ch->name, MUDNAME );
comm.c:	SET_BIT(ch->act, PLR_BRIEF5);
comm.c:	SET_BIT(ch->act, PLR_BRIEF6);
comm.c://	SET_BIT(ch->act, PLR_SILENCE);
comm.c://	SET_BIT(ch->act, PLR_LOG);
comm.c:	ch->fight_timer = 0;
comm.c:        ch->pcdata->revision = CURRENT_REVISION;
comm.c:                sprintf(newbie,"Please remember to type help changes for a list of changes done. Have a good time %s.\n\r",ch->name);
comm.c:                sprintf(newbie,"We have added a few new help files %s. Help changes lists them under Modified help files.\n\r",ch->name);
comm.c:                sprintf(newbie,"If you have any questions %s, please feel free to ask the friendly staff and players.\n\r",ch->name);
comm.c:                sprintf(newbie,"Welcome to this dystopian mud %s. Please type help changes for a list of changes.\n\r",ch->name);
comm.c:                sprintf(newbie,"New to the world of dystopia? Walk North. A old timer? Help changes. Pleasant day to you %s.\n\r",ch->name);
comm.c:                sprintf(newbie,"Many new things have changed since the opening of this mud. Help changes %s and you will see what has changed.\n\r",ch->name);
comm.c:                sprintf(newbie,"You here to have a good time %s? Well, come on board and play with us.\n\r",ch->name);
comm.c:                sprintf(newbie,"Hey hey, Welcome there %s. Come join in and see a new way of playing.\n\r",ch->name);
comm.c:                sprintf(newbie,"May your stay be a delightful one %s.\n\r",ch->name);
comm.c:	SET_BIT    (ch->deaf, CHANNEL_FLAME);
comm.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
comm.c:	    if (ch->power[i] > 10)
comm.c:		ch->power[i] = 10;
comm.c:	    ch->power[DISC_DAEM_ATTA] = -2;
comm.c:	    ch->power[DISC_DAEM_IMMU] = -2;
comm.c:	    ch->power[DISC_DAEM_TEMP] = -2;
comm.c:	    ch->power[DISC_DAEM_CORR] = -2;
comm.c:	    ch->power[DISC_DAEM_HELL] = -2;
comm.c:	    ch->power[DISC_DAEM_GELU] = -2;
comm.c:	    ch->power[DISC_DAEM_MORP] = -2;
comm.c:	    ch->power[DISC_DAEM_NETH] = -2;
comm.c:	    ch->power[DISC_DAEM_DISC] = -2;
comm.c:	    ch->power[DISC_WERE_BEAR] = -2;
comm.c:	    ch->power[DISC_WERE_LYNX] = -2;
comm.c:	    ch->power[DISC_WERE_BOAR] = -2;
comm.c:	    ch->power[DISC_WERE_OWL]  = -2;
comm.c:	    ch->power[DISC_WERE_SPID] = -2;
comm.c:	    ch->power[DISC_WERE_WOLF] = -2;
comm.c:	    ch->power[DISC_WERE_HAWK] = -2;
comm.c:	    ch->power[DISC_WERE_MANT] = -2;
comm.c:	    ch->power[DISC_WERE_RAPT] = -2;
comm.c:	    ch->power[DISC_WERE_LUNA] = -2;
comm.c:	    ch->power[DISC_WERE_PAIN] = -2;
comm.c:	    ch->power[DISC_WERE_CONG] = -2;
comm.c:	    ch->power[DISC_VAMP_FORT] = -2;
comm.c:	    ch->power[DISC_VAMP_CELE] = -2;
comm.c:	    ch->power[DISC_VAMP_OBTE] = -2;
comm.c:	    ch->power[DISC_VAMP_PRES] = -2;
comm.c:	    ch->power[DISC_VAMP_QUIE] = -2;
comm.c:	    ch->power[DISC_VAMP_THAU] = -2;
comm.c:	    ch->power[DISC_VAMP_AUSP] = -2;
comm.c:	    ch->power[DISC_VAMP_DOMI] = -2;
comm.c:	    ch->power[DISC_VAMP_OBFU] = -2;
comm.c:	    ch->power[DISC_VAMP_POTE] = -2;
comm.c:	    ch->power[DISC_VAMP_PROT] = -2;
comm.c:	    ch->power[DISC_VAMP_SERP] = -2;
comm.c:	    ch->power[DISC_VAMP_VICI] = -2;
comm.c:	    ch->power[DISC_VAMP_DAIM] = -2;
comm.c:	    ch->power[DISC_VAMP_ANIM] = -2;
comm.c:	    ch->power[DISC_VAMP_CHIM] = -2;
comm.c:	    ch->power[DISC_VAMP_MELP] = -2;
comm.c:	    ch->power[DISC_VAMP_NECR] = -2;
comm.c:	    ch->power[DISC_VAMP_THAN] = -2;
comm.c:	    ch->power[DISC_VAMP_OBEA] = -2;
comm.c:	ch->embraced=NULL; 
comm.c:        ch->embracing=NULL;
comm.c:	  if ( ch->level < 13 )
comm.c:	  if ( !IS_SET(ch->act, PLR_DENY) ) SET_BIT(ch->act, PLR_DENY);
comm.c:  	  sprintf( buf, "#rI have denied #R%s#r. Reason: Multiplaying.#n", ch->name );
comm.c:	  make_note( "Immortal", ch->name, "imm", "Denied", 5, buf );
comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
comm.c:	&& ( !fConn || ch->desc == NULL )
comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:		ch->desc	 = d;
comm.c:		ch->timer	 = 0;
comm.c:	    	if (IS_NPC(ch) || ch->pcdata->obj_vnum == 0)
comm.c:		sprintf( log_buf, "%s@%s reconnected.",ch->name, ch->lasthost );
comm.c: 		if (ch->pcdata->in_progress)
comm.c:    for ( ch = char_list; ch != NULL; ch = ch->next )
comm.c:	&& ( !fConn || ch->desc == NULL )
comm.c:		d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:		ch->desc	 = d;
comm.c:		ch->timer	 = 0;
comm.c:		sprintf( log_buf, "%s@%s kicking off old link.", ch->name, ch->lasthost );
comm.c:    ||   ch->desc == NULL
comm.c:    ||   (ch->desc->connected != CON_PLAYING && ch->desc->connected != CON_EDITING)
comm.c:    ||   ch->was_in_room == NULL 
comm.c:    ||   ch->in_room != get_room_index( ROOM_VNUM_LIMBO ) )
comm.c:    ch->timer = 0;
comm.c:    char_to_room( ch, ch->was_in_room );
comm.c:    ch->was_in_room	= NULL;
comm.c:    if ( txt != NULL && ch->desc != NULL )
comm.c:	write_to_buffer( ch->desc, txt, strlen(txt) );
comm.c:    if ( ch->desc == NULL && IS_NPC(ch) && (wizard = ch->wizard) != NULL )
comm.c:	    && familiar == ch && ch->in_room != wizard->in_room)
comm.c:    if ( IS_SET(ch->extra,EXTRA_FRYBALLS) )
comm.c:    if ( txt != NULL && ch->desc != NULL )
comm.c:	write_to_buffer( ch->desc, buf, strlen(buf) );
comm.c:	if ( ch == NULL || ch->in_room == NULL)
comm.c:    to = ch->in_room->people;
comm.c:	if ( vch == NULL || vch->in_room == NULL)
comm.c:	to = vch->in_room->people;
comm.c:		if (to->in_room == ch->in_room && 
comm.c:    	if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_room != NULL &&
comm.c:	    	ch->in_room == to->in_room)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_obj != NULL &&
comm.c:	    	ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
comm.c:	    if (to->in_room != ch->in_room && familiar != NULL &&
comm.c:		familiar->in_room == ch->in_room)
comm.c:    to = ch->in_room->people;
comm.c:	if ( vch == NULL || vch->in_room == NULL)
comm.c:	to = vch->in_room->people;
comm.c:		if (to->in_room == ch->in_room && 
comm.c:    	if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_room != NULL &&
comm.c:	    	ch->in_room == to->in_room)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_obj != NULL &&
comm.c:	    	ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
comm.c:	    if (to->in_room != ch->in_room && familiar != NULL &&
comm.c:		familiar->in_room == ch->in_room)
comm.c:    to = ch->in_room->people;
comm.c:	to = vch->in_room->people;
comm.c:    	if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_room != NULL &&
comm.c:	    	ch->in_room == to->in_room)
comm.c:	    if (!IS_NPC(ch) && ch->pcdata->chobj != NULL && 
comm.c:	    	ch->pcdata->chobj->in_obj != NULL &&
comm.c:	    	ch->pcdata->chobj->in_obj == to->pcdata->chobj->in_obj)
comm.c:sprintf(class2,"%s the %s",ch->name,class);
comm.c:sprintf(header1,"%-30s Align:%-4d",class2,ch->alignment);
comm.c:   if ( ch->pcdata == NULL )
comm.c:   if ( ch->position == POS_FIGHTING && ch->cprompt[0] == '\0' )
comm.c:      if ( ch->prompt[0] == '\0' )
comm.c:   else if ( ch->position != POS_FIGHTING && ch->prompt[0] == '\0' )
comm.c:   if ( ch->position == POS_FIGHTING && is_fighting )
comm.c:            sprintf( buf2, "%d", ch->hit );
comm.c:            COL_SCALE(buf2, ch, ch->hit, ch->max_hit);
comm.c:            sprintf( buf2, "%d", ch->max_hit );
comm.c:            sprintf( buf2, "%d", ch->mana                              );
comm.c:            COL_SCALE(buf2, ch, ch->mana, ch->max_mana);
comm.c:            sprintf( buf2, "%d", ch->max_mana                          );
comm.c:            sprintf( buf2, "%d", ch->move                              ); 
comm.c:            COL_SCALE(buf2, ch, ch->move, ch->max_move);
comm.c:            sprintf( buf2, "%d", ch->max_move                          );
comm.c:            sprintf( buf2, "%d", ch->exp                               );
comm.c:            COL_SCALE(buf2, ch, ch->exp, 1000);
comm.c:            sprintf( buf2, "%d", ch->gold                              );
comm.c:            sprintf( buf2, "%d", ch->pcdata->quest                     );
comm.c:            if ( ( victim = ch->fighting ) == NULL )
comm.c:            if ( ( victim = ch->fighting ) == NULL )
comm.c:            if ( ( victim = ch->fighting ) == NULL )
comm.c:            if ( ( victim = ch->fighting ) == NULL )
comm.c:            sprintf( buf2, "%d", ch->alignment                      );
comm.c:            sprintf(buf2, "%d", ch->fight_timer			  );
comm.c:              sprintf(buf2, "%d", ch->pcdata->powers[SHAPE_COUNTER]);
comm.c:              sprintf(buf2,"%d", ch->pcdata->powers[SAMURAI_FOCUS]);
comm.c:            if( ch->in_room )
comm.c:               sprintf( buf2, "%s", ch->in_room->name                  );
comm.c:               sprintf( buf2, "%d", ch->rage);
comm.c:            sprintf( buf2, "%d", ch->beast );
comm.c:               sprintf( buf2, "%d", ch->pcdata->condition[COND_THIRST] );
comm.c:			   sprintf( buf2, "%d", ch->pcdata->condition[COND_FULL] );
comm.c:            if (!IS_NPC(ch) && ch->pcdata->stage[2]+25 >= ch->pcdata->stage[1]
comm.c:		&& ch->pcdata->stage[1] > 0)
comm.c:            if ( ( victim = ch->pcdata->partner ) == NULL )
comm.c:            if ( ( victim = ch->pcdata->partner ) == NULL )
const.c:	     (!str_prefix(slay_table[i].owner,ch->name)  &&
const.c:	      !str_prefix(slay_table[i].owner, ch->name) )
daemon.c:    if (ch->power[DISC_DAEM_NETH] < 2)
daemon.c:    if (IS_SET(ch->act, PLR_HOLYLIGHT))
daemon.c:	TOGGLE_BIT(ch->act, PLR_HOLYLIGHT);
daemon.c:    if (!IS_SET(ch->act, PLR_HOLYLIGHT))
daemon.c:	TOGGLE_BIT(ch->act, PLR_HOLYLIGHT);
daemon.c:    if (ch->power[DISC_DAEM_NETH] < 4)
daemon.c:	  ch->hit += dam;
daemon.c:	  if (ch->hit >= ch->max_hit + 500)
daemon.c:		ch->hit = ch->max_hit + 500;
daemon.c:	  sprintf(buf,"#1%s absorbed %d of your hitpoints!#n\n\r",ch->name,dam);
daemon.c:    if (!IS_DEMPOWER(ch, DEM_ENTOMB) && ch->power[DISC_DAEM_GELU] < 6)
daemon.c:    if (ch->in_room->sector_type == SECT_AIR)
daemon.c:	&& ch->level < 12)
daemon.c:    if ((objc = get_obj_list(ch,"walln",ch->in_room->contents)) != NULL) objc=NULL;
daemon.c:      obj_to_room(obj,ch->in_room);
daemon.c:    if ((objc = get_obj_list(ch,"walls",ch->in_room->contents)) != NULL) objc=NULL;
daemon.c:      obj_to_room(obj,ch->in_room);
daemon.c:    if ((objc = get_obj_list(ch,"walle",ch->in_room->contents)) != NULL) objc=NULL;
daemon.c:      obj_to_room(obj,ch->in_room);
daemon.c:    if ((objc = get_obj_list(ch,"wallw",ch->in_room->contents)) != NULL) objc=NULL;
daemon.c:      obj_to_room(obj,ch->in_room);
daemon.c:    ch->hit += ch->max_hit * 0.1;
daemon.c:       if (ch->hit > ch->max_hit)
daemon.c:		ch->hit = ch->max_hit;
daemon.c:    if (ch->power[DISC_DAEM_GELU] < 7)
daemon.c:    if (!TIME_UP(ch, TIMER_CAN_GUST) && ch->level < 120)
daemon.c:    if ( victim->size > ch->size)
daemon.c:    if ( !IS_NPC(ch) && number_percent( )/2 > ch->power[DISC_DAEM_GELU] + ch->generation)
daemon.c:    if (( pexit = ch->in_room->exit[door]) == NULL)
daemon.c:	dam = dice(victim->size*3+1, ch->power[DISC_DAEM_GELU] * 3);
daemon.c:	&&   pexit_rev->to_room == ch->in_room
daemon.c:	    dam = dice(victim->size*3+1, ch->power[DISC_DAEM_GELU] * 7);
daemon.c:	dam = dice(victim->size*3+1, ch->power[DISC_DAEM_GELU] * 5);
daemon.c:    if (!IS_DEMPOWER(ch, DEM_CAUST) && ch->power[DISC_DAEM_CORR] < 4)
daemon.c:    obj->value[1] += 10 - ch->generation;
daemon.c:    obj->value[2] += 10 - ch->generation;
daemon.c:  if (ch->power[DISC_DAEM_DISC] < 4)
daemon.c:  if (ch->in_room != NULL)
daemon.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
daemon.c:    if (ch->fighting != NULL)
daemon.c:    if (ch->fighting != NULL)
daemon.c:    if (!IS_DEMPOWER(ch, DEM_UNNERVE) && ch->power[DISC_DAEM_DISC] < 1)
daemon.c:    if (!IS_DEMPOWER(ch, DEM_FREEZEWEAPON) && ch->power[DISC_DAEM_GELU] < 1)
daemon.c:    if (ch->class == CLASS_DEMON)
daemon.c:	return ch->power[DISC_DAEM_MORP] - 1;
daemon.c:    if (ch->level == 12)
daemon.c:    if (ch->power[DISC_DAEM_HELL] < 8)
daemon.c:    if (ch->in_room->sector_type == SECT_AIR)
daemon.c:    if ( IS_SET(ch->in_room->room_flags,ROOM_SAFE) )
daemon.c:	&& ch->level < 12)
daemon.c:	if (ch->in_room->exit[door] != NULL)
daemon.c:	    make_wall(ch->in_room, door, EX_FIRE_WALL);
daemon.c:    if (ch->power[DISC_DAEM_HELL] < 7)
daemon.c:    if ( IS_SET(ch->in_room->room_flags,ROOM_SAFE) )
daemon.c:    obj->timer = ch->generation / 2 + dice(1,3);
daemon.c:    if( ch->power[DISC_DAEM_HELL] < 2 )
daemon.c:    if (!IS_DEMPOWER(ch, DEM_INFERNO) && ch->power[DISC_DAEM_HELL] < 3 )
daemon.c:	sprintf(buf,"You cannot use Inferno for another %d hours.\n\r",ch->tick_timer[TIMER_INFERNO] );
daemon.c:    if ( ch->hit > 0 )
daemon.c:    for (vch = ch->in_room->people; vch != NULL; vch = vch_next)
daemon.c:	    vch_next = vch->next_in_room;
daemon.c:		fire_effect(vch, ch->level, 2000, TARGET_CHAR);
daemon.c:    ch->hit = 10;
daemon.c:    if (ch->power[DISC_DAEM_ATTA] < 7)
daemon.c:    if (ch->fighting == NULL && argument[0] == '\0')
daemon.c:    if (ch->fighting == NULL)
daemon.c:	SET_BIT(ch->flag3, AFF3_BLINK_1ST_RD);
daemon.c:	ch->blinkykill = victim;
daemon.c:        SET_BIT(ch->affected_by2,EXTRA_BLINKY);
daemon.c:    victim = ch->fighting;
daemon.c:    SET_BIT(ch->flag3, AFF3_BLINK_2ND_RD);
daemon.c:    ch->blinkykill = victim;
daemon.c:    if (ch->power[DISC_DAEM_ATTA] < 5)
daemon.c:    if (IS_SET(ch->newbits, THIRD_HAND) && IS_SET(ch->newbits, FOURTH_HAND))
daemon.c:    if (!IS_SET(ch->newbits, FOURTH_HAND))
daemon.c:	SET_BIT(ch->newbits, FOURTH_HAND);
daemon.c:	SET_TIMER(ch, TIMER_FOURTH_ARM_GOING, dice(ch->generation, 6) );
daemon.c:    if (!IS_SET(ch->newbits, THIRD_HAND))
daemon.c:	SET_BIT(ch->newbits, THIRD_HAND);
daemon.c:	SET_TIMER(ch, TIMER_THIRD_ARM_GOING, dice(ch->generation, 6) );
daemon.c:	if ( ch->generation > 2 )
daemon.c:		    &&   d->character->generation > ch->generation
daemon.c:			    char_to_room( d->character, ch->in_room );
daemon.c:    if ( victim->generation <= ch->generation )
daemon.c:    if ( number_range(1, 10 - ch->generation) == 1 )
daemon.c:    char_to_room( victim, ch->in_room);
daemon.c:  if (ch->power[DISC_DAEM_GELU] < 2)
daemon.c:  if (ch->mana < 1000 || ch->move < 1000)
daemon.c:  if ((victim = ch->fighting) == NULL)
daemon.c:  ch->mana -= 1000;
daemon.c:  ch->move -= 1000;
daemon.c:    if (IS_CLASS(ch, CLASS_DEMON)) power = ch->power[DISC_DAEM_GELU];
daemon.c:	dam = (ch->generation + 5 * power+5) * 8;
daemon.c:	for (vch = ch->in_room->people; vch != NULL; vch = vch_next)
daemon.c:	    vch_next = vch->next_in_room;
daemon.c:	    &&   (ch->fighting != vch || vch->fighting != ch))
daemon.c:		cold_effect(vch,ch->explevel,dam,TARGET_CHAR);
daemon.c:    dam = ((10 - ch->generation +3) * power+3) * 20;
daemon.c:    cold_effect(victim,ch->explevel,dam,TARGET_CHAR);
db.c:	    for ( pch = char_list; pch != NULL; pch = pch->next )
db.c:		if ( !IS_NPC(pch) && IS_AWAKE(pch) && pch->in_room != NULL && pch->in_room->area == pArea )
db.c:    ch->name			= &str_empty[0];
db.c:    ch->short_descr		= &str_empty[0];
db.c:    ch->long_descr		= &str_empty[0];
db.c:    ch->description		= &str_empty[0];
db.c:    ch->lord			= &str_empty[0];
db.c:    ch->morph			= &str_empty[0];
db.c:    ch->createtime		= &str_empty[0];
db.c:    ch->lasthost		= &str_empty[0];
db.c:    ch->lasttime		= &str_empty[0];
db.c:    ch->powertype		= &str_empty[0];
db.c:    ch->poweraction		= &str_empty[0];
db.c:    ch->pload			= &str_empty[0];
db.c:    ch->prompt			= &str_empty[0];
db.c:    ch->cprompt			= &str_empty[0];
db.c:    ch->hunting			= &str_empty[0];
db.c:    ch->logon			= current_time;
db.c:    ch->armor			= 100;
db.c:    ch->position		= POS_STANDING;
db.c:    ch->practice		= 0;
db.c:    ch->hit			= 1000;
db.c:    ch->max_hit			= 1000;
db.c:    ch->mana			= 1500;
db.c:    ch->max_mana		= 1500;
db.c:    ch->move			= 1500;
db.c:    ch->max_move		= 1500;
db.c:    ch->master			= NULL;
db.c:    ch->leader			= NULL;
db.c:    ch->fighting		= NULL;
db.c:    ch->mount			= NULL;
db.c:    ch->wizard			= NULL;
db.c:    ch->paradox[0]              = 0;        
db.c:    ch->paradox[1]              = 0;        
db.c:    ch->paradox[2]              = 0;        
db.c:    ch->damcap[0]		= 1000;
db.c:    ch->damcap[1]		= 0;
db.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
db.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
db.c:    free_string( ch->name		);
db.c:    free_string( ch->short_descr	);
db.c:    free_string( ch->long_descr		);
db.c:    free_string( ch->description	);
db.c:    free_string( ch->lord 		);
db.c:    free_string( ch->morph 		);
db.c:    free_string( ch->createtime 	);
db.c:    free_string( ch->lasttime 		);
db.c:    free_string( ch->lasthost 		);
db.c:    free_string( ch->powertype 		);
db.c:    free_string( ch->poweraction 	);
db.c:    free_string( ch->pload 		);
db.c:    free_string( ch->prompt 		);
db.c:    free_string( ch->cprompt 		);
db.c:    free_string( ch->hunting		);
db.c:    if ( ch->pcdata != NULL )
db.c:        for (ali = ch->pcdata->alias; ali; ali = ali_next )
db.c:        free_string( ch->pcdata->switchname	);
db.c:        free_string( ch->pcdata->logoutmessage	);
db.c:        free_string( ch->pcdata->avatarmessage  );
db.c:        free_string( ch->pcdata->loginmessage   );
db.c:        free_string( ch->pcdata->decapmessage   );
db.c:        free_string( ch->pcdata->tiemessage     );
db.c:	free_string( ch->pcdata->pwd		);
db.c:	free_string( ch->pcdata->bamfin		);
db.c:	free_string( ch->pcdata->bamfout	);
db.c:	free_string( ch->pcdata->title		);
db.c:	free_string( ch->pcdata->conception	);
db.c:	free_string( ch->pcdata->parents	);
db.c:	free_string( ch->pcdata->cparents	);
db.c:	free_string( ch->pcdata->marriage	);
db.c:	ch->pcdata->next = pcdata_free;
db.c:	pcdata_free      = ch->pcdata;
db.c:    ch->next	     = char_free;
db.c:	    ch->in_room ? ch->in_room->vnum : 0, ch->name, str );
demon.c:	REMOVE_BIT(ch->immune, IMM_TRAVEL);
demon.c:	SET_BIT(ch->immune, IMM_TRAVEL);
demon.c:if (IS_SET(ch->warp, WARP_CBODY      )) send_to_char("Your body is protected by a indestructable crystal shell.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SBODY      )) send_to_char("Your skin is as hard as steel.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_STRONGARMS )) send_to_char("Your arms are incredibly strong.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_STRONGLEGS )) send_to_char("Your legs are incredibly strong.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_VENOMTONG  )) send_to_char("Your tongue is long and venomous.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SPIKETAIL  )) send_to_char("Your tail fires deadly spikes during combat.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_BADBREATH  )) send_to_char("Your breath is putrid and deadly.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_QUICKNESS  )) send_to_char("You have incredible speed.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_STAMINA    )) send_to_char("You have increased stamina, reducing the damage you take.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_HUNT       )) send_to_char("Your heightened senses enable you to hunt people.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_DEVOUR     )) send_to_char("You have the ability to devour your opponents, sending them into the pits of Hell.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_TERROR     )) send_to_char("Your features are so horrid that they may stun those who look at you.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_REGENERATE )) send_to_char("Your body has the ability to regenerate incredibly fast.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_STEED      )) send_to_char("Your mounts transform into hideous Demons.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_WEAPON     )) send_to_char("You have the power to transform into a deadly battle axe.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_INFIRMITY  )) send_to_char("Your body has been afflicted by a terrible infirmity.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_GBODY      )) send_to_char("Your skin is made of a fragile glass.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SCARED     )) send_to_char("You are incredibly scared of combat.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_MAGMA      )) send_to_char("Your body is composed of deadly magma.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_WEAK       )) send_to_char("Your muscles are severely weakened.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SLOW       )) send_to_char("Your body moves very slowly.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_VULNER     )) send_to_char("Your skin is very vulnerable to magic.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SHARDS     )) send_to_char("Your skin is covered with shards of ice.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_WINGS      )) send_to_char("A pair of leathery wings protrude from your back.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_CLUMSY     )) send_to_char("You are incredibly clumsy, enabling you to be disarmed.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_STUPID     )) send_to_char("Your intelligence is extremely low, preventing you from casting spells.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SPOON      )) send_to_char("There is a spoon stuck on your ear.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_FORK       )) send_to_char("You have a fork stuck in your nose.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_KNIFE      )) send_to_char("You have a knife hanging out of your ear.\n\r",ch);
demon.c:if (IS_SET(ch->warp, WARP_SALADBOWL  )) send_to_char("Your head is made out of a salad bowl.\n\r",ch);
demon.c:if (ch->warp < 1) send_to_char("You haven't obtained any warp powers.\n\r",ch);
demon.c:    if (ch->pcdata->stats[DEMON_TOTAL] < 15000 || 
demon.c:	ch->pcdata->stats[DEMON_CURRENT] < 15000)
demon.c:        if (ch->warpcount >= 18)
demon.c:    if (IS_SET(ch->warp, newwarp))
demon.c:    SET_BIT(ch->warp, newwarp);
demon.c:    ch->pcdata->stats[DEMON_CURRENT] -= 15000;
demon.c:    ch->warpcount += 1;
demon.c:    if (ch->pcdata->stats[DEMON_TOTAL] < cost || 
demon.c:	ch->pcdata->stats[DEMON_CURRENT] < cost)
demon.c:    if( !IS_CLASS(victim, CLASS_DEMON) && ch->practice < 100 )
demon.c:    ch->pcdata->stats[DEMON_CURRENT] -= cost;
demon.c:    if( !IS_CLASS(victim, CLASS_DEMON)) ch->practice -= 100;
demon.c:    if (ch->pcdata->upgrade_level >= 1)
demon.c:    if (ch->practice < 60)
demon.c:    ch->practice -= 60;
demon.c:    obj->questowner = str_dup(ch->pcdata->switchname);
demon.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
demon.c:    if( IS_CLASS(ch, CLASS_DEMON) && ch->power[DISC_DAEM_ATTA] < 4 )
demon.c:	REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_HORNS);
demon.c:    SET_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_HORNS);
demon.c:	REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_TAIL);
demon.c:    SET_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_TAIL);
demon.c:	REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_HOOVES);
demon.c:    SET_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_HOOVES);
demon.c:    if (!IS_DEMPOWER( ch, DEM_WINGS) && ch->power[DISC_DAEM_ATTA] < 5 && IS_CLASS(ch, CLASS_DEMON) )
demon.c:	    SET_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_UNFOLDED);
demon.c:	    REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_UNFOLDED);
demon.c:	    REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_UNFOLDED);
demon.c:	REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_WINGS);
demon.c:    SET_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_WINGS);
demon.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
demon.c:    if (ch->pcdata->powers[DPOWER_OBJ_VNUM] < 1)
demon.c:    if (ch->fight_timer>0)
demon.c:    obj_to_room(obj,ch->in_room);
demon.c:    ch->pcdata->obj_vnum = 33120;
demon.c:    ch->pcdata->chobj = obj;
demon.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
demon.c:    SET_BIT(ch->extra, EXTRA_OSWITCH);
demon.c:    free_string(ch->morph);
demon.c:    ch->morph = str_dup(obj->short_descr);
demon.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
demon.c:    ch->pcdata->obj_vnum = 0;
demon.c:    ch->pcdata->chobj = NULL;
demon.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
demon.c:    REMOVE_BIT(ch->extra, EXTRA_OSWITCH);
demon.c:    free_string(ch->morph);
demon.c:    ch->morph = str_dup("");
demon.c:    if (ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
demon.c:    for ( gch = char_list; gch != NULL; gch = gch->next )
demon.c:		capitalize( gch->name ),
demon.c:		gch->hit,gch->mana,gch->move,
demon.c:		gch->pcdata->stats[DEMON_CURRENT], gch->pcdata->stats[DEMON_TOTAL]);
demon.c:    if ( ( familiar = ch->pcdata->familiar ) != NULL ) 
demon.c:    char_to_room( victim, ch->in_room );
demon.c:    ch->pcdata->familiar = victim;
demon.c:	if ((victim = ch->fighting) == NULL)
demon.c:	if (ch->mana < 100) {
demon.c:    level = ch->spl[spelltype] * 1.0;
demon.c:	ch->mana = ch->mana - 100;
demon.c:if ( 60 > ch->practice)
demon.c:ch->practice   -= 60;
desc_map.c:  if (ch->level > 6)
desc_map.c:    sprintf( buf, "#0*===#y(#RImm#0#y)#0===*#n %s #0[#7%d#0]#n\n\r",ch->in_room->name,ch->in_room->vnum);
desc_map.c:    sprintf( buf, "#0*====#y(#R=#y)#0====*  %s#n\n\r",ch->in_room->name);
desc_map.c:    if (y == 0 && IS_SET(ch->act, PLR_AUTOEXIT))  // the autoexits
desc_map.c:  map[x][y].vnum = ch->in_room->vnum;
desc_map.c:  map_exits( ch, ch->in_room, x, y, 0 );
detox.c:        if (ch->class == 0)
detox.c:	else if (ch->level < 3)
detox.c:	else if (ch->in_room->vnum != 3206)
detox.c:	/*else if (ch->pcdata->quest < 1000)
detox.c:	/*else if (ch->spl[2] < 99)
detox.c:					REMOVE_BIT(ch->extra,EXTRA_DRAGON);
detox.c:				    ch->damroll = ch->damroll - 25;
detox.c:					ch->hitroll = ch->hitroll - 25;
detox.c:					free_string( ch->morph );
detox.c:					ch->morph = str_dup( "A big black monster" );
detox.c:			    REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
detox.c:				REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
detox.c:				ch->damroll = ch->damroll - 50;
detox.c:				ch->hitroll = ch->hitroll - 50; 
detox.c:				ch->generation =ch->generation +1;
detox.c:				REMOVE_BIT(ch->extra, EXTRA_POTENCY);
detox.c:				REMOVE_BIT(ch->newbits, NEW_TIDE);
detox.c:				ch->power[DISC_VAMP_POTE] -= 1;
detox.c:				ch->power[DISC_VAMP_CELE] -= 1;
detox.c:			    ch->power[DISC_VAMP_FORT] -=1;
detox.c:				REMOVE_BIT(ch->extra, EXTRA_BAAL);
detox.c:			    ch->power[DISC_VAMP_CELE] -= 1;
detox.c:				REMOVE_BIT(ch->extra, EXTRA_FLASH);
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
detox.c:				free_string( ch->morph );
detox.c:				ch->morph = str_dup( ch->name );
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
detox.c:				free_string( ch->morph );
detox.c:				ch->morph = str_dup( ch->name );
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
detox.c:			if (IS_SET(ch->newbits, NEW_MONKFLAME))
detox.c:				REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
detox.c:			if (IS_SET(ch->special, SPC_INCONNU))
detox.c:				REMOVE_BIT(ch->special, SPC_INCONNU );
detox.c:			if (IS_SET(ch->pcdata->stats[UNI_AFF], VAM_CHANGED))
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
detox.c:				REMOVE_BIT(ch->polyaff, POLY_MIST);
detox.c:				REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
detox.c:					REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FLYING);
detox.c:				    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_SONIC);
detox.c:					REMOVE_BIT(ch->polyaff, POLY_BAT);
detox.c:				    REMOVE_BIT(ch->polyaff, POLY_WOLF);
detox.c:					ch->max_hit = ch->max_hit - 500;
detox.c:				    ch->hit = ch->hit - 500;
detox.c:					if (ch->hit < 1)
detox.c:						ch->hit = 1;
detox.c:				    REMOVE_BIT(ch->polyaff, POLY_MIST);
detox.c:				    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
detox.c:				REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
detox.c:				REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CHANGED);
detox.c:  				free_string( ch->morph );
detox.c:    			ch->morph = str_dup( "" );
detox.c:			if (IS_SET(ch->special, SPC_DROW_WAR))
detox.c:				REMOVE_BIT(ch->special, SPC_DROW_WAR );
detox.c:			if (IS_SET(ch->special, SPC_DROW_MAG))
detox.c:				REMOVE_BIT(ch->special, SPC_DROW_MAG );
detox.c:			if (IS_SET(ch->special, SPC_DROW_CLE))
detox.c:				REMOVE_BIT(ch->special, SPC_DROW_CLE );
detox.c:			if (IS_SET(ch->affected_by, AFF_POLYMORPH))
detox.c:				REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
detox.c:			if (IS_SET(ch->newbits, NEW_DARKNESS))
detox.c:				REMOVE_BIT(ch->newbits, NEW_DARKNESS);
detox.c:				if (IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
detox.c:					REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
detox.c:			if (IS_SET(ch->newbits, NEW_DROWHATE))
detox.c:				REMOVE_BIT(ch->newbits, NEW_DROWHATE);
detox.c:			ch->pcdata->powers[DROW_POWER]     = 0;
detox.c:  			ch->pcdata->stats[DROW_TOTAL]      = 0;
detox.c:			ch->pcdata->stats[DROW_MAGIC]      = 0;
detox.c:			ch->pcdata->powers[1]              = 0;
detox.c:			if (IS_SET(ch->newbits, NEW_MONKFLAME))
detox.c:				REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
detox.c:		    if (IS_SET(ch->newbits, NEW_MONKADAM))
detox.c:				REMOVE_BIT(ch->newbits, NEW_MONKADAM);
detox.c:			if (IS_SET(ch->special, SPC_WOLFMAN))
detox.c:			if (IS_SET(ch->newbits, NEW_SCLAWS))
detox.c:				REMOVE_BIT(ch->newbits, NEW_SCLAWS);
detox.c:			if (IS_SET(ch->newbits, NEW_SLAM))
detox.c:				REMOVE_BIT(ch->newbits,NEW_SLAM);
detox.c:			if (IS_SET(ch->newbits, NEW_QUILLS))
detox.c:				REMOVE_BIT(ch->newbits,NEW_QUILLS);
detox.c:			if (IS_SET(ch->newbits, NEW_PERCEPTION))
detox.c:				REMOVE_BIT(ch->newbits,NEW_PERCEPTION);
detox.c:			if (IS_SET(ch->newbits, NEW_JAWLOCK))
detox.c:  				REMOVE_BIT(ch->newbits,NEW_JAWLOCK);
detox.c:			if (IS_SET(ch->newbits, NEW_REND))
detox.c:				REMOVE_BIT(ch->newbits,NEW_REND);
detox.c:				REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_HORNS);		
detox.c:				REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_HOOVES);
detox.c:					REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_UNFOLDED);
detox.c:				REMOVE_BIT(ch->pcdata->powers[DPOWER_CURRENT], DEM_WINGS);
detox.c:			ch->pcdata->powers[DPOWER_FLAGS]   = 0;
detox.c:		  	ch->pcdata->stats[DEMON_TOTAL]     = 0;
detox.c:			ch->pcdata->stats[DEMON_CURRENT]   = 0;
detox.c:			if (IS_SET(ch->newbits, THIRD_HAND))
detox.c:				REMOVE_BIT(ch->newbits, THIRD_HAND);
detox.c:			if (IS_SET(ch->newbits, FOURTH_HAND))
detox.c:				REMOVE_BIT(ch->newbits, FOURTH_HAND);
detox.c:			ch->pcdata->powers[NPOWER_SORA] = 0;
detox.c:			ch->pcdata->powers[NPOWER_CHIKYU] = 0;
detox.c:			ch->pcdata->powers[NPOWER_NINGENNO] = 0;
detox.c:ch->wpn[0] /= 2;
detox.c:ch->wpn[1] /= 2;
detox.c:ch->wpn[2] /= 2;
detox.c:ch->wpn[3] /= 2;
detox.c:ch->wpn[4] /= 2;
detox.c:ch->wpn[5] /= 2;
detox.c:ch->wpn[6] /= 2;
detox.c:ch->wpn[7] /= 2;
detox.c:ch->wpn[8] /= 2;
detox.c:ch->wpn[8] /= 2;
detox.c:ch->wpn[9] /= 2;
detox.c:ch->wpn[10] /= 2;
detox.c:ch->wpn[11] /= 2;
detox.c:ch->wpn[12] /= 2;
detox.c:ch->stance[STANCE_VIPER] /= 2;
detox.c:ch->stance[STANCE_CRANE] /= 2;
detox.c:ch->stance[STANCE_CRAB] /= 2;
detox.c:ch->stance[STANCE_MONGOOSE] /= 2;
detox.c:ch->stance[STANCE_BULL] /= 2;
detox.c:ch->stance[STANCE_MANTIS] /= 2;
detox.c:ch->stance[STANCE_DRAGON] /= 2;
detox.c:ch->stance[STANCE_TIGER] /= 2;
detox.c:ch->stance[STANCE_MONKEY] /= 2;
detox.c:ch->stance[STANCE_SWALLOW] /= 2;
detox.c:ch->stance[STANCE_SS1] /= 2;
detox.c:ch->stance[STANCE_SS2] /= 2;
detox.c:ch->stance[STANCE_SS3] /= 2;
detox.c:ch->stance[STANCE_SS4] /= 2;
detox.c:ch->stance[STANCE_SS5] /= 2;
detox.c:ch->spl[RED_MAGIC]    /= 2;
detox.c:ch->spl[PURPLE_MAGIC] /= 2;
detox.c:ch->spl[GREEN_MAGIC]  /= 2;
detox.c:ch->spl[BLUE_MAGIC]   /= 2;
detox.c:ch->spl[YELLOW_MAGIC] /= 2;
detox.c:REMOVE_BIT(ch->immune, IMM_DRAIN);
detox.c:REMOVE_BIT(ch->immune, IMM_VOODOO);
detox.c:REMOVE_BIT(ch->immune, IMM_SLASH);
detox.c:REMOVE_BIT(ch->immune, IMM_STAB);
detox.c:REMOVE_BIT(ch->immune, IMM_ANIMAL);
detox.c:REMOVE_BIT(ch->immune, IMM_SMASH);
detox.c:REMOVE_BIT(ch->immune, IMM_MISC);
detox.c:REMOVE_BIT(ch->immune, IMM_CHARM);
detox.c:REMOVE_BIT(ch->immune, IMM_HEAT);
detox.c:REMOVE_BIT(ch->immune, IMM_COLD);
detox.c:REMOVE_BIT(ch->immune, IMM_LIGHTNING);
detox.c:REMOVE_BIT(ch->immune, IMM_ACID);
detox.c:REMOVE_BIT(ch->immune, IMM_HURL);
detox.c:REMOVE_BIT(ch->immune, IMM_BACKSTAB);
detox.c:REMOVE_BIT(ch->immune, IMM_KICK);
detox.c:REMOVE_BIT(ch->immune, IMM_DISARM);
detox.c:REMOVE_BIT(ch->immune, IMM_STEAL);
detox.c:REMOVE_BIT(ch->immune, IMM_SLEEP);
detox.c:		if (IS_SET(ch->affected_by, AFF_ETHEREAL)    )
detox.c:			REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
detox.c:		if (IS_SET(ch->act, PLR_HOLYLIGHT) )
detox.c:			REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
detox.c:		if (IS_SET(ch->act, PLR_WIZINVIS) )
detox.c:			REMOVE_BIT(ch->act, PLR_WIZINVIS);
detox.c:			REMOVE_BIT(ch->affected_by,AFF_SHADOWPLANE);
detox.c:			REMOVE_BIT(ch->immune, IMM_SHIELDED);
detox.c:		ch->power[DISC_VAMP_CELE] = -1;
detox.c:		ch->power[DISC_VAMP_FORT] = -1;
detox.c:		ch->power[DISC_VAMP_OBTE] = -1;
detox.c:		ch->power[DISC_VAMP_PRES] = -1;
detox.c:		ch->power[DISC_VAMP_QUIE] = -1;
detox.c:		ch->power[DISC_VAMP_THAU] = -1;
detox.c:		ch->power[DISC_VAMP_AUSP] = -1;
detox.c:		ch->power[DISC_VAMP_DOMI] = -1;
detox.c:		ch->power[DISC_VAMP_OBFU] = -1;
detox.c:		ch->power[DISC_VAMP_POTE] = -1;
detox.c:		ch->power[DISC_VAMP_PROT] = -1;
detox.c:		ch->power[DISC_VAMP_SERP] = -1;
detox.c:		ch->power[DISC_VAMP_VICI] = -1;
detox.c:		ch->power[DISC_VAMP_DAIM] = -1;
detox.c:		ch->power[DISC_VAMP_ANIM] = -1;
detox.c:		ch->power[DISC_WERE_BEAR] = -1;
detox.c:		ch->power[DISC_WERE_LYNX] = -1;
detox.c:		ch->power[DISC_WERE_BOAR] = -1;
detox.c:		ch->power[DISC_WERE_OWL] = -1;
detox.c:		ch->power[DISC_WERE_SPID] = -1;
detox.c:		ch->power[DISC_WERE_WOLF] = -1;
detox.c:		ch->power[DISC_WERE_HAWK] = -1;
detox.c:		ch->power[DISC_WERE_MANT] = -1;
detox.c:		ch->power[DISC_WERE_RAPT] = -1;
detox.c:		ch->power[DISC_WERE_LUNA] = -1;
detox.c:		ch->power[DISC_WERE_PAIN] = -1;
detox.c:		ch->power[DISC_WERE_CONG] = -1;
detox.c:		ch->power[DISC_DAEM_HELL] = -1;
detox.c:		ch->power[DISC_DAEM_ATTA] = -1;
detox.c:		ch->power[DISC_DAEM_TEMP] = -1;
detox.c:		ch->power[DISC_DAEM_MORP] = -1;
detox.c:		ch->power[DISC_DAEM_CORR] = -1;
detox.c:		ch->power[DISC_DAEM_GELU] = -1;
detox.c:		ch->power[DISC_DAEM_DISC] = -1;
detox.c:		ch->power[DISC_DAEM_NETH] = -1;
detox.c:		ch->power[DISC_DAEM_IMMU] = -1;
detox.c:		ch->pcdata->stats[UNI_AFF]     = 0;
detox.c:		ch->pcdata->stats[UNI_CURRENT] = -1;
detox.c:		ch->max_move = 1000;
detox.c:		ch->max_mana = 1000;
detox.c:		ch->max_hit = 1000;
detox.c:                ch->mkill = 0;
detox.c:                ch->mdeath = 0;
detox.c:                ch->practice = 0;
detox.c:                ch->move = ch->max_move;    
detox.c:                ch->mana = ch->max_mana;    
detox.c:                ch->hit = ch->max_hit;
detox.c:		ch->pcdata->rank = 0;
detox.c:		ch->rage = 0;
detox.c:		ch->generation = 3;
detox.c:		ch->pcdata->upgrade_level--;
detox.c:		if (ch->pcdata->upgrade_level < 0) ch->pcdata->upgrade_level = 0;
detox.c:		if (IS_SET(ch->newbits, NEW_MASTERY) ) REMOVE_BIT(ch->newbits, NEW_MASTERY);
detox.c:    	free_string(ch->lord);
detox.c:    	ch->lord     = str_dup( "" );
detox.c:    	free_string(ch->clan);
detox.c:    	ch->clan     = str_dup( "" );
detox.c:    	ch->generation     = 6;
detox.c:	ch->hitroll = 0;
detox.c:	ch->damroll = 0;
detox.c:	ch->armor = 100;
detox.c:    	ch->beast = 15;
detox.c:    	ch->class = 0;
detox.c:    	ch->trust = 0;
detox.c:    	ch->level = 2;
detox.c:	ch->pcdata->quest -= 1000;
detox.c://	ch->pcdata->bloodpower[0] = 0;
detox.c://	ch->pcdata->bloodpower[1] = 0;
dragon.c:  if ( ch->practice < 150 )
dragon.c:    if (ch->pcdata->upgrade_level >= 1){
dragon.c:  obj->questowner = str_dup(ch->pcdata->switchname);
dragon.c:  ch->practice -= 150;
dragon.c:    if (ch->pcdata->classfour[DRAGON_SPIRIT] > 9)
dragon.c:    if (ch->exp < (ch->pcdata->classfour[DRAGON_SPIRIT]+1)*1000000)
dragon.c:    ch->pcdata->classfour[DRAGON_SPIRIT]++;
dragon.c:    ch->exp -= ch->pcdata->classfour[DRAGON_SPIRIT]*1000000;
dragon.c:    if (ch->pcdata->classfour[DRAGON_AGE] > 15)
dragon.c:    if (ch->exp < (ch->pcdata->classfour[DRAGON_AGE]+1)*1000000)
dragon.c:    ch->pcdata->classfour[DRAGON_AGE]++;
dragon.c:    ch->exp -= ch->pcdata->classfour[DRAGON_AGE]*1000000;
dragon.c:    if (ch->pcdata->classfour[DRAGON_WISDOM] > 7)
dragon.c:    if (ch->exp < (ch->pcdata->classfour[DRAGON_WISDOM]+1)*1000000)
dragon.c:    ch->pcdata->classfour[DRAGON_WISDOM]++;
dragon.c:    ch->exp -= ch->pcdata->classfour[DRAGON_WISDOM]*1000000;
dragon.c:    if (ch->pcdata->classfour[DRAGON_POWER] > 14)
dragon.c:    if (ch->exp < (ch->pcdata->classfour[DRAGON_POWER]+1)*1000000)
dragon.c:    ch->pcdata->classfour[DRAGON_POWER]++;
dragon.c:    ch->exp -= ch->pcdata->classfour[DRAGON_POWER]*1000000;
dragon.c:  if (ch->pcdata->classfour[DRAGON_POWER] < 3)
dragon.c:  if (ch->move < 250)
dragon.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
dragon.c:  if (victim->in_room->vnum == ch->in_room->vnum)
dragon.c:  ch->move -= 250;
dragon.c:	if (!IS_CLASS(ch, CLASS_DRAGON) || ch->pcdata->classfour[DRAGON_POWER] < 2)
dragon.c:      if( IS_SET(ch->pcdata->classfour[DRAGON_POWER], DRAG_CLAWS))
dragon.c:		REMOVE_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_CLAWS);
dragon.c:		REMOVE_BIT(ch->newbits, NEW_SCLAWS);
dragon.c:	        REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
dragon.c:		REMOVE_BIT(ch->newbits, NEW_REND);
dragon.c:		REMOVE_BIT( ch->garou1, WOLF_RAZORCLAWS );
dragon.c:	SET_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_CLAWS);
dragon.c:	SET_BIT(ch->newbits, NEW_SCLAWS);
dragon.c:	SET_BIT(ch->newbits, NEW_MONKFLAME);
dragon.c:	SET_BIT(ch->newbits, NEW_REND);
dragon.c:	SET_BIT( ch->garou1, WOLF_RAZORCLAWS );
dragon.c:	if (!IS_CLASS(ch, CLASS_DRAGON) || ch->pcdata->classfour[DRAGON_POWER] < 1)
dragon.c:      if( IS_SET(ch->pcdata->classfour[DRAGON_POWER], DRAG_WINGS))
dragon.c:		REMOVE_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_WINGS);
dragon.c:	SET_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_WINGS);
dragon.c:	if (!IS_CLASS(ch, CLASS_DRAGON) || ch->pcdata->classfour[DRAGON_POWER] < 5)
dragon.c:      if( IS_SET(ch->pcdata->classfour[DRAGON_POWER], DRAG_TAIL))
dragon.c:		REMOVE_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_TAIL);
dragon.c:	SET_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_TAIL);
dragon.c:    if (ch->pcdata->classfour[DRAGON_POWER] < 2)
dragon.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
dragon.c:	REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
dragon.c:	REMOVE_BIT(ch->newbits, NEW_PERCEPTION);
dragon.c:	SET_BIT(ch->act, PLR_HOLYLIGHT);
dragon.c:	SET_BIT(ch->newbits, NEW_PERCEPTION);
dragon.c:	ch->move -= 250;
dragon.c:    if (ch->pcdata->classfour[DRAGON_POWER] < 2)
dragon.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
dragon.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
dragon.c:    if (ch->pcdata->classfour[DRAGON_POWER] < 8)
dragon.c:    if ( !IS_SET(ch->polyaff, POLY_ZULOFORM) )
dragon.c:    if (ch->mounted == IS_RIDING) do_dismount(ch,"");
dragon.c:	SET_BIT(ch->polyaff, POLY_ZULOFORM);
dragon.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
dragon.c:        SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
dragon.c:	SET_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_TAIL);
dragon.c:	SET_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_WINGS);
dragon.c:	SET_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_CLAWS);
dragon.c:        ch->damroll += 3000;
dragon.c:        ch->hitroll += 3000;
dragon.c:        ch->armor   -= 3500;
dragon.c:       /* if (ch->pcdata->classfour[DRAGON_AGE] > 1)
dragon.c:         if (ch->pcdata->classfour[DRAGON_AGE] == 2)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 3)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 4)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 5)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 6)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 7)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 8)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 9)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 10)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 11)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 12)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 13)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 14)
dragon.c:         else if (ch->pcdata->classfour[DRAGON_AGE] == 15)
dragon.c:        sprintf(buf,"A young green dragon %s", ch->name);
dragon.c:        free_string( ch->morph );
dragon.c:        ch->morph = str_dup(buf);
dragon.c:	sprintf(buf, "#7The #yAncient #Ggreen#7 Dragon #y%s#n", ch->name);
dragon.c:	free_string( ch->morph );
dragon.c:    	ch->morph = str_dup( buf );
dragon.c:    else if ( IS_SET(ch->polyaff, POLY_ZULOFORM) )
dragon.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
dragon.c:	REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
dragon.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
dragon.c:	REMOVE_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_TAIL);
dragon.c:	REMOVE_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_WINGS);
dragon.c:	REMOVE_BIT(ch->pcdata->classfour[DRAGON_POWER], DRAG_CLAWS);
dragon.c:        ch->damroll -= 3000;
dragon.c:        ch->hitroll -= 3000;
dragon.c:        ch->armor   += 3500;
dragon.c:  	free_string( ch->morph );
dragon.c:    	ch->morph = str_dup( "" );
dragon.c:    if (ch->pcdata->classfour[DRAGON_POWER] < 6)
dragon.c:	dam = ((ch->hit) * .1);
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 7)  dam *= 1.2;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 8)  dam *= 1.4;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 9)  dam *= 1.6;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 10) dam *= 1.8;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 11) dam *= 2.0;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 12) dam *= 2.2;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 13) dam *= 2.4;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 14) dam *= 2.8;
dragon.c:	if (ch->pcdata->classfour[DRAGON_POWER] == 15) dam *= 3.0;
dragon.c:        if (ch->generation == 5) dam *= 1.05;
dragon.c:        if (ch->generation == 4) dam *= 1.10;
dragon.c:        if (ch->generation == 3) dam *= 1.15;
dragon.c:        if (ch->generation == 2) dam *= 1.20;
dragon.c:        if (ch->generation == 1) dam *= 1.25;
dragon.c:        if (ch->generation == 0) dam *= 1.30;
dragon.c:    ch->fighting = victim;
dragon.c:    ch->position = POS_FIGHTING;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 2)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 1)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 3)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 4)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 5)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 6)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 7)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 8)
dragon.c:  if ((victim = ch->fighting) == NULL)
dragon.c:  dam = ((ch->hit) * .05);
dragon.c:  if (ch->generation == 5) dam *=1.05;
dragon.c:  if (ch->generation == 4) dam *=1.07;
dragon.c:  if (ch->generation == 3) dam *=1.09;
dragon.c:  if (ch->generation == 2) dam *=1.10;
dragon.c:  if (ch->generation == 1) dam *=1.12;
dragon.c:  if (ch->generation == 0) dam *=1.20;
dragon.c:  if (ch->pcdata->classfour[DRAGON_POWER] < 9)
dragon.c:  if (!IS_SET(ch->newbits, NEW_JAWLOCK))
dragon.c:  SET_BIT(ch->newbits, NEW_JAWLOCK);
dragon.c:  else if (IS_SET(ch->newbits, NEW_JAWLOCK))
dragon.c:  REMOVE_BIT(ch->newbits,NEW_JAWLOCK);
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 6)
dragon.c:if (ch->fight_timer >0) {
dragon.c:    if ( IS_SET(ch->act, PLR_SUPERINVIS) )
dragon.c:        REMOVE_BIT(ch->act, PLR_SUPERINVIS);
dragon.c:	SET_BIT(ch->act,PLR_SUPERINVIS);
dragon.c:  if (ch->pcdata->classfour[DRAGON_SPIRIT] < 4)
dragon.c:        SET_BIT(ch->immune, IMM_SHIELDED);
dragon.c:    REMOVE_BIT(ch->immune, IMM_SHIELDED);
dragon.c:  if (ch->pcdata->classfour[DRAGON_POWER] < 3)
dragon.c:  if (!IS_SET(ch->newbits, NEW_SKIN))
dragon.c:  ch->armor -= 2000 ;
dragon.c:  SET_BIT(ch->newbits, NEW_SKIN);
dragon.c:  else if (IS_SET(ch->newbits, NEW_SKIN))
dragon.c:  ch->armor += 2000;
dragon.c:  REMOVE_BIT(ch->newbits,NEW_SKIN);
dragon.c:  if (ch->pcdata->classfour[DRAGON_WISDOM] < 6)
dragon.c:        obj->questmaker = str_dup(ch->name);
dragon.c:        obj->questmaker = str_dup(ch->name);
drow.c:  for ( gch = char_list; gch != NULL; gch = gch->next)
drow.c:    capitalize( gch->name ), gch->hit, gch->mana, gch->move, gch->generation);
drow.c:	IS_SET(victim->special, SPC_DROW_CLE)) && ch->level < 6 && ch->generation > 2)
drow.c:    if (ch->pcdata->stats[DROW_POWER] < cost) 
drow.c:    ch->pcdata->stats[DROW_POWER]   -= cost;
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || (!IS_SET(ch->special,
drow.c:	SPC_DROW_MAG) && ch->generation > 2)) {
drow.c:        if ((victim = ch->fighting) == NULL)
drow.c:        if (ch->mana < 750) {
drow.c:    level = ch->spl[spelltype]/3;
drow.c:        ch->mana = ch->mana - 750;
drow.c:       if (ch->pcdata->upgrade_level >= 1){
drow.c:    if ( ch->practice < 60)
drow.c:    ch->practice -= 60;
drow.c:    obj->questowner = str_dup(ch->pcdata->switchname);
drow.c:!IS_SET(ch->pcdata->powers[1],DPOWER_DROWFIRE)) {
drow.c:	if (ch->mana < 1000) {
drow.c:    level = ch->spl[spelltype] * 2.5;
drow.c:	ch->mana = ch->mana - 1000;
drow.c:	if (!IS_CLASS(ch, CLASS_DROW)) /* || (!IS_SET(ch->special,SPC_DROW_CLE) && ch->generation > 2)) */ 
drow.c:	if (ch->mana < 1250) {
drow.c:	ch->mana = ch->mana - 1250;
drow.c:	ch->hit = ch->hit + ch->spl[BLUE_MAGIC]*3;
drow.c:	if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
drow.c:    if (!IS_SET(ch->pcdata->powers[1],DPOWER_SHADOWWALK) && IS_CLASS(ch,CLASS_DROW))
drow.c://  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
drow.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
drow.c:	if (ch->move < 250) {
drow.c:	ch->move -= 250;
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_DROWHATE))
drow.c:	if (IS_SET(ch->newbits, NEW_DROWHATE)) {
drow.c:	REMOVE_BIT(ch->newbits, NEW_DROWHATE);
drow.c:	SET_BIT(ch->newbits, NEW_DROWHATE);
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_DARKTENDRILS))
drow.c:	if (IS_SET(ch->newbits, NEW_DARKTENDRILS)) {
drow.c:	REMOVE_BIT(ch->newbits, NEW_DARKTENDRILS);
drow.c:	SET_BIT(ch->newbits, NEW_DARKTENDRILS);
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_FIGHTDANCE))
drow.c:	if (IS_SET(ch->newbits, NEW_FIGHTDANCE)) {
drow.c:	REMOVE_BIT(ch->newbits, NEW_FIGHTDANCE);
drow.c:	SET_BIT(ch->newbits, NEW_FIGHTDANCE);
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) ||!IS_SET(ch->pcdata->powers[1], DPOWER_SPIDERFORM))
drow.c:      if (IS_SET(ch->newbits,NEW_DFORM))
drow.c:        free_string(ch->morph);
drow.c:        ch->morph = str_dup("");
drow.c:        ch->hitroll -= 3000;
drow.c:        ch->damroll -= 3000;
drow.c:        ch->armor   += 6000;
drow.c:        REMOVE_BIT(ch->newbits,NEW_DFORM);
drow.c:	REMOVE_BIT(ch->newbits,THIRD_HAND);
drow.c:	REMOVE_BIT(ch->newbits,FOURTH_HAND);
drow.c:      else if (!IS_SET(ch->newbits,NEW_DFORM))
drow.c:        sprintf(buf,"%s the giant mylochar",ch->name);
drow.c:        free_string(ch->morph);
drow.c:        ch->morph = str_dup(buf);
drow.c:        ch->hitroll += 3000;
drow.c:        ch->damroll += 3000;
drow.c:        ch->armor   -= 6000;
drow.c:        SET_BIT(ch->newbits,NEW_DFORM);
drow.c:	SET_BIT(ch->newbits,THIRD_HAND);
drow.c:	SET_BIT(ch->newbits,FOURTH_HAND);
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1],DPOWER_DROWSIGHT)) {
drow.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
drow.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
drow.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_DROWSHIELD)) {
drow.c:        SET_BIT(ch->immune, IMM_SHIELDED);
drow.c:    REMOVE_BIT(ch->immune, IMM_SHIELDED);
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_SPEED))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_TOUGHSKIN))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DROWFIRE))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DARKNESS))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DROWSIGHT))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_LEVITATION))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DROWSHIELD))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DROWPOISON))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_SHADOWWALK))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_GAROTTE)) 
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DGAROTTE))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_ARMS))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DROWHATE))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_SPIDERFORM))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_WEB))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_GLAMOUR))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_CONFUSE))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_EARTHSHATTER))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_DARKTENDRILS))
drow.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_FIGHTDANCE))
drow.c:	if (IS_SET(ch->special, SPC_DROW_WAR))
drow.c:	if (IS_SET(ch->special, SPC_DROW_MAG))
drow.c:	if (IS_SET(ch->special, SPC_DROW_CLE))
drow.c:        ch->pcdata->stats[DROW_POWER] );
drow.c:        ch->pcdata->stats[DROW_MAGIC] );
drow.c:        || (!IS_SET(ch->pcdata->powers[1], DPOWER_DARKNESS) && !IS_CLASS(ch, CLASS_DROID)))
drow.c:	if (ch->fight_timer>0) {
drow.c:	if (IS_SET(ch->newbits, NEW_DARKNESS)) {
drow.c:	REMOVE_BIT(ch->newbits, NEW_DARKNESS);
drow.c:	if (ch->in_room != NULL)
drow.c:	if (IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
drow.c:	REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
drow.c:	if (ch->mana < 500) {
drow.c:	ch->mana -= 500;
drow.c:	if (IS_SET(ch->extra, TIED_UP)) {
drow.c:		REMOVE_BIT(ch->extra, TIED_UP);
drow.c:		REMOVE_BIT(ch->affected_by, AFF_WEBBED);
drow.c:	SET_BIT(ch->newbits, NEW_DARKNESS);
drow.c:	if (!IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
drow.c:	SET_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
drow.c:	if (IS_CLASS(ch,CLASS_DROW) && !IS_SET(ch->pcdata->powers[1],DPOWER_GLAMOUR)) {
drow.c:	obj->questmaker = str_dup(ch->name);
drow.c:	obj->questmaker = str_dup(ch->name);
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_CONFUSE)) {
drow.c:	if ((victim = ch->fighting) == NULL) {
drow.c:	if (ch->move < 75) {
drow.c:	ch->move -=75;
drow.c:	if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_EARTHSHATTER)) {
drow.c:	if (ch->mana < 150) {
drow.c:	level = ch->spl[PURPLE_MAGIC];
drow.c:	ch->mana -= 150;
drow.c:    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
drow.c:        vch_next = vch->next_in_room;
drow.c:        if (vch->trust>6) continue;
drunk.c:        drunklevel = ch->pcdata->condition[COND_DRUNK];
economy.c:	if ( !str_cmp(Command,"ImmList") && ch->level > 4)
economy.c:	else if ( !str_cmp(Command,"Reset") && ch->level > 12)
economy.c:	else if ( !str_cmp(Command,"Totalreset") && ch->level > 12)
economy.c:	else if ( !str_cmp(Command,"Save" ) && ch->level > 12 )
economy.c:	else if ( !str_cmp(Command,"Load") && ch->level > 12)
economy.c:		if ( ch->exp < economy_table[nBankNumber].nExpRate )
economy.c:				ch->exp,economy_table[nBankNumber].nExpRate,economy_table[nBankNumber].nExpRate-ch->exp);
economy.c:		if ( ch->practice < economy_table[nBankNumber].nPrimalRate )
economy.c:				ch->practice,economy_table[nBankNumber].nPrimalRate,economy_table[nBankNumber].nPrimalRate-ch->practice);
economy.c:		if ( ch->pcdata->quest < economy_table[nBankNumber].nQuestRate )
economy.c:				ch->pcdata->quest,economy_table[nBankNumber].nQuestRate,economy_table[nBankNumber].nQuestRate-ch->pcdata->quest);
economy.c:		if ( ch->exp > ( 2100000000 - economy_table[nBankNumber].nExpRate )  )
economy.c:		if ( ( ch->practice + economy_table[nBankNumber].nPrimalAmount ) > 10000 )
economy.c:		if ( ch->pcdata->quest > ( 2100000000 - economy_table[nBankNumber].nQuestRate ) )
economy.c:		ch->exp -= economy_table[nBankNumber].nExpRate;
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		ch->practice -= economy_table[nBankNumber].nPrimalRate;
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		ch->pcdata->quest -= economy_table[nBankNumber].nQuestRate;
economy.c:		ch->pcdata->questtotal -= economy_table[nBankNumber].nQuestRate/2;
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		ch->exp += economy_table[nBankNumber].nExpRate;
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		ch->practice += economy_table[nBankNumber].nPrimalRate;
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		ch->pcdata->quest += economy_table[nBankNumber].nQuestRate;
economy.c:		ch->pcdata->questtotal += economy_table[nBankNumber].nQuestRate/2;
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name);
economy.c:		economy_table[nBankNumber].caLastPerson = str_dup(ch->name); 
economy.c:			return ch->pcdata->stats[DEMON_CURRENT];
economy.c:			return ch->pcdata->stats[DROID_POWER];
economy.c:			return ch->pcdata->stats[KAHN_CURRENT];
economy.c:			return ch->pcdata->stats[TPOINTS];
economy.c:			return ch->pcdata->stats[DROW_POWER];
economy.c:			ch->pcdata->stats[DEMON_CURRENT] -= nAmount;
economy.c:			ch->pcdata->stats[DROID_POWER] -= nAmount;
economy.c:			ch->pcdata->stats[KAHN_CURRENT] -= nAmount;
economy.c:			ch->pcdata->stats[TPOINTS] -= nAmount;
economy.c:			ch->pcdata->stats[DROW_POWER] -= nAmount;
economy.c:			ch->pcdata->stats[DEMON_CURRENT] += nAmount;
economy.c:			ch->pcdata->stats[KAHN_CURRENT] += nAmount;
economy.c:			ch->pcdata->stats[DROID_POWER] += nAmount;
economy.c:			ch->pcdata->stats[TPOINTS] += nAmount;
economy.c:			ch->pcdata->stats[DROW_POWER] += nAmount;
economy.c:	if ( str_cmp(ch->name,"Seth" ) ) return;
elf.c:  if( ch->move < 500) 
elf.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
elf.c:  if (victim->in_room == ch->in_room)
elf.c:  ch->move -= 500;
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] < 1 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 1 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 2 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 3 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 4 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 5 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 6 )
elf.c:    if ( ch->pcdata->classtwo[ELF_GEN] >= 7 )
elf.c:    cost = (ch->pcdata->classtwo[improve]) * 500;
elf.c:    if ( ch->pcdata->classtwo[improve] >= max )
elf.c:    if ( cost > ch->practice )
elf.c:    ch->pcdata->classtwo[improve] += 1;
elf.c:    ch->practice -= cost;
elf.c:    if (!IS_SET(ch->special, SPC_ELF_MAGE))
elf.c:	ch->pcdata->classtwo[ELF_GREENSTONE], ch->pcdata->classtwo[ELF_REDSTONE],
elf.c:	ch->pcdata->classtwo[ELF_BLUESTONE]);
elf.c:	    if (ch->pcdata->classtwo[ELF_GREENSTONE] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_GREENSTONE] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_GREENSTONE] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_GREENSTONE] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_REDSTONE] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_REDSTONE] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_REDSTONE] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_REDSTONE] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_BLUESTONE] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_BLUESTONE] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_BLUESTONE] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_BLUESTONE] > 2) 
elf.c:	ch->pcdata->classtwo[ELF_GREENSTONE], ch->pcdata->classtwo[ELF_REDSTONE],
elf.c:	ch->pcdata->classtwo[ELF_BLUESTONE]);
elf.c:	cost = (ch->pcdata->classtwo[improve]+1) * 500;
elf.c:	if ( ch->pcdata->classtwo[improve] >= max )
elf.c:	if ( cost > ch->practice )
elf.c:	ch->pcdata->classtwo[improve] += 1;
elf.c:	ch->practice -= cost;
elf.c:    if (!IS_SET(ch->special, SPC_ELF_WARRIOR))
elf.c:	ch->pcdata->classtwo[ELF_WAR_FURY], ch->pcdata->classtwo[ELF_WAR_RAGE],
elf.c:	ch->pcdata->classtwo[ELF_WAR_TECH]);
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_FURY] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_FURY] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_FURY] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_FURY] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_FURY] > 3) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_FURY] > 4) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_RAGE] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 3) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 4) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_TECH] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_TECH] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_TECH] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_TECH] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_TECH] > 3) 
elf.c:	    if (ch->pcdata->classtwo[ELF_WAR_TECH] > 4) 
elf.c:	ch->pcdata->classtwo[ELF_WAR_FURY], ch->pcdata->classtwo[ELF_WAR_RAGE],
elf.c:	ch->pcdata->classtwo[ELF_WAR_TECH]);
elf.c:	cost = (ch->pcdata->classtwo[improve]+1) * 500;
elf.c:	if ( ch->pcdata->classtwo[improve] >= max )
elf.c:	if ( cost > ch->practice )
elf.c:	ch->pcdata->classtwo[improve] += 1;
elf.c:	ch->practice -= cost;
elf.c:    if (!IS_SET(ch->special, SPC_ELF_ARCHER))
elf.c:	ch->pcdata->classtwo[ELF_ARC_FIREARROW], ch->pcdata->classtwo[ELF_ARC_ICEARROW],
elf.c:	ch->pcdata->classtwo[ELF_ARC_LIGHTARROW], ch->pcdata->classtwo[ELF_ARC_ARCPOWER]);
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 3) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 4) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 3) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 4) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 3) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 4) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] < 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] > 0) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] > 1) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] > 2) 
elf.c:	    if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] > 3) 
elf.c:	ch->pcdata->classtwo[ELF_ARC_FIREARROW], ch->pcdata->classtwo[ELF_ARC_ICEARROW],
elf.c:	ch->pcdata->classtwo[ELF_ARC_LIGHTARROW], ch->pcdata->classtwo[ELF_ARC_ARCPOWER]);
elf.c:	cost = (ch->pcdata->classtwo[improve]+1) * 500;
elf.c:	if ( ch->pcdata->classtwo[improve] >= max )
elf.c:	if ( cost > ch->practice )
elf.c:	ch->pcdata->classtwo[improve] += 1;
elf.c:	ch->practice -= cost;
elf.c:  if (IS_SET(ch->special, SPC_ELF_MAGE) || IS_SET(ch->special, SPC_ELF_WARRIOR)
elf.c:	|| IS_SET(ch->special, SPC_ELF_ARCHER))
elf.c:	SET_BIT(ch->special, SPC_ELF_MAGE);
elf.c:	SET_BIT(ch->special, SPC_ELF_WARRIOR);
elf.c:	SET_BIT(ch->special, SPC_ELF_ARCHER);
elf.c:    if (IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_GEN] < 1 )
elf.c:	if (ch->move < 500)
elf.c:	if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
elf.c:	    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
elf.c:	    SET_BIT(ch->act, PLR_HOLYLIGHT);
elf.c:	    ch->move -= 500; 
elf.c:	if (ch->move < 500)
elf.c:	    REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
elf.c:	    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || ch->pcdata->classtwo[ELF_GEN] < 2) 
elf.c:    chroom = ch->in_room;
elf.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
elf.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
elf.c:	SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
elf.c:	REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
elf.c:    if (!IS_NPC(victim)) ch->fight_timer += 5;
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || ch->pcdata->classtwo[ELF_GEN] < 3) 
elf.c:	spell_identify( skill_lookup( "identify" ), ch->level, ch, obj );
elf.c:	if (IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_GEN] < 5 )
elf.c:	if (ch->move < 5000)
elf.c:      if (ch->fight_timer >0) 
elf.c:    if ( IS_SET(ch->act, PLR_SUPERINVIS) )
elf.c:	REMOVE_BIT(ch->act, PLR_SUPERINVIS);
elf.c:	ch->move -= 5000;
elf.c:      SET_BIT(ch->act,PLR_SUPERINVIS);
elf.c:    if (IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_GEN] < 6 )
elf.c:    if( IS_SET(ch->pcdata->classtwo[ELF_GEN], ELVEN_STRENGTH))
elf.c:	REMOVE_BIT(ch->pcdata->classtwo[ELF_GEN], ELVEN_STRENGTH);
elf.c:	ch->damroll -= 100;
elf.c:	ch->hitroll -= 100;
elf.c:	ch->armor   += 300;
elf.c:    else if( !IS_SET(ch->pcdata->classtwo[ELF_GEN], ELVEN_STRENGTH))
elf.c:	SET_BIT(ch->pcdata->classtwo[ELF_GEN], ELVEN_STRENGTH);
elf.c:	ch->damroll += 100;
elf.c:	ch->hitroll += 100;
elf.c:	ch->armor   -= 300;
elf.c:    if (ch->pcdata->upgrade_level >= 1){
elf.c:    if ( ch->practice < 60)
elf.c:    ch->practice -= 60;
elf.c:    obj->questowner = str_dup(ch->pcdata->switchname);
elf.c:  if(!IS_CLASS(ch, CLASS_ELF) || !IS_SET(ch->special, SPC_ELF_MAGE))
elf.c:  if(ch->pcdata->classtwo[ELF_GREENSTONE] < 1)
elf.c:  for(obj = ch->carrying; obj != NULL; obj = obj->next_content)
elf.c:  if(ch->mana < 1000)
elf.c:  dam = ch->spl[GREEN_MAGIC]*2;
elf.c:  ch->mana -= 1000;
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if (ch->pcdata->classtwo[ELF_GREENSTONE] < 2)
elf.c:    ch->hit = UMIN(ch->hit + (ch->spl[GREEN_MAGIC] * 2.5), ch->max_hit);
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if (ch->pcdata->classtwo[ELF_GREENSTONE] < 3)
elf.c:    spell = ch->spl[GREEN_MAGIC];
elf.c:    if (ch->pcdata->followers > 1)
elf.c:    ch->pcdata->followers++;
elf.c:      victim->name=str_dup(ch->name);
elf.c:      victim->short_descr=str_dup(ch->name);
elf.c:      victim->long_descr=str_dup(ch->name);
elf.c:    char_to_room( victim, ch->in_room );
elf.c:  if(!IS_CLASS(ch, CLASS_ELF) || !IS_SET(ch->special, SPC_ELF_MAGE))
elf.c:  if(ch->pcdata->classtwo[ELF_REDSTONE] < 1)
elf.c:  for(obj = ch->carrying; obj != NULL; obj = obj->next_content)
elf.c:  if(ch->mana < 1000)
elf.c:  dam = ch->spl[RED_MAGIC]*2;
elf.c:  ch->mana -= 1000;
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if (ch->pcdata->classtwo[ELF_REDSTONE] < 2)
elf.c:    if (!IS_SET(ch->pcdata->classtwo[ELF_REDSTONE], ELFSTONE_FLAMERING))
elf.c:	SET_BIT(ch->pcdata->classtwo[ELF_REDSTONE], ELFSTONE_FLAMERING);
elf.c:    else if (IS_SET(ch->pcdata->classtwo[ELF_REDSTONE], ELFSTONE_FLAMERING))
elf.c:	REMOVE_BIT(ch->pcdata->classtwo[ELF_REDSTONE], ELFSTONE_FLAMERING);
elf.c:	if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if (ch->pcdata->classtwo[ELF_REDSTONE] < 3)
elf.c:	if( IS_SET(ch->affected_by2, AFF_FIRECURSE))
elf.c:	if (ch->mana < 1000) 
elf.c:      dam=ch->spl[RED_MAGIC]*2;
elf.c:	if (!IS_SET(ch->affected_by2, AFF_FIRECURSE))
elf.c:	SET_BIT( ch->affected_by2, AFF_FIRECURSE);
elf.c:	ch->mana = ch->mana - 1000;
elf.c:  if(!IS_CLASS(ch, CLASS_ELF) || !IS_SET(ch->special, SPC_ELF_MAGE))
elf.c:  if(ch->pcdata->classtwo[ELF_BLUESTONE] < 1)
elf.c:  for(obj = ch->carrying; obj != NULL; obj = obj->next_content)
elf.c:  if(ch->mana < 1000)
elf.c:  dam = ch->spl[BLUE_MAGIC]*2;
elf.c:  ch->mana -= 1000;
elf.c:	if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if (ch->pcdata->classtwo[ELF_BLUESTONE] < 2)
elf.c:    if (ch->in_room->sector_type == SECT_AIR)
elf.c:	&& ch->level < 12)
elf.c:    if ((objc = get_obj_list(ch,"walln",ch->in_room->contents)) != NULL) objc=NULL;
elf.c:      obj_to_room(obj,ch->in_room);
elf.c:    if ((objc = get_obj_list(ch,"walls",ch->in_room->contents)) != NULL) objc=NULL;
elf.c:      obj_to_room(obj,ch->in_room);
elf.c:    if ((objc = get_obj_list(ch,"walle",ch->in_room->contents)) != NULL) objc=NULL;
elf.c:      obj_to_room(obj,ch->in_room);
elf.c:    if ((objc = get_obj_list(ch,"wallw",ch->in_room->contents)) != NULL) objc=NULL;
elf.c:      obj_to_room(obj,ch->in_room);
elf.c:    if ((objc = get_obj_list(ch,"wallu",ch->in_room->contents)) != NULL) objc=NULL;
elf.c:      obj_to_room(obj,ch->in_room);
elf.c:    if ((objc = get_obj_list(ch,"walld",ch->in_room->contents)) != NULL) objc=NULL;
elf.c:      obj_to_room(obj,ch->in_room);
elf.c:    ch->hit += ch->max_hit * 0.1;
elf.c:       if (ch->hit > ch->max_hit)
elf.c:		ch->hit = ch->max_hit;
elf.c:   if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:   if ( ch->pcdata->classtwo[ELF_BLUESTONE] < 3 )
elf.c:   if ( IS_SET(ch->in_room->room_flags, ROOM_SAFE) )
elf.c:	vch_next	= vch->next;
elf.c:	if ( vch->in_room == NULL )
elf.c:	if ( !IS_NPC(vch) && vch->pcdata->chobj != NULL )
elf.c:	if ( vch->in_room == ch->in_room )
elf.c:	    if ( ( mount = ch->mount ) != NULL )
elf.c:	      if ( number_range( 1, (5 - ch->pcdata->classtwo[ELF_BLUESTONE])) == 2 )
elf.c:		vch->position = POS_STUNNED;
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:    if (ch->pcdata->quest < 2000)
elf.c:    ch->pcdata->quest -= 2000;
elf.c:    obj->questowner = str_dup(ch->pcdata->switchname);
elf.c:  if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:  if ((victim = ch->fighting) == NULL)
elf.c:dam = ch->spl[RED_MAGIC];
elf.c:dam += ch->spl[BLUE_MAGIC];
elf.c:dam += ch->spl[YELLOW_MAGIC];
elf.c:dam += ch->spl[GREEN_MAGIC];
elf.c:dam += ch->spl[PURPLE_MAGIC];
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if( IS_SET(ch->affected_by2, AFF_EARTHBLESS))
elf.c:	if (!IS_SET(ch->affected_by2, AFF_EARTHBLESS))
elf.c:	SET_BIT( ch->affected_by2, AFF_EARTHBLESS);
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if( IS_SET(ch->affected_by2, AFF_FIREBLESS))
elf.c:	if (!IS_SET(ch->affected_by2, AFF_FIREBLESS))
elf.c:	SET_BIT( ch->affected_by2, AFF_FIREBLESS);
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if( IS_SET(ch->affected_by2, AFF_WATERBLESS))
elf.c:	if (!IS_SET(ch->affected_by2, AFF_WATERBLESS))
elf.c:	SET_BIT( ch->affected_by2, AFF_WATERBLESS);
elf.c:    if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_MAGE)))
elf.c:	if( IS_SET(ch->affected_by2, AFF_FIRECURSE))
elf.c:	if (!IS_SET(ch->affected_by2, AFF_FIRECURSE))
elf.c:	SET_BIT( ch->affected_by2, AFF_FIRECURSE);
elf.c:  if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_WARRIOR)))
elf.c:  if (ch->pcdata->classtwo[ELF_WAR_TECH] < 4) 
elf.c:  if ((victim = ch->fighting) == NULL)
elf.c:  if (ch->pcdata->classtwo[ELF_WAR_TECH] < 2)
elf.c:  if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_WARRIOR)))
elf.c:  spell = ch->spl[RED_MAGIC];
elf.c:  if (ch->pcdata->classtwo[ELF_WAR_TECH] < 5) 
elf.c:  if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_ARCHER)))
elf.c:  if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] < 3)
elf.c:  if ((victim = ch->fighting) == NULL)
elf.c:  if (ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 0)
elf.c:  if (ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 0)
elf.c:  if (ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 0)
elf.c:  if (!IS_CLASS(ch, CLASS_ELF) || (!IS_SET(ch->special,SPC_ELF_ARCHER)))
elf.c:  if (ch->pcdata->classtwo[ELF_ARC_ARCPOWER] < 4) 
elf.c:  if (IS_SET(ch->pcdata->classtwo[ELF_ARC_ARCPOWER], ARCHERS_RAGE))
elf.c:    ch->hitroll -= 250;
elf.c:    ch->damroll -= 250;
elf.c:    REMOVE_BIT(ch->pcdata->classtwo[ELF_ARC_ARCPOWER], ARCHERS_RAGE);
elf.c:    ch->damroll += 250;
elf.c:    ch->hitroll += 250;
elf.c:    SET_BIT(ch->pcdata->classtwo[ELF_ARC_ARCPOWER], ARCHERS_RAGE);
fight.c:  for ( ch = char_list; ch != NULL; ch = ch->next )
fight.c:    victim = ch->blinkykill;
fight.c:    if (IS_SET(ch->flag3, AFF3_BLINK_1ST_RD))
fight.c:      REMOVE_BIT(ch->flag3, AFF3_BLINK_1ST_RD);
fight.c:      SET_BIT(ch->flag3, AFF3_BLINK_2ND_RD);
fight.c:    else if (IS_SET(ch->flag3, AFF3_BLINK_2ND_RD))
fight.c:      REMOVE_BIT(ch->flag3, AFF3_BLINK_2ND_RD);
fight.c:      REMOVE_BIT(ch->flag3, AFF3_BLINK_1ST_RD);
fight.c:      if (victim->in_room != ch->in_room)
fight.c:	SET_BIT(ch->affected_by2,EXTRA_BLINKY);
fight.c:      SET_BIT(ch->affected_by2,EXTRA_BLINKY);
fight.c:	if (ch->hit > 0) {
fight.c:	if (IS_SET(ch->newbits, THIRD_HAND) && get_eq_char(ch, WEAR_THIRD) != NULL && number_range(1,10) < 2)
fight.c:	if (IS_SET(ch->newbits, FOURTH_HAND) && get_eq_char(ch, WEAR_FOURTH) != NULL && number_range(1,10) < 2)
fight.c:    ch_next = ch->next;
fight.c:    if (ch->fight_timer > 0)
fight.c:      if(ch->fight_timer > 50)
fight.c:        ch->fight_timer = 50;
fight.c:        ch->fight_timer--;
fight.c:    if (ch->rage > 0 && IS_CLASS(ch, CLASS_DEMON)) ch->rage--;
fight.c:    if ( ch->embracing != NULL )
fight.c:      emb = ch->embracing;
fight.c:      if ( emb == NULL ) ch->embracing = NULL;
fight.c:      if ( ch->in_room != emb->in_room )
fight.c:	  ch->embracing = NULL;
fight.c:	else ch->embracing = NULL;
fight.c:    if ( ch->embraced != NULL )
fight.c:      emb = ch->embraced;
fight.c:      if ( emb == NULL ) ch->embraced = NULL;  
fight.c:      if ( ch->in_room != emb->in_room )
fight.c:	  ch->embraced	 = NULL;
fight.c:	else ch->embraced = NULL;
fight.c:   if ( IS_SET(ch->monkstuff, MONK_DEATH) )
fight.c:      if ( ch->hit > (ch->max_hit /2 ) )
fight.c:	ch->hit -=  number_range( 50,200 );
fight.c:	  REMOVE_BIT(ch->monkstuff, MONK_DEATH);
fight.c:	  ch->hit -=  number_range( 50,200 );
fight.c:    if (IS_SET(ch->monkstuff, MONK_HEAL))
fight.c:      if (ch->hit < (ch->max_hit /2 ) && ch->hit > 0)
fight.c:	if (ch->hit < ch->max_hit) ch->hit +=  number_range( 200,400 );
fight.c:	if ( ch->move < ch->max_move ) ch->move += number_range( 175,400 );
fight.c:	   REMOVE_BIT(ch->monkstuff, MONK_HEAL);
fight.c:	  if ( ch->hit < ch->max_hit )
fight.c:	  ch->hit +=  number_range( 200,400 );
fight.c:	  if ( ch->move < ch->max_move )
fight.c:	  ch->move += number_range( 175,400 );
fight.c:/*    if ( !IS_NPC(ch) && ch->pcdata->bloodpower[1] > 0 )
fight.c:	if ( --ch->pcdata->bloodpower[1] == 0 )
fight.c:    if ((victim = ch->fighting ) == NULL || ch->in_room == NULL) continue;
fight.c:    if ( ch->in_room != victim->in_room ) { ch->fighting = NULL; update_pos(ch); continue; }
fight.c:      if (ch->fight_timer < 10) ch->fight_timer = 10;
fight.c:      else if (ch->fight_timer < 25) ch->fight_timer += 3;
fight.c:    if (IS_AWAKE(ch) && IS_AWAKE(victim) && ch->in_room == victim->in_room) multi_hit( ch, victim, TYPE_UNDEFINED );
fight.c:    if ((victim = ch->fighting ) == NULL) continue;
fight.c:	ch->hit += 2500;
fight.c:	if ( ch->hit > ch->max_hit ) ch->hit = ch->max_hit;
fight.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch_next )
fight.c:      rch_next = rch->next_in_room;
fight.c:      if ( IS_AWAKE(rch) && rch->fighting == NULL )
fight.c:	if ( (mount = rch->mount) != NULL )
fight.c:	  if (rch->pIndexData == ch->pIndexData || number_bits(3) == 0)
fight.c:	    for ( vch = ch->in_room->people; vch; vch = vch->next )
fight.c:    if (!IS_NPC(ch) && IS_SET(ch->act, PLR_BRIEF5))
fight.c:	if (ch->pcdata->briefhit)
fight.c:		ch->pcdata->briefhit,
fight.c:		(ch->pcdata->briefhit == 1 ? ' ' : 's'),
fight.c:		ch->pcdata->briefdam );
fight.c:	    ch->pcdata->briefhit = 0; ch->pcdata->briefdam = 0;
fight.c:  if ( ch->position < POS_SLEEPING ) return;
fight.c:      if (!IS_NPC(ch) && ch->cmbt[unarmed] != 0 && wieldorig == 0)
fight.c:	fightaction(ch,victim,ch->cmbt[unarmed], dt, wieldtype);
fight.c:    if(ch->pcdata->powers[NPOWER_NINGENNO] >=4)
fight.c:      spell_poison(gsn_poison,(ch->level*number_range(50,60)),ch,victim); 
fight.c:    if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:    if ( (IS_CLASS(ch,CLASS_WEREWOLF)) && (ch->power[DISC_WERE_PAIN] > 9))
fight.c:    if ((ch->wpn[0] >= 1000)  && (ch->wpn[3] >= 1000)
fight.c:    && (ch->wpn[6] >= 1000) && (ch->wpn[9] >= 1000)
fight.c:    && (ch->wpn[1] >= 1000) && (ch->wpn[4] >= 1000)
fight.c:    && (ch->wpn[7] >= 1000)
fight.c:    && (ch->wpn[10] >= 1000) && (ch->wpn[2] >= 1000)
fight.c:    && (ch->wpn[5] >= 1000) && (ch->wpn[8] >= 1000)
fight.c:    && (ch->wpn[11] >= 1000) && (ch->wpn[12] >= 1000))
fight.c:  if (!IS_NPC(ch) && ch->stance[0] > 0 && number_percent() == 5)
fight.c:    int stance = ch->stance[0];
fight.c:    if (ch->stance[stance] >= 200)
fight.c:  if (IS_SET( ch->flag2, VAMP_OBJMASK) )
fight.c:    sprintf(buf,"%s reforms as %s.\n\r",ch->morph, ch->name );
fight.c:    free_string(ch->morph);
fight.c:    free_string(ch->objdesc);
fight.c:    ch->long_descr = str_dup("");
fight.c:    REMOVE_BIT(ch->flag2, VAMP_OBJMASK);
fight.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
fight.c:        if (((skill_table[sn].skill_level >= 7) && (ch->level < 7)) || ((skill_table[sn].target != TAR_CHAR_OFFENSIVE) && (skill_table[sn].target != TAR_CHAR_DEFENSIVE)))
fight.c:  if ( ch->fighting != victim || dt == gsn_backstab || dt == gsn_shiroken
fight.c:      chance = ((ch->wpn[tempnum] + (ch->wpn[tempnum] * (ch->wpn_lvl[tempnum] * 0.5)) ) * 0.5);
fight.c:    else chance = (ch->wpn[0]) * 0.5;
fight.c:    if ( ch->fighting != victim )
fight.c:      if (IS_SET(ch->pcdata->stats[UNI_AFF], VAM_CLAWS) && number_range(1,100) < 51)
fight.c:      if (ch->pcdata->powers[KAHN_TIGER] > 3)
fight.c:    if ((ch->pcdata->classfour[DRAGON_POWER] > 4) &&  (number_range(1,100) < 51))
fight.c:    if ((IS_SET(ch->pcdata->classfour[DRAGON_POWER], DRAG_CLAWS)) && (number_range(1,100) < 51))
fight.c:    if ((IS_SET(ch->pcdata->classfour[DRAGON_POWER], DRAG_TAIL)) &&  (number_range(1,100) < 51))
fight.c:  if ( IS_CLASS(ch, CLASS_DEMON) && IS_SET(ch->warp, WARP_SPIKETAIL) && number_range(1,3) == 1)
fight.c:    if (ch->pIndexData->vnum == MOB_VNUM_FIRE)
fight.c:    if (ch->pIndexData->vnum == MOB_VNUM_STONE)
fight.c:    if (ch->pIndexData->vnum == MOB_VNUM_CLAY)
fight.c:    if (ch->pIndexData->vnum == MOB_VNUM_IRON)
fight.c:  if ( IS_CLASS(ch, CLASS_DEMON) && IS_SET(ch->warp, WARP_SHARDS) && number_range(1,3) == 1)
fight.c:  if ( IS_CLASS(ch, CLASS_DEMON) && IS_SET(ch->warp, WARP_MAGMA) && number_range(1,3) == 1)
fight.c:  if ( IS_CLASS(ch, CLASS_DEMON) && IS_SET(ch->warp, WARP_VENOMTONG) && number_range(1,3) == 1)
fight.c:    if (ch->pcdata->upgrade_level > 3)
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM)
fight.c:      if (ch->pcdata->powers[HYDRA_LEVEL]>0) one_hit(ch,victim, gsn_fangs, 1);
fight.c:      if (ch->pcdata->powers[HYDRA_LEVEL]>1) one_hit(ch,victim, gsn_fangs, 1);
fight.c:      if (ch->pcdata->powers[HYDRA_LEVEL]>3) one_hit(ch,victim, gsn_fangs, 1);
fight.c:      if (ch->pcdata->powers[HYDRA_LEVEL]>4) one_hit(ch,victim, gsn_fangs, 1);
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM)
fight.c:      if (ch->pcdata->powers[TIGER_LEVEL]>0) multi_hit(ch, victim, gsn_claws);
fight.c:      if (ch->pcdata->powers[TIGER_LEVEL]>1) multi_hit(ch, victim, gsn_fangs);
fight.c:      if (ch->pcdata->powers[TIGER_LEVEL]>0) multi_hit(ch, victim, gsn_claws);
fight.c:      if (ch->pcdata->powers[TIGER_LEVEL]>1) multi_hit(ch, victim, gsn_fangs);
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM) 
fight.c:      if (ch->pcdata->powers[BULL_LEVEL]>0) multi_hit(ch, victim, gsn_headbutt);
fight.c:      if (ch->pcdata->powers[BULL_LEVEL]>1) multi_hit(ch, victim, gsn_hooves);
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM)
fight.c:      if (ch->pcdata->powers[FAERIE_LEVEL] > 1) one_hit(ch, victim, gsn_buffet,1);
fight.c:  if (!IS_NPC(ch) && ch->level > 2)
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FANGS))
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD)) one_hit(ch, victim, gsn_fangs, 5);
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FIERY))
fight.c:  if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT) && ch->pcdata->powers[WEAPONSKILL] > 15)
fight.c:    if (ch->pcdata->powers[CON_LORE] > 4) 
fight.c:    if (ch->pcdata->powers[NECROMANTIC] > 4) 
fight.c:    if (ch->pcdata->powers[DEATH_LORE] > 4) 
fight.c:  if (IS_CLASS(ch, CLASS_DEMON) && number_range(1,3) == 1 && ch->power[DISC_DAEM_HELL] > 3)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_NINGENNO] >=5 && number_range(1,2) != 1)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_DROID) && ch->pcdata->powers[CYBORG_FACE] > 5 && number_range(1,2) != 1)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 0 && number_range(1,2) != 1)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 0 && number_range(1,2) != 1)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ELF) && ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 0 && number_range(1,2) != 1)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_MAGE) && number_range(1,2) != 1)
fight.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits,NEW_QUILLS) && IS_CLASS(ch, CLASS_WEREWOLF))
fight.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits,NEW_BLADESPIN) && IS_CLASS(ch, CLASS_SAMURAI))
fight.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits, NEW_DARKTENDRILS) && IS_CLASS(ch, CLASS_DROW))
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_WRAITH) && (IS_SET(ch->pcdata->powers[AURAS], DEATH_AURA)))
fight.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits,NEW_MULTIARMS) && IS_CLASS(ch, CLASS_MAGE))
fight.c:  if (!IS_NPC(ch) && ch->monkab[BODY] > 3 && IS_CLASS(ch, CLASS_MONK))
fight.c:    if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_AURA)){
fight.c:    if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_HALO))
fight.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits, NEW_CUBEFORM) && IS_CLASS(ch, CLASS_DROID))
fight.c:    if (IS_SET(ch->newbits,NEW_SLAM) && number_range(1,5-ch->power[DISC_WERE_BEAR]/3)==1)
fight.c:    if (IS_SET(ch->newbits, NEW_REND) && number_range(1,5) == 3)
fight.c:  if (!IS_NPC(ch) && IS_VAMPAFF(ch,VAM_WINGS) && number_range(1,2) == 1 && ch->level > 2)
fight.c:  if (!IS_NPC(ch) && IS_VAMPAFF(ch,VAM_WINGS) && number_range(1,2) == 1 && ch->level > 2)
fight.c:  if (IS_CLASS(ch, CLASS_DEMON) && IS_SET(ch->warp, WARP_WINGS) && number_range(1,3) == 1)
fight.c:  if (IS_CLASS(ch, CLASS_DRAGON) && IS_SET(ch->pcdata->classfour[DRAGON_POWER], DRAG_WINGS) && number_range(1,3) == 1)
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch,CLASS_WEREWOLF) && ch->power[DISC_WERE_RAPT] > 0)
fight.c:    spell_poison( gsn_poison, (ch->level*number_range(5,10)),ch,victim );
fight.c:  else if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_SPID] > 0)
fight.c:    spell_poison( gsn_poison, (ch->level*number_range(5,10)),ch,victim );
fight.c:  else if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_DROW) && IS_SET(ch->pcdata->powers[1], DPOWER_DROWPOISON))
fight.c:    spell_poison(gsn_poison,(ch->level*number_range(10,20)),ch,victim);
fight.c:  else if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_NINGENNO] >=5)
fight.c:    spell_poison(gsn_poison,(ch->level*number_range(5,10)),ch,victim);
fight.c:      SET_BIT(ch->affected_by, AFF_FLAMING);
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:      if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:      SET_BIT(ch->affected_by, AFF_FLAMING);
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:      if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:  if (IS_ITEMAFF(victim, ITEMA_SHOCKSHIELD) && ch->position == POS_FIGHTING)
fight.c:  if (IS_ITEMAFF(victim, ITEMA_FIRESHIELD) && ch->position == POS_FIGHTING)
fight.c:  if (IS_ITEMAFF(victim, ITEMA_ICESHIELD) && ch->position == POS_FIGHTING)
fight.c:  if (IS_ITEMAFF(victim, ITEMA_ACIDSHIELD) && ch->position == POS_FIGHTING)
fight.c:if (IS_ITEMAFF(victim, ITEMA_SHOCKSHIELD) && ch->position == POS_FIGHTING){
fight.c:if (IS_ITEMAFF(victim, ITEMA_FIRESHIELD) && ch->position == POS_FIGHTING){
fight.c:if (IS_ITEMAFF(victim, ITEMA_ICESHIELD) && ch->position == POS_FIGHTING){
fight.c:if (IS_ITEMAFF(victim, ITEMA_ACIDSHIELD) && ch->position == POS_FIGHTING){
fight.c:   if (IS_ITEMAFF(victim, ITEMA_CHAOSSHIELD) && ch->position == POS_FIGHTING)
fight.c:    count = ch->level/1000;
fight.c:    if( ch->pIndexData->hitsizedice > 20) count += 20;
fight.c:    else count += ch->pIndexData->hitsizedice;
fight.c:    if ( IS_STANCE(ch, STANCE_VIPER) && number_percent() < ch->stance[STANCE_VIPER] * 0.5) count += 1;
fight.c:    else if ( IS_STANCE(ch, STANCE_MANTIS) && number_percent() < ch->stance[STANCE_MANTIS] * 0.5) count += 1;
fight.c:    else if ( IS_STANCE(ch, STANCE_TIGER) && number_percent() < ch->stance[STANCE_TIGER] * 0.5) count += 1;
fight.c:    else if ( IS_STANCE(ch, STANCE_WOLF) && number_percent() < ch->stance[STANCE_WOLF] * 0.5) count += 10;
fight.c:    else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_SPEED) 
fight.c:    && number_percent() < ch->stance[(ch->stance[0])] * 0.5 ) count += 2;
fight.c:    else if (ch->stance[0] == STANCE_WOLF) count += 2;
fight.c:      if (ch->pcdata->upgrade_level > 0) count += ch->pcdata->upgrade_level*2;
fight.c:      /* if (ch->pcdata->upgrade_level > 4) count += ch->pcdata->upgrade_level - 4;  */
fight.c:         count+=6+(((ch->pcdata->Bootcamp[2])*2.75)+(ch->pcdata->Bootcamp[1]*1.75));
fight.c:		  count += (ch->pdeath*2);
fight.c:		  if (ch->power[WRAITH_POWER] > 0)
fight.c:      if ( IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_CELE] > 0)
fight.c:	if (ch->power[DISC_VAMP_CELE] > 5)
fight.c:	  if ( ch->power[DISC_VAMP_CELE] > 7)
fight.c:	    if ( ch->power[DISC_VAMP_CELE] > 9)
fight.c:      if (IS_CLASS(ch, CLASS_TANARRI)) count += 7 + (ch->pcdata->rank/2);
fight.c:      if (IS_CLASS(ch, CLASS_MONK)) count += (6 * ch->monkab[COMBAT]);
fight.c:      if (IS_CLASS(ch, CLASS_DROID)) count += ch->pcdata->powers[CYBORG_LIMBS];
fight.c:      if (IS_CLASS(ch, CLASS_ANGEL)) count += ch->pcdata->powers[ANGEL_JUSTICE];
fight.c:      if (IS_CLASS(ch, CLASS_ANGEL)) count += ch->pcdata->powers[ANGEL_HARMONY];
fight.c:      if (IS_CLASS(ch, CLASS_WRAITH)) count += 5 + ((ch->pkill)-(ch->pdeath))/3;
fight.c:	if (ch->power[DISC_WERE_LYNX] > 2 )count += 6;
fight.c:	if (ch->power[DISC_WERE_BOAR] > 6)
fight.c:	  if( ch->move > 120000 ) count += 6;
fight.c:		count += ch->move/20000;
fight.c:          if (ch->stance[0] == STANCE_WOLF) count += 5;
fight.c:	count += (ch->pcdata->powers[WEAPONSKILL]+3);
fight.c:	if (IS_SET(ch->pcdata->powers[SHAPE_FORM], BULL_FORM)) count += 5;
fight.c:	if (IS_SET(ch->pcdata->powers[SHAPE_FORM], TIGER_FORM)) count += 6;
fight.c:	if (IS_SET(ch->pcdata->powers[SHAPE_FORM], FAERIE_FORM)) count += 4;
fight.c:	if (IS_SET(ch->pcdata->powers[SHAPE_FORM], HYDRA_FORM)) count += 9;
fight.c:	if (IS_SET(ch->warp, WARP_QUICKNESS)) count += 10;
fight.c:	count += ch->pcdata->classfour[DRAGON_SPIRIT]; 
fight.c:	if (IS_SET(ch->special, SPC_DROW_WAR)) count += 2;
fight.c:	if (IS_SET(ch->pcdata->powers[1],DPOWER_SPEED)) count += 6;
fight.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_ARMS)) count += 2;
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_CHIKYU] >= 3)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_ONE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_TWO)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_THREE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_FOUR)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_FIVE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_SIX)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_SEVEN)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_EIGHT)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_NINE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_TEN)
fight.c:        if (ch->pcdata->phoenix[0]>5) count += 12;
fight.c:      if (ch->pcdata->phoenix[1]>3) count += 10;
fight.c:   if (IS_SET(ch->special,SPC_ELF_WARRIOR))
fight.c:    count += (ch->pcdata->classtwo[ELF_WAR_FURY]) * 4;
fight.c:   if (IS_SET(ch->special,SPC_ELF_ARCHER))
fight.c:    count += ch->pcdata->classtwo[ELF_ARC_FIREARROW]+2;
fight.c:    count += ch->pcdata->classtwo[ELF_ARC_ICEARROW]+2;
fight.c:    count += ch->pcdata->classtwo[ELF_ARC_LIGHTARROW]+2;
fight.c:   if (IS_SET(ch->special,SPC_ELF_MAGE))
fight.c:    count += (ch->pcdata->classtwo[ELF_REDSTONE]);
fight.c:    count += (ch->pcdata->classtwo[ELF_GREENSTONE]);
fight.c:    count += (ch->pcdata->classtwo[ELF_BLUESTONE]);
fight.c:    if (IS_SET(ch->polyaff, POLY_ZULOFORM)) count += 10;
fight.c:	count += 2 + UMIN( 6-ch->generation, 4 );
fight.c:    if (!IS_NPC(ch)) if (ch->pcdata->upgrade_level > 0) count += ch->pcdata->upgrade_level*2;
fight.c:    if ( IS_STANCE(ch, STANCE_VIPER) && number_percent() <  ch->stance[STANCE_VIPER] * 0.5) count += 1;
fight.c:    else if ( IS_STANCE(ch, STANCE_MANTIS) && number_percent() < ch->stance[STANCE_MANTIS] * 0.5) count += 1;
fight.c:    else if ( IS_STANCE(ch, STANCE_TIGER) && number_percent() < ch->stance[STANCE_TIGER] * 0.5) count += 1;
fight.c:    else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_SPEED) 
fight.c:    && number_percent() < ch->stance[(ch->stance[0])] * 0.5 ) count += 2;
fight.c:	count += ch->pcdata->powers[CYBORG_LIMBS] + 2;
fight.c:	count += ch->pcdata->powers[CYBORG_BODY];
fight.c:         count+=6+(((ch->pcdata->Bootcamp[2])*2.75)+(ch->pcdata->Bootcamp[1]*1.75));
fight.c:	if (ch->power[DISC_VAMP_CELE] > 0) count += 3;
fight.c:	if (ch->power[DISC_VAMP_CELE] > 7) count += 8;
fight.c:	if ( ch->power[DISC_VAMP_CELE] > 9) count += 15;
fight.c:        if (ch->pcdata->phoenix[0]>5) count += 12;
fight.c:      if (ch->pcdata->phoenix[1]>3) count += 10;
fight.c:    if ( IS_CLASS(ch, CLASS_MONK) && ch->monkab[COMBAT] > 0 )
fight.c:	count += ch->monkab[COMBAT] + 2;
fight.c:	if (IS_CLASS(ch, CLASS_MONK) && (ch->chi[CURRENT] == 1)) count += 2;
fight.c:	else if (IS_CLASS(ch, CLASS_MONK) && (ch->chi[CURRENT] == 2)) count += 3;
fight.c:	else if (IS_CLASS(ch, CLASS_MONK) && (ch->chi[CURRENT] == 3)) count += 4;
fight.c:	else if (IS_CLASS(ch, CLASS_MONK) && (ch->chi[CURRENT] == 4)) count += 5;
fight.c:	else if (IS_CLASS(ch, CLASS_MONK) && (ch->chi[CURRENT] == 5)) count += 6;
fight.c:	else if (IS_CLASS(ch, CLASS_MONK) && (ch->chi[CURRENT] == 6)) count += 7;
fight.c:    if (IS_CLASS(ch, CLASS_ANGEL)) count += ch->pcdata->powers[ANGEL_JUSTICE];
fight.c:      if ( ch->power[DISC_WERE_LYNX] > 2) count += 3;
fight.c:      if ( ch->power[DISC_WERE_BOAR] > 6) count += 1;
fight.c:	if (ch->move > 120000)
fight.c:	else count += (ch->move/20000);
fight.c:      count += 0 + ch->pcdata->powers[NECROMANTIC];
fight.c:      count += 7 + ch->pcdata->rank;
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED)) count += 6;
fight.c:      count += ch->pcdata->powers[WEAPONSKILL]-3;
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_ONE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_TWO)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_THREE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_FOUR)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_FIVE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_SIX)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_SEVEN)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_EIGHT)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_NINE)
fight.c:    if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_TEN)
fight.c:    if (IS_CLASS(ch, CLASS_DEMON)&& ch->power[DISC_DAEM_ATTA] > 0) count += ch->power[DISC_DAEM_ATTA];
fight.c:   if (IS_SET(ch->special,SPC_ELF_WARRIOR))
fight.c:    count += (ch->pcdata->classtwo[ELF_WAR_FURY]) * 2;
fight.c:   if (IS_SET(ch->special,SPC_ELF_ARCHER))
fight.c:    count += ch->pcdata->classtwo[ELF_ARC_FIREARROW];
fight.c:    count += ch->pcdata->classtwo[ELF_ARC_ICEARROW];
fight.c:    count += ch->pcdata->classtwo[ELF_ARC_LIGHTARROW];
fight.c:   if (IS_SET(ch->special,SPC_ELF_MAGE))
fight.c:    count += (ch->pcdata->classtwo[ELF_REDSTONE]) - 1;
fight.c:    count += (ch->pcdata->classtwo[ELF_GREENSTONE]) - 1;
fight.c:    count += (ch->pcdata->classtwo[ELF_BLUESTONE]) - 1;
fight.c:	count += ch->pcdata->classfour[DRAGON_SPIRIT];
fight.c:    if (IS_SET(ch->polyaff, POLY_ZULOFORM)) count += 8;
fight.c:	if (IS_SET(ch->special, SPC_DROW_WAR)) count += 4;
fight.c:	if (IS_SET(ch->pcdata->powers[1],DPOWER_SPEED)) count += 8;
fight.c:	if (IS_SET(ch->pcdata->powers[1], DPOWER_ARMS)) count += 4;
fight.c:	count += 2 + UMIN( 6-ch->generation, 4 );
fight.c:  if (ch->power[DISC_VAMP_CELE] >= 3)
fight.c:  if (victim->position == POS_DEAD || ch->in_room != victim->in_room)
fight.c:    if (IS_AFFECTED( ch, AFF_PEACE) && ch->fighting != NULL)
fight.c:    REMOVE_BIT(ch->affected_by, AFF_PEACE);
fight.c:    if (IS_SET(ch->act, PLR_RIGHTHAND))
fight.c:    else if (IS_SET(ch->act, PLR_LEFTHAND))
fight.c:  if (ch->wpn[dt-1000] > 5) level = (ch->wpn[dt-1000] / 5);
fight.c:  if (level > (40 + (ch->wpn_lvl[dt-1000]*10) )) level = (40 + (ch->wpn_lvl[dt-1000]*10) );
fight.c:  if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_3))
fight.c:  if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_2))
fight.c:  if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_1))
fight.c:  if ( IS_NPC(ch) && IS_SET(ch->act, ACT_KILLER) )
fight.c:    victim_ac += ch->level;
fight.c:    dam = number_range( ch->level / 2, ch->level * 2 );
fight.c:    if ( IS_SET(ch->act, ACT_KILLER ) )
fight.c:      dam = (ch->spl[RED_MAGIC] + ch->spl[YELLOW_MAGIC] + ch->spl[GREEN_MAGIC] 
fight.c:	     + ch->spl[PURPLE_MAGIC] + ch->spl[BLUE_MAGIC])/5;
fight.c:    else if ( IS_SET(ch->newbits, NEW_MONKADAM))
fight.c:    if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_SEVEN)
fight.c:    if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_EIGHT)
fight.c:    if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_NINE)
fight.c:    if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->rank == BELT_TEN)
fight.c:  if (!IS_NPC(ch) && dt >= TYPE_HIT) dam = dam + (dam * (UMIN(350,((ch->wpn[dt-1000])*(ch->wpn_lvl[dt-1000]+1)) / 60)));*/
fight.c:  if (!IS_NPC(ch) && dt >= TYPE_HIT) dam = dam + (dam * (UMIN(350,(ch->wpn[dt-1000]+1)) / 60));
fight.c:    if (ch->pcdata->upgrade_level == 1)
fight.c:    else if (ch->pcdata->upgrade_level == 2)
fight.c:    else if (ch->pcdata->upgrade_level == 3)
fight.c:    else if (ch->pcdata->upgrade_level == 4)
fight.c:    else if (ch->pcdata->upgrade_level == 5)
fight.c:    else if (ch->pcdata->upgrade_level == 6)
fight.c:    else if (ch->pcdata->upgrade_level == 7)
fight.c:    else if (ch->pcdata->upgrade_level == 8)
fight.c:    else if (ch->pcdata->upgrade_level == 9)
fight.c:    else if (ch->pcdata->upgrade_level == 10)
fight.c: /*  dam *= (float)1+(float)((float).10*(float)ch->pcdata->upgrade_level);   */
fight.c:    dam *= (1 + ch->power[DISC_VAMP_POTE]/10);
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_MIGHT)) dam *= 2.5;
fight.c:    if (ch->pcdata->powers[TANARRI_FURY_ON] == 1) dam *= 2.5;
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ANGEL)) dam *= (1 + ch->pcdata->powers[ANGEL_JUSTICE] / 10);
fight.c:    if (dt==gsn_mageshield && ch->pcdata->powers[PINVOKE]>6) dam *=1.4;
fight.c:    if (dt==gsn_mageshield && ch->pcdata->powers[PINVOKE]>9) dam *=1.4;
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_KAHN) && IS_SET(ch->polyaff, POLY_ZULOFORM))
fight.c:  { if (ch->pcdata->Bootcamp[3] == 1) dam *= 2.7;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 2) dam *= 2.8;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 3) dam *= 2.9;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 4) dam *= 3.0;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 5) dam *= 3.1;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 6) dam *= 3.25;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 7) dam *= 3.4;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 8) dam *= 3.65;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 9) dam *= 3.8; 
fight.c:    else if (ch->pcdata->Bootcamp[3] == 10) dam *= 3.95;
fight.c:    else if (ch->pcdata->Bootcamp[3] == 0) dam *= 1;}
fight.c:    if (ch->pcdata->rank == BELT_ONE) dam *= 1.9;
fight.c:    else if (ch->pcdata->rank == BELT_TWO) dam *= 2.0;
fight.c:    else if (ch->pcdata->rank == BELT_THREE) dam *= 2.1;
fight.c:    else if (ch->pcdata->rank == BELT_FOUR) dam *= 2.2;
fight.c:    else if (ch->pcdata->rank == BELT_FIVE) dam *= 2.3;
fight.c:    else if (ch->pcdata->rank == BELT_SIX) dam *= 2.4;
fight.c:    else if (ch->pcdata->rank == BELT_SEVEN) dam *= 2.5;
fight.c:    else if (ch->pcdata->rank == BELT_EIGHT) dam *= 2.6;
fight.c:    else if (ch->pcdata->rank == BELT_NINE) dam *= 2.7;
fight.c:    else if (ch->pcdata->rank == BELT_TEN) dam *= 2.9;
fight.c:   if (IS_SET(ch->special,SPC_ELF_WARRIOR))
fight.c:    if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 0) dam *= 1.9;
fight.c:    else if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 1) dam *= 2.0;
fight.c:    else if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 2) dam *= 2.1;
fight.c:    else if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 3) dam *= 2.2;
fight.c:    else if (ch->pcdata->classtwo[ELF_WAR_RAGE] > 4) dam *= 2.3;
fight.c:   if (IS_SET(ch->special,SPC_ELF_ARCHER)) dam *= 2.8;
fight.c:   if (IS_SET(ch->special,SPC_ELF_MAGE)) dam *= 1.5;
fight.c:  if ( !IS_NPC(ch) && IS_CLASS(ch, CLASS_DEMON) &&  IS_SET(ch->warp, WARP_STRONGARMS))
fight.c:  if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_3)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 1.5 * (ch->stance[(ch->stance[0])] / 200);
fight.c:  else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_2)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 1.0 * (ch->stance[(ch->stance[0])] / 200);
fight.c:  else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_1)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 0.5 * (ch->stance[(ch->stance[0])] / 200);
fight.c:  if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_3)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 0.5 * (ch->stance[(ch->stance[0])] / 200);
fight.c:  else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_2)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 0.3 * (ch->stance[(ch->stance[0])] / 200);
fight.c:  else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_1)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 0.1 * (ch->stance[(ch->stance[0])] / 200);
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM && ch->pcdata->powers[TIGER_LEVEL] > 1) dam *= 1.2;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM && ch->pcdata->powers[FAERIE_LEVEL] > 1) dam *= 1.2;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM && ch->pcdata->powers[HYDRA_LEVEL] > 1) dam *= 1.6;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM && ch->pcdata->powers[BULL_LEVEL] > 1) dam *= 1.7;
fight.c:     jmod=(ch->pcdata->Bootcamp[0]);
fight.c:    if (ch->pcdata->powers[CYBORG_LIMBS] > 0) dam *= 1.8;
fight.c:    if (ch->pcdata->powers[CYBORG_LIMBS] > 2) dam *= 2.0;
fight.c:    if (ch->pcdata->powers[WEAPONSKILL] > 4) dam *=1.1;
fight.c:    if (ch->pcdata->powers[WEAPONSKILL] > 8) dam *=1.2;
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_BEAR] > 5)
fight.c:      if (ch->fighting == victim && IS_WEAP(wield,WEAPON_VAMPIRIC))
fight.c:      if (ch->fighting == victim && (IS_WEAP(wield,WEAPON_FLAMING) || IS_WEAP(wield, WEAPON_ELE_FLAME)))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF2)) act("$N is burned by your $p.", ch, wield, victim, TO_CHAR);
fight.c:      if (ch->fighting == victim && (IS_WEAP(wield,WEAPON_FROST) || IS_WEAP(wield, WEAPON_ELE_WATER)))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF2)) act("Your $p freezes $N.", ch, wield, victim, TO_CHAR);
fight.c:      if (ch->fighting == victim && IS_WEAP(wield, WEAPON_ELE_EARTH) )
fight.c:      if (ch->fighting == victim && (IS_WEAP(wield,WEAPON_SHOCKING)  || IS_WEAP(wield, WEAPON_ELE_AIR)))
fight.c:    if (ch->chi[CURRENT] > 0 && ch->chi[CURRENT] < 3 ) dam *= 1.3;
fight.c:    if (ch->chi[CURRENT] > 2 && ch->chi[CURRENT] < 7 ) dam *= ((ch->chi[CURRENT]) / 2);
fight.c:    if (IS_CLASS(ch, CLASS_NINJA) && !IS_NPC(ch) && ch->pcdata->powers[NPOWER_NINGENNO] >=2)
fight.c:  if (dt == gsn_booming && !IS_NPC(ch)) 				dam *= ch->pcdata->rank/2;
fight.c:  if (dt == gsn_circle && ch->pcdata->rank == BELT_EIGHT)		dam *= 5.0;
fight.c:  if (dt == gsn_circle && ch->pcdata->rank == BELT_NINE)		dam *= 5.5;
fight.c:  if (dt == gsn_circle && ch->pcdata->rank == BELT_TEN) 		dam *= 6.0;
fight.c:  if (dt == gsn_shiroken && ch->pcdata->rank == BELT_TEN)		dam *= 6.5;
fight.c:  if (dt == gsn_firearrow && ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 1)	dam *= 2.4;
fight.c:  if (dt == gsn_firearrow && ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 2)	dam *= 2.6;
fight.c:  if (dt == gsn_firearrow && ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 3)	dam *= 2.9;
fight.c:  if (dt == gsn_firearrow && ch->pcdata->classtwo[ELF_ARC_FIREARROW] > 4)	dam *= 3.0;
fight.c:  if (dt == gsn_icearrow && ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 1) 	dam *= 2.4;
fight.c:  if (dt == gsn_icearrow && ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 2) 	dam *= 2.6;
fight.c:  if (dt == gsn_icearrow && ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 3) 	dam *= 2.8;
fight.c:  if (dt == gsn_icearrow && ch->pcdata->classtwo[ELF_ARC_ICEARROW] > 4) 	dam *= 3.0;
fight.c:  if (dt == gsn_lightningarrow && ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 1) dam *= 2.4;
fight.c:  if (dt == gsn_lightningarrow && ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 2) dam *= 2.6;
fight.c:  if (dt == gsn_lightningarrow && ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 3) dam *= 2.8;
fight.c:  if (dt == gsn_lightningarrow && ch->pcdata->classtwo[ELF_ARC_LIGHTARROW] > 4) dam *= 3.0;
fight.c:  if (dt == gsn_swordslash && ch->pcdata->classtwo[ELF_WAR_RAGE] > 0)		dam *= 2.8;
fight.c:  if (dt == gsn_swordslash && ch->pcdata->classtwo[ELF_WAR_RAGE] > 1)		dam *= 2.9;
fight.c:  if (dt == gsn_swordslash && ch->pcdata->classtwo[ELF_WAR_RAGE] > 2)		dam *= 4.0;
fight.c:  if (dt == gsn_swordslash && ch->pcdata->classtwo[ELF_WAR_RAGE] > 3)		dam *= 4.1;
fight.c:  if (dt == gsn_swordslash && ch->pcdata->classtwo[ELF_WAR_RAGE] > 4)		dam *= 4.2;
fight.c:  if (dt == gsn_wishsong && ch->pcdata->classtwo[ELF_WAR_RAGE] > 0)		dam *= 4;
fight.c:  if (dt == gsn_wishsong && ch->pcdata->classtwo[ELF_WAR_RAGE] > 1)		dam *= 4.2;
fight.c:  if (dt == gsn_wishsong && ch->pcdata->classtwo[ELF_WAR_RAGE] > 2)		dam *= 4.4;
fight.c:  if (dt == gsn_wishsong && ch->pcdata->classtwo[ELF_WAR_RAGE] > 3)		dam *= 4.6;
fight.c:  if (dt == gsn_wishsong && ch->pcdata->classtwo[ELF_WAR_RAGE] > 4)		dam *= 4.8;
fight.c:  if( IS_NPC(ch) && ch->pIndexData->hitplus > 3) dam *=3;
fight.c:  else if( IS_NPC(ch) && ch->pIndexData->hitplus > 0 ) dam *= ch->pIndexData->hitplus;
fight.c:/*  dam *= .95-(.5*ch->pcdata->upgrade_level); */
fight.c:    if (IS_SET(ch->special,SPC_ELF_MAGE))     dam /= 1.8;
fight.c:    if (IS_SET(ch->special,SPC_ELF_ARCHER))   dam /= 1.3;
fight.c:    if (IS_SET(ch->polyaff, POLY_ZULOFORM))
fight.c:    //dam*=(1-((ch->pcdata->Bootcamp[4])/25));
fight.c:  if (IS_NPC(ch) ) dam = number_range(ch->level/2, ch->level*2);
fight.c:  if (dam > ch->damcap[DAM_CAP]) dam = number_range( (ch->damcap[DAM_CAP] - 200), (ch->damcap[DAM_CAP] + 100) );
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_MIGHT))
fight.c:      if (IS_SET(ch->warp, WARP_STRONGARMS)) dam *= 1.2;
fight.c:      if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM && ch->pcdata->powers[TIGER_LEVEL] > 1) dam *= 1.5;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM && ch->pcdata->powers[FAERIE_LEVEL] > 1) dam *= 1.2;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM && ch->pcdata->powers[HYDRA_LEVEL] > 1) dam *= 1.6;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM && ch->pcdata->powers[BULL_LEVEL] > 1) dam *= 1.7;
fight.c:      if (ch->pcdata->powers[WEAPONSKILL] > 4) dam *= 1.2;
fight.c:      if (ch->pcdata->powers[WEAPONSKILL] > 8) dam *= 1.3;
fight.c:    if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_BEAR] > 5)
fight.c:  else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_BYPASS)) return TRUE;
fight.c: /*   if (ch->pcdata->mod_str > 0) max_dam += ch->pcdata->mod_str * 5;    */
fight.c:    if (ch->pcdata->upgrade_level > 0) max_dam += ch->pcdata->upgrade_level * 550;
fight.c:    if (ch->generation == 0) max_dam += 1000;
fight.c:    if (ch->generation == 1) max_dam += 500;
fight.c:    if (ch->generation == 2) max_dam += 400;
fight.c:    if (ch->generation == 3) max_dam += 300;
fight.c:    if (ch->generation == 4) max_dam += 200;
fight.c:    if (ch->generation == 5) max_dam += 100;    
fight.c:	  max_dam += ch->wpn[i] / 10;
fight.c:	  max_dam += ch->wpn_lvl[i] * 100;
fight.c:	  max_dam += ch->wpn[i] / 30;
fight.c:	  max_dam += ch->wpn_lvl[i] * 10;
fight.c:    max_dam+=(((ch->pcdata->Bootcamp[3])*700)+((ch->pcdata->Bootcamp[0])*100));}
fight.c:    if(IS_CLASS(ch, CLASS_MAGE) || IS_CLASS(ch, CLASS_WIZARD) || IS_CLASS(ch, CLASS_LICH) || (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->extra, SPC_ELF_MAGE)))
fight.c:        max_dam += ch->spl[i] / 25;
fight.c:      max_dam += ch->pcdata->powers[WRAITH_DEATH]*400;
fight.c:      max_dam += ch->pcdata->powers[WRAITH_POWER]*400;
fight.c:      max_dam += ch->pdeath*100;
fight.c:        if (ch->wpn[i] >= 10000) max_dam += 300;
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_MIGHT)) max_dam += 1200;
fight.c:      max_dam += ch->pcdata->rank*300; /* max rank is 6 btw */
fight.c:      if (ch->pcdata->powers[CON_LORE] > 4) max_dam += 150;
fight.c:      if (ch->pcdata->powers[DEATH_LORE] > 4) max_dam += 150;
fight.c:      if (ch->pcdata->powers[LIFE_LORE] > 4) max_dam += 150;
fight.c:      if (ch->pcdata->powers[NECROMANTIC] > 4) max_dam += 150;
fight.c:      if (ch->pcdata->powers[CHAOS_MAGIC] > 4) max_dam += 150;
fight.c:      max_dam += ch->pcdata->classfour[DRAGON_AGE]*165;
fight.c:      max_dam += ch->pcdata->powers[ANGEL_JUSTICE]*400;
fight.c:      max_dam += ch->pcdata->powers[ANGEL_PEACE]*100;
fight.c:      max_dam += ch->pcdata->powers[ANGEL_HARMONY]*150;
fight.c:      max_dam += ch->pcdata->powers[ANGEL_LOVE]*100;
fight.c:      if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM) max_dam += ch->pcdata->powers[TIGER_LEVEL] * 1200;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM) max_dam += ch->pcdata->powers[HYDRA_LEVEL] * 1500;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM) max_dam += ch->pcdata->powers[BULL_LEVEL] * 1000;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM) max_dam += ch->pcdata->powers[FAERIE_LEVEL] * 800;
fight.c:      if (IS_SET(ch->polyaff, POLY_ZULOFORM)) max_dam += 1750;
fight.c:      if (IS_SET(ch->newbits, NEW_DROWHATE)) max_dam += 650;
fight.c:      if (IS_SET(ch->newbits,NEW_DFORM)) max_dam += 1200;
fight.c:if(IS_CLASS(ch, CLASS_PHOENIX)){max_dam+=ch->pcdata->phoenix[0]*900;
fight.c:  if(ch->pcdata->phoenix[1]<1)max_dam+=1800;
fight.c:    if (IS_CLASS(ch, CLASS_DEMON) && ch->in_room != NULL)
fight.c:      max_dam += ch->power[DISC_DAEM_ATTA] * 350;
fight.c:      if (ch->pcdata->souls > 0) max_dam += UMIN(350, 70 * ch->pcdata->souls);
fight.c:      if (ch->in_room->vnum >= 93420 && ch->in_room->vnum <= 93426) max_dam += 6000;
fight.c:      max_dam += (ch->pcdata->stats[DEMON_POWER] * 2.5);
fight.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 0) max_dam += 600;
fight.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 1) max_dam += 700;
fight.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 2) max_dam += 800;
fight.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 3) max_dam += 900;
fight.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 4) max_dam += 1000;
fight.c:      max_dam +=  (ch->monkab[COMBAT] * 400);
fight.c:      if (ch->chi[CURRENT] > 0) max_dam += ch->chi[CURRENT] * 100;
fight.c:      max_dam += (ch->pcdata->condition[COND_THIRST]/10);
fight.c:      max_dam += (ch->rage * 5);
fight.c:      if (ch->power[DISC_VAMP_POTE] > 0) 
fight.c:	max_dam += (ch->power[DISC_VAMP_POTE] * 150);
fight.c:      if( ch->pcdata->rank == AGE_TRUEBLOOD)  max_dam += 1420;
fight.c:      else if( ch->pcdata->rank == AGE_LA_MAGRA) max_dam += 850;
fight.c:      else if (ch->pcdata->rank == AGE_METHUSELAH) max_dam += 680;
fight.c:      else if (ch->pcdata->rank == AGE_ELDER) max_dam += 425;
fight.c:      else if (ch->pcdata->rank == AGE_ANCILLA) max_dam += 170;
fight.c:      max_dam += (ch->rage * 7);
fight.c:      if(ch->pcdata->powers[NPOWER_CHIKYU] >=6 && ch->pcdata->powers[HARA_KIRI] > 0) 
fight.c:      if(ch->pcdata->powers[NPOWER_CHIKYU] >=2)
fight.c:	max_dam += ((ch->pcdata->powers[WL_SKILLS]) * 275);
fight.c:	max_dam += ((ch->pcdata->powers[WL_SPELLS]) * 700);
fight.c:      if (IS_SET(ch->special,SPC_ELF_MAGE))
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_GREENSTONE]) * 500);
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_REDSTONE]) * 500);
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_BLUESTONE]) * 500); 
fight.c:      if (IS_SET(ch->special,SPC_ELF_WARRIOR))
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_WAR_RAGE]) * 300);
fight.c:      if (IS_SET(ch->special,SPC_ELF_ARCHER))
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_ARC_FIREARROW]) * 200);
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_ARC_ICEARROW]) * 200);
fight.c:	max_dam += ((ch->pcdata->classtwo[ELF_ARC_LIGHTARROW]) * 200);
fight.c:      if (ch->pcdata->classtwo[ELF_GEN] > 5) max_dam += 500;
fight.c:      if (ch->rage > 99)
fight.c:	max_dam += ch->rage;
fight.c:      if (ch->power[DISC_WERE_PAIN]>9) max_dam += 1250;
fight.c:      max_dam += ch->pcdata->powers[WEAPONSKILL] * 350;
fight.c:	max_dam += (6-ch->generation) * 450;
fight.c:    if	    (ch->stance[0] == STANCE_BULL)   max_dam += 200;
fight.c:    else if (ch->stance[0] == STANCE_DRAGON) max_dam += 250;
fight.c:    else if (ch->stance[0] == STANCE_WOLF)   max_dam += 450;
fight.c:    else if (ch->stance[0] == STANCE_TIGER)  max_dam += 400;
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMCAP_3)) max_dam += 550;
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMCAP_2)) max_dam += 400;
fight.c:    else if (ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMCAP_1)) max_dam += 250;
fight.c:  if (!IS_NPC(victim) && ch->stance[0] != STANCE_MONKEY )
fight.c:  if (IS_NPC(ch) ) max_dam += ch->level;
fight.c:    if (IS_NPC(ch) || ch->stance[0] != STANCE_MONKEY)
fight.c://  if (ch->level >= LEVEL_BUILDER) max_dam = 30000;
fight.c://  if (ch->level >= LEVEL_BUILDER && !IS_NPC(ch)) max_dam = 100000; // Det er pisse irreterende Thomas.. jeg kan intet teste mod mobs, de doer automatisk. DIE!
fight.c:  ch->damcap[DAM_CAP] = max_dam;
fight.c:  ch->damcap[DAM_CAP] = ch->level*2;
fight.c:  ch->damcap[DAM_CHANGE] = 0;
fight.c:  if ( ch->embracing != NULL )
fight.c:    if ( ( emb = ch->embracing ) != NULL ) stop_embrace(ch,emb);
fight.c:  if (ch->damcap[DAM_CHANGE] == 1) update_damcap(ch,victim);
fight.c:  if ( dam > ch->damcap[0] ) dam = ch->damcap[0];
fight.c:      if ( ch->fighting == NULL )
fight.c:      &&   victim->master->in_room == ch->in_room
fight.c:      REMOVE_BIT( ch->affected_by, AFF_HIDE );
fight.c:      if (IS_NPC(ch) && number_percent( ) < ch->level * 0.5)
fight.c:      if (IS_NPC(ch) && number_percent( ) < ch->level * 0.5)
fight.c:    else if (!IS_NPC(victim) && (ch->stance[0] == STANCE_WOLF) && !can_counter(ch)
fight.c:      ch->mkill += 1;
fight.c:	      ch->pcdata->stats[DEMON_CURRENT] += temp;
fight.c:	      ch->pcdata->stats[DEMON_TOTAL] += temp;
fight.c:	    ch->pcdata->stats[DROW_POWER] += temp;
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF4)) send_to_char(buf,ch);
fight.c:      if (ch->level == 1 && ch->mkill > 9)
fight.c:	if ( SET_BIT(ch->act, PLR_SILENCE) ) REMOVE_BIT(ch->act, PLR_SILENCE);
fight.c:	if ( SET_BIT(ch->act, PLR_LOG) ) REMOVE_BIT(ch->act, PLR_LOG);
fight.c:	ch->level = 2;
fight.c:      ch->pcdata->quest += victim->pcdata->bounty;
fight.c:    if (IS_SET(ch->act2, PLR2_AUTOSLAB) )
fight.c:    if (IS_SET(ch->act2, PLR2_AUTOGEM) )
fight.c:    if (IS_SET(ch->act2, PLR2_AUTOHILT) )
fight.c:    if (IS_SET(ch->act, PLR_AUTOLOOT) )
fight.c:      if ( IS_SET(ch->act, PLR_AUTOSAC) )
fight.c:  if (!ch->in_room) return TRUE; // when someone calls a one_hit or similar on something/someone who COULD be dead/gone.
fight.c:    if ( ch->pcdata->upgrade_level == 0 && ((get_age(ch) - 17) < 5) )
fight.c:/*    if ( !IS_SET (victim->in_room->room_flags, ROOM_ARENA) && IS_SET (ch->in_room->room_flags, ROOM_ARENA) && !in_fortress(victim) && !in_fortress(ch) && (victim->pcdata->upgrade_level != ch->pcdata->upgrade_level))
fight.c:    if(ch->pcdata->safe_counter > 0)
fight.c:    if (IS_AFFECTED(ch, AFF_PEACE) && ch->fighting != NULL) REMOVE_BIT(ch->affected_by, AFF_PEACE);
fight.c:  if ( IS_SET(ch->in_room->room_flags,ROOM_SAFE) && !ragnarok)
fight.c:  if(IS_SET(ch->in_room->room_flags, ROOM_IMMSAFE))
fight.c:    if (!IS_NPC(ch)) chance -= (ch->wpn[dt-1000] * 0.01);
fight.c:    else chance -= (ch->level * 0.02);
fight.c:    if (!IS_NPC(ch)) chance -= (ch->wpn[0] * 0.01);
fight.c:    else chance -= (ch->level * 0.02);
fight.c:    if (IS_CLASS(ch,CLASS_DROID)) chance -= ch->pcdata->powers[CYBORG_LIMBS]*5;
fight.c:    if (ch->pcdata->upgrade_level > 0) chance -= ch->pcdata->upgrade_level*10;
fight.c:      if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM) chance -= ch->pcdata->powers[TIGER_LEVEL]*7;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM) chance -= ch->pcdata->powers[BULL_LEVEL]*5;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM) chance -= ch->pcdata->powers[HYDRA_LEVEL]*4.5;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM) chance -= ch->pcdata->powers[FAERIE_LEVEL]*4;
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD)) chance -= 15;
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED)) chance -= 17;
fight.c:      if (ch->pcdata->powers[TANARRI_FURY_ON] == 1) chance -= 17;
fight.c:    if (IS_CLASS(ch, CLASS_MILITARY)) chance -= ((ch->pcdata->Bootcamp[1])*4);
fight.c:    if (IS_CLASS(ch, CLASS_DRAGON)) chance -= ch->pcdata->classfour[DRAGON_AGE] - 3;
fight.c:    if (IS_CLASS(ch, CLASS_ANGEL)) chance -= (ch->pcdata->powers[ANGEL_JUSTICE]*9);
fight.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_CELE] > 0) chance -= (ch->power[DISC_VAMP_CELE]*3);
fight.c:    if (IS_CLASS(ch, CLASS_NINJA)  && ch->pcdata->powers[NPOWER_CHIKYU] >= 6 && ch->pcdata->powers[HARA_KIRI] > 0) chance -= 35;
fight.c:    if (ch->pcdata->powers[NPOWER_CHIKYU] >= 5 && IS_CLASS(ch, CLASS_NINJA)) chance -= 40;
fight.c:    if (IS_CLASS(ch, CLASS_PHOENIX))chance -= 10+(ch->pcdata->phoenix[1]*3);
fight.c:    if (IS_CLASS(ch, CLASS_MONK) && ch->chi[CURRENT] > 0) chance -= 10;
fight.c:    if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT)) chance -= ch->pcdata->powers[WEAPONSKILL]*3.5;
fight.c:    if (IS_CLASS(ch, CLASS_DROW) && IS_SET(ch->pcdata->powers[1], DPOWER_ARMS)) chance -= 50;
fight.c:    if (IS_SET(ch->newbits, NEW_MONKFLAME)) chance -= 5;
fight.c:    if (IS_SET(ch->pcdata->classtwo[ELF_REDSTONE], ELFSTONE_FLAMERING)) chance -= 5;
fight.c:    if (IS_CLASS(ch, CLASS_WEREWOLF)) chance -= (ch->power[DISC_WERE_MANT] * 3);
fight.c:    if (IS_CLASS(victim, CLASS_MONK) && ch->chi[CURRENT] > 0 ) chance += 20;
fight.c:  if (!IS_NPC(ch) && ch->power[DISC_VAMP_CELE] > 0 && IS_CLASS(ch, CLASS_VAMPIRE))
fight.c:    if( ch->pcdata->rank == AGE_TRUEBLOOD)  chance -= 22;
fight.c:    else if( ch->pcdata->rank == AGE_LA_MAGRA) chance -= 17;
fight.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) chance -= 15;
fight.c:    else if (ch->pcdata->rank == AGE_ELDER) chance -= 10;
fight.c:    else if (ch->pcdata->rank == AGE_ANCILLA) chance -= 5;    
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM) chance -= ch->pcdata->powers[TIGER_LEVEL]*8;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM) chance -= ch->pcdata->powers[BULL_LEVEL]*9;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM) chance -= ch->pcdata->powers[HYDRA_LEVEL]*8;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM) chance -= ch->pcdata->powers[FAERIE_LEVEL]*13;
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD)) chance -= 7;
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED)) chance -= 10;
fight.c:    if (ch->pcdata->powers[TANARRI_FURY_ON] == 1) chance -= 7;
fight.c:    if (IS_CLASS(ch, CLASS_MILITARY)) chance -= ((ch->pcdata->Bootcamp[1])*4);
fight.c:  if (IS_CLASS(ch, CLASS_DRAGON)) chance -= ch->pcdata->classfour[DRAGON_AGE] - 3;
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ANGEL)) chance -= (ch->pcdata->powers[ANGEL_JUSTICE]*3);
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_UNDEAD_KNIGHT)) chance -= ch->pcdata->powers[WEAPONSKILL];
fight.c:    if( ch->pcdata->rank == BELT_TEN)  chance -= 30;
fight.c:    else if( ch->pcdata->rank == BELT_NINE) chance -= 25;   
fight.c:    else if (ch->pcdata->rank == BELT_EIGHT) chance -= 20;    
fight.c:    else if (ch->pcdata->rank == BELT_SEVEN) chance -= 15;
fight.c:    else if (ch->pcdata->rank == BELT_SIX) chance -= 10;  
fight.c:    else if (ch->pcdata->rank == BELT_FIVE) chance -= 5;
fight.c:    else if (ch->pcdata->rank == BELT_FOUR) chance -= 4;
fight.c:    else if (ch->pcdata->rank == BELT_THREE) chance -= 3;
fight.c:  if(!IS_NPC(ch) && IS_CLASS(ch, CLASS_DEMON)) chance -= (ch->power[DISC_DAEM_ATTA]);
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch,CLASS_DROID)) chance -= ch->pcdata->powers[CYBORG_LIMBS]*3;
fight.c:  if (IS_NPC(ch) && IS_SET(ch->act,ACT_KILLER))
fight.c:  && IS_SET(ch->newbits, NEW_FIGHTDANCE)
fight.c:    if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:    if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:  if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:  if (!IS_NPC(ch)) chance -= (ch->wpn[dt-1000] * 0.01);
fight.c:  else chance -= (ch->level * 0.02);
fight.c:    if (ch->pcdata->upgrade_level > 0) chance -= ch->pcdata->upgrade_level*10;
fight.c:    if (IS_CLASS(ch,CLASS_DROID)) chance -= ch->pcdata->powers[CYBORG_LIMBS] * 5;
fight.c:	chance -= ch->spl[1]/40;
fight.c:      if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM) chance -= ch->pcdata->powers[TIGER_LEVEL]*7;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM) chance -= ch->pcdata->powers[BULL_LEVEL]*5.5;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM) chance -= ch->pcdata->powers[HYDRA_LEVEL]*5;
fight.c:      else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM) chance -= ch->pcdata->powers[FAERIE_LEVEL]*4;
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD)) chance -= 15;
fight.c:      if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED)) chance -= 17;
fight.c:      if (ch->pcdata->powers[TANARRI_FURY_ON] == 1) chance -= 17;
fight.c:    if (IS_CLASS(ch, CLASS_MILITARY)) chance -= ((ch->pcdata->Bootcamp[1])*4);
fight.c:    if (IS_CLASS(ch, CLASS_DRAGON)) chance -= ch->pcdata->classfour[DRAGON_AGE] - 3;
fight.c:    if (IS_CLASS(ch, CLASS_ANGEL)) chance -= (ch->pcdata->powers[ANGEL_JUSTICE]*9);
fight.c:    if (IS_CLASS(ch, CLASS_NINJA)  && ch->pcdata->powers[NPOWER_CHIKYU] >= 6 && ch->pcdata->powers[HARA_KIRI] > 0) 
fight.c:    if (ch->pcdata->powers[NPOWER_CHIKYU] >= 5 && IS_CLASS(ch, CLASS_NINJA)) chance -= 40;
fight.c:    if (ch->power[DISC_VAMP_CELE] > 0 && IS_CLASS(ch, CLASS_VAMPIRE)) chance -= (ch->power[DISC_VAMP_CELE]*4);
fight.c:    if (IS_CLASS(ch, CLASS_PHOENIX )) chance+=13+(ch->pcdata->phoenix[1]*2); 
fight.c:    if (IS_CLASS(ch, CLASS_MAGE) ) chance -= ch->spl[1]/50;
fight.c:    if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_MANT] > 6) chance -= (ch->power[DISC_WERE_MANT] * 3);
fight.c:    if (IS_CLASS(ch, CLASS_DROW) && IS_SET(ch->pcdata->powers[1], DPOWER_SPEED)) chance -= 50;
fight.c:    if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT)) chance -= ch->pcdata->powers[WEAPONSKILL]*4;
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch,CLASS_DROID)) chance -= ch->pcdata->powers[CYBORG_LIMBS]*3;
fight.c:    if (ch->pcdata->powers[SHAPE_FORM] == TIGER_FORM) chance -= ch->pcdata->powers[TIGER_LEVEL]*4;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == BULL_FORM) chance -= ch->pcdata->powers[BULL_LEVEL]*3;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == HYDRA_FORM) chance -= ch->pcdata->powers[HYDRA_LEVEL]*3;
fight.c:    else if (ch->pcdata->powers[SHAPE_FORM] == FAERIE_FORM) chance -= ch->pcdata->powers[FAERIE_LEVEL]*2;
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD)) chance -= 7;
fight.c:    if (IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED)) chance -= 10;
fight.c:    if (ch->pcdata->powers[TANARRI_FURY_ON] == 1) chance -= 7;
fight.c:    if (IS_CLASS(ch, CLASS_MILITARY)) chance -= ((ch->pcdata->Bootcamp[1])*4);
fight.c:  if (IS_CLASS(ch, CLASS_DRAGON)) chance -= ch->pcdata->classfour[DRAGON_AGE] - 3;
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_ANGEL)) chance -= (ch->pcdata->powers[ANGEL_JUSTICE]*3);
fight.c:if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_UNDEAD_KNIGHT)) chance -= ch->pcdata->powers[WEAPONSKILL];
fight.c:  if (!IS_NPC(ch) && IS_CLASS(ch, CLASS_WEREWOLF) && ch->power[DISC_WERE_MANT] > 6) chance -= (ch->power[DISC_WERE_MANT]);
fight.c:    if( ch->pcdata->rank == AGE_TRUEBLOOD)  chance -= 15;
fight.c:    else if( ch->pcdata->rank == AGE_LA_MAGRA) chance -= 13;
fight.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) chance -= 10;
fight.c:    else if (ch->pcdata->rank == AGE_ELDER) chance -= 7;
fight.c:    else if (ch->pcdata->rank == AGE_ANCILLA) chance -= 5;
fight.c:    if( ch->pcdata->rank == BELT_TEN)  chance -= 20;
fight.c:    else if( ch->pcdata->rank == BELT_NINE) chance -= 18;
fight.c:    else if (ch->pcdata->rank == BELT_EIGHT) chance -= 17;
fight.c:    else if (ch->pcdata->rank == BELT_SEVEN) chance -= 14;
fight.c:    else if (ch->pcdata->rank == BELT_SIX) chance -= 12;
fight.c:    else if (ch->pcdata->rank == BELT_FIVE) chance -= 10;
fight.c:    else if (ch->pcdata->rank == BELT_FOUR) chance -= 9;
fight.c:    else if (ch->pcdata->rank == BELT_THREE) chance -= 7;
fight.c:    else if (ch->pcdata->rank == BELT_TWO) chance -= 4;
fight.c:    else if (ch->pcdata->rank == BELT_ONE) chance -= 2;
fight.c:  if (IS_NPC(ch) && IS_SET(ch->act,ACT_KILLER))
fight.c:  if (IS_NPC(ch) || !IS_SET(ch->act, PLR_BRIEF3))
fight.c:  if(ch->fighting != NULL) return;
fight.c:    sprintf(buf, "%s attacking %s at %d.", ch->name, victim->name, ch->in_room->vnum);
fight.c:	sprintf(buf, "%s attacking %s while they are fighting a NPC.", ch->name, victim->name);
fight.c:	sprintf(buf, "%s attacking %s while they are fighting %s.", ch->name, victim->name, victim->fighting->name);
fight.c:	sprintf(buf, "%s grouping with %s against %s in room %d.", ch->name, d->character->name, victim->name, ch->in_room->vnum);
fight.c:  ch->fighting = victim;
fight.c:  ch->position = POS_FIGHTING;
fight.c:  ch->damcap[DAM_CHANGE] = 1;
fight.c:    ch->embracing=NULL;
fight.c:  ch->embracing=NULL;
fight.c:  for ( fch = char_list; fch != NULL; fch = fch->next )
fight.c:    if ( fch == ch || ( fBoth && fch->fighting == ch ) )
fight.c:      fch->fighting = NULL;
fight.c:      fch->position = POS_STANDING;
fight.c:  if (ch->in_room == NULL)
fight.c:    name = ch->short_descr;
fight.c:    corpse->value[2]= ch->pIndexData->vnum;
fight.c:    name  = ch->name;
fight.c:  if (IS_SET(ch->extra, EXTRA_ZOMBIE))
fight.c:  sprintf( buf2, "Corpse of %s", ch->name );
fight.c:  for ( obj = ch->carrying; obj != NULL; obj = obj_next )
fight.c:  obj_to_room( corpse, ch->in_room );
fight.c:  if (ch->in_room == NULL) return;
fight.c:    name = IS_NPC(ch) ? ch->short_descr : ch->name;
fight.c:      obj->value[1] = ch->pIndexData->vnum;
fight.c:      {ch->pcdata->chobj = obj; obj->chobj = ch;obj->timer = number_range(1,2); obj->item_type = ITEM_HEAD;}
fight.c:      if (ch->pcdata->chobj != NULL) ch->pcdata->chobj->chobj = NULL;
fight.c:      ch->pcdata->chobj = obj;
fight.c:    obj_to_room( obj, ch->in_room );
fight.c:  if ((IS_NPC(ch) && (mount = ch->mount) == NULL) || victim == ch) return;
fight.c:  for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
fight.c:  lch = (ch->leader != NULL) ? ch->leader : ch;
fight.c:  for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
fight.c:    if (gch != NULL && gch->desc != NULL)
fight.c:      if (gch->desc->out_compress)
fight.c:    if ( !IS_NPC(gch) && !IS_SET(gch->act, PLR_BRIEF5) )
fight.c:    if ( !IS_NPC(gch) && !IS_SET(gch->act, PLR_BRIEF6) )
fight.c:    if ((temp = gch->race ) <= 4)
fight.c:    if ((temp = gch->race ) == 5)
fight.c:	if ((temp = gch->race ) == 6)
fight.c:	if ((temp = gch->race ) == 7)
fight.c:	if ((temp = gch->race ) == 8)
fight.c:	if ((temp = gch->race ) == 9)
fight.c:	if ((temp = gch->race ) == 10)
fight.c:	if ((temp = gch->race ) == 11)
fight.c:    if (!IS_NPC(gch) && gch->pcdata->kingdom != 0)
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4)) send_to_char(buf2,gch);
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4)) send_to_char(buf2,gch);
fight.c:    if (gch->exp > 2000000000)
fight.c:	gch->pcdata->quest += nQuestBonus;
fight.c:    if ((mount = gch->mount) != NULL) send_to_char( buf, mount );
fight.c:    gch->pcdata->score[SCORE_TOTAL_LEVEL] += victim->level;
fight.c:    if (victim->level > gch->pcdata->score[SCORE_HIGH_LEVEL])
fight.c:    gch->pcdata->score[SCORE_HIGH_LEVEL] += victim->level;
fight.c:    gch->pcdata->score[SCORE_TOTAL_XP] += xp;
fight.c:    if (xp > gch->pcdata->score[SCORE_HIGH_XP])
fight.c:    gch->pcdata->score[SCORE_HIGH_XP] += xp;
fight.c:  if (!IS_NPC(gch) && xp > 499 && gch->pcdata->disc_points != 999 && gch->pcdata->disc_research != -1)
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4)) stc("#RYou gained a discipline point.#n\n\r", gch);
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4)) if (victim->level > 200 && gch->pcdata->disc_points != 999)
fight.c:    if (!IS_SET(gch->act, PLR_BRIEF4)) if (victim->level > 400 && gch->pcdata->disc_points != 999)
fight.c:  if (!IS_NPC(ch) && IS_SET(ch->newbits,NEW_REND)&& dam>0 && number_range(1,7) == 5) critical=TRUE;
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:    else if ( dt == TYPE_HIT && !IS_NPC(ch) && IS_SET(ch->pcdata->classtwo[ELF_REDSTONE], ELFSTONE_FLAMERING))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:    else if ( dt == TYPE_HIT && !IS_NPC(ch) && IS_SET(ch->newbits, NEW_MONKFLAME))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:      else if (IS_SET(ch->newbits, NEW_MONKFLAME) && (dam == 0))
fight.c:	if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	else if (IS_SET(ch->newbits, NEW_MONKFLAME))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:	  if (!IS_SET(ch->act, PLR_BRIEF6))
fight.c:    if (!IS_SET(victim->act, PLR_BRIEF6) && !IS_SET(ch->act, PLR_BRIEF6))
fight.c:    if (IS_SET(ch->act, PLR_BRIEF5) && MultiHit > 0)
fight.c:	ch->pcdata->briefhit++;
fight.c:	ch->pcdata->briefdam += dam;
fight.c:    else if (!(IS_SET(ch->act, PLR_BRIEF2) &&  (dam == 0 || dt == skill_lookup("lightning bolt") ||
fight.c://  if ( IS_NPC(ch) && ch->desc == NULL) return;
fight.c:    if ( ch->pcdata->upgrade_level == 0 && ((get_age(ch) - 17) < 5) )
fight.c:  if (IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim)
fight.c:  if ( ch->position == POS_FIGHTING )
fight.c:    ch->fight_timer +=3;
fight.c:  && ch->power[DISC_WERE_BOAR] > 1 && victim->position == POS_STANDING)
fight.c:    if (ch->pcdata->powers[ANGEL_JUSTICE] >= 5) multi_hit( ch, victim, TYPE_UNDEFINED);
fight.c:  if (!IS_NPC(victim) && IS_IMMUNE(victim, IMM_BACKSTAB) && ch->power[DISC_VAMP_QUIE] < 10 &&
fight.c:  else if (!IS_AWAKE(victim) || IS_NPC(ch) || number_percent( ) < ch->pcdata->learned[gsn_backstab])
fight.c:  if((ch->pcdata->rank == BELT_SEVEN || ch->pcdata->rank == BELT_EIGHT || ch->pcdata->rank == BELT_NINE 
fight.c:    || ch->pcdata->rank == BELT_TEN) && number_range(1,3) == 1)
fight.c:  if((ch->pcdata->rank == BELT_NINE || ch->pcdata->rank == BELT_TEN) && number_range(1,6) == 1)
fight.c:  if ((victim = ch->fighting ) == NULL)
fight.c:    if (ch->position == POS_FIGHTING) ch->position = POS_STANDING;
fight.c:  if (ch->move <= 0)
fight.c:  if (IS_SET(ch->flag2, AFF_TOTALBLIND) )
fight.c:    if (ch->pcdata->powers[TANARRI_FURY_ON] == 1)
fight.c:  was_in = ch->in_room;
fight.c:    if (( now_in = ch->in_room ) == was_in)
fight.c:    ch->in_room = was_in;
fight.c:    ch->in_room = now_in;
fight.c:    if (ch->position == POS_FIGHTING) stop_fighting(ch,TRUE);;
fight.c:  if ( ch->fighting == victim )
fight.c:  if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[gsn_rescue] )
fight.c:  if (!IS_NPC(ch) && ch->level < skill_table[gsn_kick].skill_level)
fight.c:  if ( ( victim = ch->fighting ) == NULL )
fight.c:  if ((IS_NPC(ch) && ch->level<1800))
fight.c:  if ((IS_NPC(ch)) ||  number_percent( ) < ch->pcdata->learned[gsn_kick]) dam = number_range(1,4);
fight.c:  if (!IS_NPC(ch)) dam = dam + (dam * ((ch->wpn[0]+1) / 100));
fight.c:    stance = ch->stance[0];
fight.c:    && ch->pcdata->powers[SHAPE_FORM] == BULL_FORM))
fight.c:      dam *= (ch->stance[STANCE_MONKEY]+1) / 200;
fight.c:    else if ( IS_STANCE(ch, STANCE_BULL) && ch->stance[STANCE_BULL] > 100 )
fight.c:      dam += dam * (ch->stance[STANCE_BULL] / 100);
fight.c:    else if ( IS_STANCE(ch, STANCE_DRAGON) && ch->stance[STANCE_DRAGON] > 100 )
fight.c:      dam += dam * (ch->stance[STANCE_DRAGON] / 100);
fight.c:    else if ( IS_STANCE(ch, STANCE_WOLF) && ch->stance[STANCE_WOLF] > 100)
fight.c:      dam += dam*(ch->stance[STANCE_WOLF] /75);
fight.c:    else if ( IS_STANCE(ch, STANCE_TIGER) && ch->stance[STANCE_TIGER] > 100 )
fight.c:      dam += dam * (ch->stance[STANCE_TIGER] / 100);
fight.c:    else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_3) 
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 3 * (ch->stance[(ch->stance[0])] / 100);
fight.c:    else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_2)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * 2 * (ch->stance[(ch->stance[0])] / 100);  
fight.c:    else if ( ch->stance[0] > 12 && IS_SET(ch->stance[(ch->stance[0]+6)], STANCEPOWER_DAMAGE_1)
fight.c:    && ch->stance[(ch->stance[0])] >100)
fight.c:      dam += dam * (ch->stance[(ch->stance[0])] / 100);
fight.c:    else if ( ch->stance[0] > 0 && ch->stance[stance] < 100 )
fight.c:    else if (ch->stance[0] == STANCE_WOLF) dam /= 3 * (victim->stance[0]+6 /75);
fight.c:  if ( ch->level < skill_table[gsn_punch].skill_level)
fight.c:  if ( IS_NPC(ch) || number_percent( ) < ch->pcdata->learned[gsn_punch] )
fight.c:  if ( !IS_NPC(ch) ) dam = dam + (dam * (ch->wpn[0] / 100));
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_I);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_M);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_R);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_L],BROKEN_FINGER_L);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_I);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_M);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_R);broke = TRUE;}
fight.c:	{SET_BIT(ch->loc_hp[LOC_ARM_R],BROKEN_FINGER_L);broke = TRUE;}
fight.c:  if ( ch->level < skill_table[gsn_berserk].skill_level)
fight.c:  if ( number_percent( ) > ch->pcdata->learned[gsn_berserk] )
fight.c:    vch_next  = vch->next;
fight.c:    if (vch->in_room == NULL) continue;
fight.c:    if ( vch->in_room == ch->in_room )
fight.c:      if ( ( mount = ch->mount ) != NULL )
fight.c:  if (IS_NPC(ch) || (ch->in_room == NULL)) return;
fight.c:  if ( ch->level < skill_table[gsn_berserk].skill_level)
fight.c:  if ( number_percent( ) > ch->pcdata->learned[gsn_berserk] )
fight.c:  for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
fight.c:    vch_next  = vch->next_in_room;
fight.c:    if ( vch->in_room == ch->in_room )
fight.c:      if ( ( mount = ch->mount ) != NULL )
fight.c:  if ( ch->level < skill_table[gsn_berserk].skill_level)
fight.c:  if ( number_percent( ) > ch->pcdata->learned[gsn_berserk] )
fight.c:    vch_next  = vch->next;
fight.c:    if (vch->in_room == NULL) continue;
fight.c:    if (!IS_NPC(vch) && vch->pcdata->chobj != NULL) continue;
fight.c:    if ( vch->in_room == ch->in_room ) 
fight.c:      if ( ( mount = ch->mount ) != NULL ) 
fight.c:  if ( !IS_NPC(ch) && ch->pcdata->learned[gsn_hurl] < 1 )
fight.c:  if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[gsn_hurl] )
fight.c:  if (( pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
fight.c:    dam = number_range(ch->level, (ch->level * 4));
fight.c:    if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
fight.c:    dam = number_range(ch->level, (ch->level * 4));
fight.c:    if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
fight.c:      && pexit_rev->to_room == ch->in_room && pexit_rev->keyword != NULL)
fight.c:      dam = number_range(ch->level, (ch->level * 6));
fight.c:      if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
fight.c:    dam = number_range(ch->level, (ch->level * 2));
fight.c:    if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
fight.c:    &&	 ch->level < skill_table[gsn_disarm].skill_level)
fight.c:    if ( ( victim = ch->fighting ) == NULL )
fight.c:    percent = number_percent( ) + victim->level - ch->level;
fight.c:    else if ( IS_NPC(ch) || percent < ch->pcdata->learned[gsn_disarm] * 2 / 3 )
fight.c:  if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
fight.c:  if (ch->in_room != NULL)
fight.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
fight.c:    if (IS_SET (ch->in_room->room_flags, ROOM_NODECAP))
fight.c:    ch->fight_timer = 0;
fight.c:  ch->pkill++;
fight.c:   *  if (!str_cmp(ch->pcdata->last_decap[0], victim->name) || !str_cmp(ch->pcdata->last_decap[1], victim->name))
fight.c:  if (!str_cmp(ch->pcdata->last_decap[0], victim->name))
fight.c:  if (ch->level > 6 && can_decap == FALSE) can_decap = TRUE;
fight.c:      ch->pcdata->mean_paradox_counter++;
fight.c:      ch->pcdata->bounty += number_range(60,120);
fight.c:      sprintf(buf,"#P%s #owas torn to pieces by #R%s #c(#0Paradox Counter#c)#n",victim->name, ch->name);
fight.c:      if (ch->pcdata->mean_paradox_counter > 2)
fight.c:	ch->pcdata->mean_paradox_counter = 0;
fight.c:pscale=ch->pcdata->perm_str+ch->pcdata->perm_dex+ch->pcdata->perm_con+ch->pcdata->perm_wis+ch->pcdata->perm_int;
fight.c:    ch->pcdata->quest += qgain2;  
fight.c:        sprintf(buf, "#P%s, has gained %d qps for killing %s!\n\r",ch->pcdata->switchname,qgain2,victim->pcdata->switchname);
fight.c:    ch->pcdata->quest += victim->pcdata->bounty;
fight.c:  ch->exp += victim->exp / 2;
fight.c:  free_string( ch->pcdata->last_decap[1] );
fight.c:  ch->pcdata->last_decap[1] = str_dup(ch->pcdata->last_decap[0]);
fight.c:  free_string( ch->pcdata->last_decap[0] );
fight.c:  if ( !str_cmp(victim->pcdata->last_decap[0],ch->name) || !str_cmp(victim->pcdata->last_decap[1],ch->name) ) 
fight.c:	ch->pcdata->last_decap[0] = str_dup("Retaliation");
fight.c:  ch->pcdata->last_decap[0] = str_dup(victim->name);
fight.c:  if ( !str_cmp(victim->pcdata->last_decap[0],ch->name) )
fight.c:  if ( !str_cmp(victim->pcdata->last_decap[1],ch->name) )
fight.c:  ch->fight_timer = 12;
fight.c:    ch->pcdata->souls += 1;
fight.c:  if (IS_ITEMAFF(victim, ITEMA_STEELSHIELD)) REMOVE_BIT(ch->itemaffect, ITEMA_STEELSHIELD);
fight.c:  if (ch->pcdata->mean_paradox_counter > 0) ch->pcdata->mean_paradox_counter--;
fight.c:  ch->pkill++;
fight.c:  ch->race++;
fight.c:		 sprintf(buf,"%s takes %s's head causing %s to become a wraith!", ch->name, victim->name, victim->name);
fight.c:  if ( ch->pkill > 0 )
fight.c:  if(ch->pcdata->pkpoints < 0)
fight.c:    ch->pcdata->pkpoints = 0;
fight.c:  ch->pcdata->pkpoints += nDecapPoints;
fight.c:  victim->pcdata->switchname, ch->pcdata->switchname, victim->in_room->vnum );
fight.c:    amount = ((ch->pkill - ch->pdeath) * number_range(1500,2000));
fight.c:    ch->pcdata->bounty += amount;
fight.c:  if (ch->pcdata->kingdom != 0 && victim->pcdata->kingdom != 0)
fight.c:	if (ch->pcdata->kingdom == victim->pcdata->kingdom)
fight.c:	    ch->pcdata->switchname, victim->pcdata->switchname, kingdom_table[ch->pcdata->kingdom].whoname);
fight.c:	    kingdom_table[ch->pcdata->kingdom].qps -= number_range(1000,kingdom_table[ch->pcdata->kingdom].qps/10);
fight.c:	    if (kingdom_table[ch->pcdata->kingdom].qps < 0)
fight.c:		kingdom_table[ch->pcdata->kingdom].qps = 0;
fight.c:    if ( (victim = d->character)->in_room != ch->in_room )
fight.c:    ch->pcdata->bloodpower[0] += amount;
fight.c:    ch->pcdata->bloodpower[1] += amount;
fight.c:	ch->name, victim->name );
fight.c:    blood = ch->pcdata->bloodpower[0] + ch->pcdata->bloodpower[1];
fight.c:  if (ch->in_room != NULL)
fight.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
fight.c:  if (IS_SET (ch->in_room->room_flags, ROOM_NODECAP))
fight.c:  if ( ch->level < 3)
fight.c:  if ( ch->pcdata->kingdom == 0)
fight.c:    kingdom_table[ch->pcdata->kingdom].qps += victim->pcdata->bounty;
fight.c:  ch->exp += victim->exp / 2;
fight.c:  iChKingStatus = kingdom_table[ch->pcdata->kingdom].kills - kingdom_table[ch->pcdata->kingdom].deaths;
fight.c:  ch->pcdata->pkpoints += iDecapPoints;
fight.c:         && gch->in_room != NULL
fight.c:         && gch->pcdata->kingdom == ch->pcdata->kingdom)
fight.c:        sprintf(buf, "You gain %d pkpoints for %s's kingdom decapitation of %s.\n\r", iDecapPoints, ch->name, victim->name);
fight.c:        gch->pcdata->pkpoints += iDecapPoints;
fight.c:  kingdom_table[ch->pcdata->kingdom].qps += iDecapPoints;
fight.c:  sprintf(buf, "%s gains %d QP's for their kdecapitation.  Their treasury now totals %d!", kingdom_table[ch->pcdata->kingdom].whoname, iDecapPoints, kingdom_table[ch->pcdata->kingdom].qps);
fight.c:/*  free_string( ch->pcdata->last_decap[1] );
fight.c:  ch->pcdata->last_decap[1] = str_dup(ch->pcdata->last_decap[0]);
fight.c:  free_string( ch->pcdata->last_decap[0] );
fight.c:  ch->pcdata->last_decap[0] = str_dup(victim->name);*/
fight.c:  ch->fight_timer += 10;
fight.c:    ch->pcdata->souls += 1;
fight.c:  if (IS_ITEMAFF(victim, ITEMA_STEELSHIELD)) REMOVE_BIT(ch->itemaffect, 
fight.c:  victim->pcdata->switchname, ch->pcdata->switchname, 
fight.c:  ch->pcdata->bounty += number_range(30,80);
fight.c:  ch->fight_timer = 12;
fight.c: if (ch->pcdata->kingdom != 0 && victim->pcdata->kingdom != 0)
fight.c:	if(ch->pcdata->kingdom != victim->pcdata->kingdom)
fight.c:	    kingdom_table[ch->pcdata->kingdom].kills++;
fight.c:	    kingdom_table[ch->pcdata->kingdom].qps += nKingdomLoss;
fight.c:	      sprintf(ann,"%s has taken power from %s\n\r",kingdom_table[ch->pcdata->kingdom].whoname,				
fight.c:	if (ch->pcdata->kingdom == victim->pcdata->kingdom)
fight.c:	    ch->pcdata->switchname, victim->pcdata->switchname, 
fight.c:kingdom_table[ch->pcdata->kingdom].whoname);
fight.c:	    kingdom_table[ch->pcdata->kingdom].qps -= number_range(1000,kingdom_table[ch->pcdata->kingdom].qps/10);
fight.c:	    if (kingdom_table[ch->pcdata->kingdom].qps < 0)
fight.c:		kingdom_table[ch->pcdata->kingdom].qps = 0;
fight.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_SETDECAP))
fight.c:    if (victim->sex == SEX_MALE)	sprintf(buf,"#P%s #ygot his head torn off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else if (victim->sex == SEX_FEMALE) sprintf(buf,"#P%s #ygot her head torn off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else				sprintf(buf,"#P%s #ygot its head torn off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    if (victim->sex == SEX_MALE)	sprintf(buf,"#P%s #ygot his head sliced off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else if (victim->sex == SEX_FEMALE) sprintf(buf,"#P%s #ygot her head sliced off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else				sprintf(buf,"#P%s #ygot its head sliced off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    if (victim->sex == SEX_MALE)	sprintf(buf,"#P%s #ygot his heart stabbed through by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else if (victim->sex == SEX_FEMALE) sprintf(buf,"#P%s #ygot her heart stabbed through by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else				sprintf(buf,"#P%s #ygot its heart stabbed through by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    if (victim->sex == SEX_MALE)	sprintf(buf,"#P%s #ygot his head slashed off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else if (victim->sex == SEX_FEMALE) sprintf(buf,"#P%s #ygot her head slashed off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else				sprintf(buf,"#P%s #ygot its head slashed off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:  else if (obj->value[3] == 4) sprintf(buf,"#P%s #ygot strangled by #R%s",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:  else if (obj->value[3] == 5) sprintf(buf,"#R%s #yruns a clawed hand through #P%s #yand pulls out the heart#n",ch->pcdata->switchname,victim->pcdata->switchname);
fight.c:  else if (obj->value[3] == 6) sprintf(buf,"#R%s #yshoots #P%s #yseveral times and spits on the corpse#n",ch->pcdata->switchname,victim->pcdata->switchname);
fight.c:  else if (obj->value[3] == 7) sprintf(buf,"#R%s #ypounds #P%s #yon the head and the skull caves in#n",ch->pcdata->switchname,victim->pcdata->switchname);
fight.c:  else if (obj->value[3] == 8) sprintf(buf,"#R%s #ycrushes #P%s #yto a bloody pulp#n",ch->pcdata->switchname,victim->pcdata->switchname);
fight.c:  else if (obj->value[3] == 9) sprintf(buf,"#P%s #yhas been grepped by #R%s#y, that's just mean!#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:  else if (obj->value[3] == 10) sprintf(buf,"#P%s #ywas bitten to death by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:  else if (obj->value[3] == 11) sprintf(buf,"#R%s #yhas punctured the lungs of #P%s#y, what a meanie!#n",ch->pcdata->switchname,victim->pcdata->switchname);
fight.c:  else if (obj->value[3] == 12) sprintf(buf,"#R%s #ygrabs #P%s #yby the head and sucks the brain out#n",ch->pcdata->switchname,victim->pcdata->switchname);
fight.c:    if (victim->sex == SEX_MALE)	sprintf(buf,"#P%s #ygot his head sliced off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else if (victim->sex == SEX_FEMALE) sprintf(buf,"#P%s #ygot her head sliced off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    else				sprintf(buf,"#P%s #ygot its head sliced off by #R%s#n",victim->pcdata->switchname,ch->pcdata->switchname);
fight.c:    char_to_room(victim,ch->in_room);
fight.c:    char_to_room(victim,ch->in_room);
fight.c:    obj_to_room(obj, ch->in_room);
fight.c:    victim->hit = victim->hit - number_range(ch->level,(5*ch->level));
fight.c:  if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_GAROTTE)) 
fight.c:  if (ch->in_room != NULL)
fight.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
fight.c:  if (!IS_CLASS(ch, CLASS_DROW) || !IS_SET(ch->pcdata->powers[1], DPOWER_GAROTTE)
fight.c:    || !IS_SET(ch->pcdata->powers[1], DPOWER_DGAROTTE)) 
fight.c:  if (!IS_SET(ch->newbits, NEW_DARKNESS)) 
fight.c:  REMOVE_BIT(ch->newbits, NEW_DARKNESS);  
fight.c:  REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
fight.c:  if (ch->fight_timer > 0 && !IS_NPC(ch)) 
fight.c:  if (!IS_CLASS(ch, CLASS_NINJA) || ch->pcdata->powers[NPOWER_NINGENNO] < 6) 
fight.c:    if (ch->fighting == NULL) 
fight.c:    else victim = ch->fighting;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_NONE;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_CRANE;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_CRAB;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_BULL;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_VIPER;
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_MONGOOSE;
fight.c:  else if (!str_cmp(arg, "mantis") && ch->stance[STANCE_CRANE] >= 200 && ch->stance[STANCE_VIPER] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_MANTIS;
fight.c:  else if (!str_cmp(arg, "monkey") && ch->stance[STANCE_CRANE] >= 200 && ch->stance[STANCE_MONGOOSE] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_MONKEY;
fight.c:  else if (!str_cmp(arg, "swallow") && ch->stance[STANCE_CRAB] >= 200 && ch->stance[STANCE_MONGOOSE] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SWALLOW;
fight.c:  else if (!str_cmp(arg, "tiger") && ch->stance[STANCE_BULL] >= 200 && ch->stance[STANCE_VIPER] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_TIGER;
fight.c:  else if (!str_cmp(arg, "dragon") && ch->stance[STANCE_CRAB] >= 200 && ch->stance[STANCE_BULL] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_DRAGON;
fight.c:  else if (!str_cmp(arg, "wolf") && (IS_CLASS(ch, CLASS_WEREWOLF)) && ch->stance[STANCE_TIGER] >= 200 && ch->stance[STANCE_SWALLOW] >= 200 && ch->stance[STANCE_MONKEY] >= 200 && ch->stance[STANCE_MANTIS] >= 200 && ch->stance[STANCE_DRAGON] >= 200)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_WOLF;
fight.c:  else if (!str_cmp(arg, "ss1") && ch->stance[19] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS1;
fight.c:  else if (!str_cmp(arg, "ss2") && ch->stance[20] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS2;
fight.c:  else if (!str_cmp(arg, "ss3") && ch->stance[21] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS3;
fight.c:  else if (!str_cmp(arg, "ss4") && ch->stance[22] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS4;
fight.c:  else if (!str_cmp(arg, "ss5") && ch->stance[23] != -1)
fight.c:    ch->stance[MONK_AUTODROP] = STANCE_SS5;
fight.c:  if (ch->stance[MONK_AUTODROP]==STANCE_NONE) return;
fight.c:  if (ch->stance[MONK_AUTODROP]==STANCE_VIPER) sprintf(stancename,"viper");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_CRANE) sprintf(stancename,"crane");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_CRAB) sprintf(stancename,"crab");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_MONGOOSE) sprintf(stancename,"mongoose");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_BULL) sprintf(stancename,"bull");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_MANTIS) sprintf(stancename,"mantis");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_DRAGON) sprintf(stancename,"dragon");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_TIGER) sprintf(stancename,"tiger");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_MONKEY) sprintf(stancename,"monkey");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_SWALLOW) sprintf(stancename,"swallow");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_SS1) sprintf(stancename,"ss1");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_SS2) sprintf(stancename,"ss2");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_SS3) sprintf(stancename,"ss3");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_SS4) sprintf(stancename,"ss4");
fight.c:  else if (ch->stance[MONK_AUTODROP]==STANCE_SS5) sprintf(stancename,"ss5");
fight.c:  else if (ch->stance[MONK_AUTODROP]) sprintf(stancename,"wolf");
fight.c:  if (ch->stance[0] < 1) 
fight.c:    ch->stance[0] = ch->stance[MONK_AUTODROP];;
fight.c:  if (ch->level < 7 && IS_SET(ch->act, AFF_HIDE)) REMOVE_BIT(ch->act, AFF_HIDE);
fight.c:  if (ch->level < 7 && IS_SET(ch->act, PLR_WIZINVIS)) REMOVE_BIT(ch->act, PLR_WIZINVIS);
fight.c:  if (IS_SET(ch->act,PLR_SUPERINVIS) )
fight.c:	REMOVE_BIT(ch->act,PLR_SUPERINVIS);
fight.c:  if ((IS_CLASS(ch, CLASS_DROW) || IS_CLASS(ch, CLASS_DROID)) && IS_SET(ch->newbits, NEW_DARKNESS))
fight.c:    REMOVE_BIT(ch->newbits, NEW_DARKNESS);
fight.c:    REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
fight.c:       || IS_CLASS(ch, CLASS_NINJA) || IS_CLASS(ch, CLASS_MONK) ) && IS_SET(ch->act, PLR_SUPERINVIS) )
fight.c:    REMOVE_BIT(ch->act,PLR_SUPERINVIS);
fight.c:  sprintf(buf,"%s was beheaded by %s, the appocalypse continues",victim->name, ch->name);
fight.c:  if (!str_cmp(victim->pcdata->last_decap[0],ch->name) || !str_cmp(victim->pcdata->last_decap[1],ch->name) ) return TRUE;
fight.c:  if ((get_age(ch) - 17) < 5 && ch->pkill == 0) return FALSE;
fight.c:  if (ch->level != 3 || victim->level != 3) return FALSE;
fight.c:if ( (ch->race > 0) && (victim->race <= 0) ) return FALSE;
fight.c:if ( ch->pkill > 0 && victim->pkill == 0 ) return FALSE;
fight.c:if ( ( (ch->pkill - ch->pdeath ) - 3) > (victim->pkill - victim->pdeath ) ) return FALSE;
fight.c:if ( ( (ch->pkill - ch->pdeath ) + 3) < (victim->pkill - victim->pdeath ) ) return FALSE;
fight.c:if ( (	ch->race  > 0 ) && (  victim->race  <= 0 ) ) return FALSE;
fight.c:if (  victim->race  >  ch->race  )
fight.c:	if ( ( victim->race - ch->race ) > 4 ) return FALSE;
fight.c:if (  victim->race  <  ch->race )
fight.c:	if ( (	ch->race  -  victim->race ) > 4 ) return FALSE;
fight.c:	int nBaseCh = kingdom_table[ch->pcdata->kingdom].kills-kingdom_table[ch->pcdata->kingdom].deaths;
fight.c:	if (ch->pcdata->kingdom == 0 || victim->pcdata->kingdom == 0) return FALSE;
handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
handler.c:	ch = ch->desc->original;
handler.c:    if ( ch->trust != 0 )
handler.c:	return ch->trust;
handler.c:    if ( IS_NPC(ch) && ch->level >= LEVEL_HERO )
handler.c:	return ch->level;
handler.c:    return 17 + ( ch->played + (int) (current_time - ch->logon) ) / 3600;
handler.c:    return URANGE( 6, ch->pcdata->perm_str + ch->pcdata->mod_str, max );
handler.c:    return URANGE( 3, ch->pcdata->perm_int + ch->pcdata->mod_int, max );
handler.c:    return URANGE( 3, ch->pcdata->perm_wis + ch->pcdata->mod_wis, max );
handler.c:    return URANGE( 3, ch->pcdata->perm_dex + ch->pcdata->mod_dex, max );
handler.c:    return URANGE( 3, ch->pcdata->perm_con + ch->pcdata->mod_con, max );
handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:    if ( IS_NPC(ch) && IS_SET(ch->act, ACT_PET) )
handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:    if ( IS_NPC(ch) && IS_SET(ch->act, ACT_PET) )
handler.c:	SET_BIT( ch->affected_by, paf->bitvector );
handler.c:	REMOVE_BIT( ch->affected_by, paf->bitvector );
handler.c:	    case APPLY_MANA:          ch->max_mana 		+= mod;	break;
handler.c:	    case APPLY_HIT:           ch->max_hit 		+= mod; break;
handler.c:	    case APPLY_MOVE:	      ch->max_move 		+= mod; break;
handler.c:	    case APPLY_AC:            ch->armor			+= mod;	break;
handler.c:	    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
handler.c:	    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
handler.c:	    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
handler.c:	    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
handler.c:	    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
handler.c:	    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
handler.c:	    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
handler.c:	    case APPLY_POLY:	      ch->polyaff		+= mod;	break;
handler.c:    case APPLY_STR:           ch->pcdata->mod_str	+= mod;	break;
handler.c:    case APPLY_DEX:           ch->pcdata->mod_dex	+= mod;	break;
handler.c:    case APPLY_INT:           ch->pcdata->mod_int	+= mod;	break;
handler.c:    case APPLY_WIS:           ch->pcdata->mod_wis	+= mod;	break;
handler.c:    case APPLY_CON:           ch->pcdata->mod_con	+= mod;	break;
handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
handler.c:    case APPLY_AC:            ch->armor			+= mod;	break;
handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_POLY:	      ch->polyaff		+= mod;	break;
handler.c:    case APPLY_STR:           ch->pcdata->mod_str	+= mod;	break;
handler.c:    case APPLY_DEX:           ch->pcdata->mod_dex	+= mod;	break;
handler.c:    case APPLY_INT:           ch->pcdata->mod_int	+= mod;	break;
handler.c:    case APPLY_WIS:           ch->pcdata->mod_wis	+= mod;	break;
handler.c:    case APPLY_CON:           ch->pcdata->mod_con	+= mod;	break;
handler.c:    case APPLY_SEX:           ch->sex			+= mod;	break;
handler.c:    case APPLY_MANA:          ch->max_mana		+= mod;	break;
handler.c:    case APPLY_HIT:           ch->max_hit		+= mod;	break;
handler.c:    case APPLY_MOVE:          ch->max_move		+= mod;	break;
handler.c:    case APPLY_AC:            ch->armor			+= mod;	break;
handler.c:    case APPLY_HITROLL:       ch->hitroll		+= mod;	break;
handler.c:    case APPLY_DAMROLL:       ch->damroll		+= mod;	break;
handler.c:    case APPLY_SAVING_PARA:   ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_ROD:    ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_PETRI:  ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_BREATH: ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_SAVING_SPELL:  ch->saving_throw		+= mod;	break;
handler.c:    case APPLY_POLY:	      ch->polyaff		+= mod;	break;
handler.c:	    obj_to_room( wield, ch->in_room );
handler.c:	ch->power[i] = -2;
handler.c:	if( ch->power[DISC_VAMP_FORT] < 0 )
handler.c:            ch->power[DISC_VAMP_FORT] = 0;
handler.c:	if( ch->power[DISC_VAMP_CELE] < 0 )
handler.c:        ch->power[DISC_VAMP_CELE] = 0;
handler.c:	if( ch->power[DISC_VAMP_OBTE] < 0 )
handler.c:        ch->power[DISC_VAMP_OBTE] = 0;
handler.c:	if( ch->power[DISC_VAMP_PRES] < 0 )
handler.c:        ch->power[DISC_VAMP_PRES] = 0;
handler.c:	if( ch->power[DISC_VAMP_QUIE] < 0 )
handler.c:        ch->power[DISC_VAMP_QUIE] = 0;
handler.c:	if( ch->power[DISC_VAMP_THAU] < 0 )
handler.c:        ch->power[DISC_VAMP_THAU] = 0;
handler.c:	if( ch->power[DISC_VAMP_AUSP] < 0 )
handler.c:        ch->power[DISC_VAMP_AUSP] = 0;
handler.c:	if( ch->power[DISC_VAMP_DOMI] < 0 )
handler.c:        ch->power[DISC_VAMP_DOMI] = 0;
handler.c:	if( ch->power[DISC_VAMP_OBFU] < 0 )
handler.c:        ch->power[DISC_VAMP_OBFU] = 0;
handler.c:	if( ch->power[DISC_VAMP_POTE] < 0 )
handler.c:        ch->power[DISC_VAMP_POTE] = 0;
handler.c:	if( ch->power[DISC_VAMP_PROT] < 0 )
handler.c:        ch->power[DISC_VAMP_PROT] = 0;
handler.c:	if( ch->power[DISC_VAMP_SERP] < 0 )
handler.c:        ch->power[DISC_VAMP_SERP] = 0;
handler.c:	if( ch->power[DISC_VAMP_VICI] < 0 )
handler.c:        ch->power[DISC_VAMP_VICI] = 0;
handler.c:	if( ch->power[DISC_VAMP_DAIM] < 0 )
handler.c:        ch->power[DISC_VAMP_DAIM] = 0;
handler.c:	if( ch->power[DISC_VAMP_ANIM] < 0 )
handler.c:        ch->power[DISC_VAMP_ANIM] = 0;
handler.c:	if( ch->power[DISC_VAMP_CHIM] < 0 )
handler.c:	ch->power[DISC_VAMP_CHIM] = 0;
handler.c:	if( ch->power[DISC_VAMP_MELP] < 0 )
handler.c:	ch->power[DISC_VAMP_MELP] = 0;
handler.c:	if( ch->power[DISC_VAMP_NECR] < 0 )
handler.c:	ch->power[DISC_VAMP_NECR] = 0;
handler.c:	if( ch->power[DISC_VAMP_THAN] < 0 )
handler.c:	ch->power[DISC_VAMP_THAN] = 0;
handler.c:	if( ch->power[DISC_VAMP_OBEA] < 0 )
handler.c:	ch->power[DISC_VAMP_OBEA] = 0;
handler.c:	if( ch->power[DISC_WERE_BEAR] < 0 )
handler.c:        ch->power[DISC_WERE_BEAR] = 0;
handler.c:	if( ch->power[DISC_WERE_LYNX] < 0 )
handler.c:        ch->power[DISC_WERE_LYNX] = 0;
handler.c:	if( ch->power[DISC_WERE_BOAR] < 0 )
handler.c:        ch->power[DISC_WERE_BOAR] = 0;
handler.c:	if( ch->power[DISC_WERE_OWL] < 0 )
handler.c:        ch->power[DISC_WERE_OWL]  = 0;
handler.c:	if( ch->power[DISC_WERE_SPID] < 0 )
handler.c:        ch->power[DISC_WERE_SPID] = 0;
handler.c:	if( ch->power[DISC_WERE_WOLF] < 0 )
handler.c:        ch->power[DISC_WERE_WOLF] = 0;
handler.c:	if( ch->power[DISC_WERE_HAWK] < 0 )
handler.c:        ch->power[DISC_WERE_HAWK] = 0;
handler.c:	if( ch->power[DISC_WERE_MANT] < 0 )
handler.c:        ch->power[DISC_WERE_MANT] = 0;
handler.c:	if( ch->power[DISC_WERE_RAPT] < 0 )
handler.c:        ch->power[DISC_WERE_RAPT] = 0;
handler.c:	if( ch->power[DISC_WERE_LUNA] < 0 )
handler.c:        ch->power[DISC_WERE_LUNA] = 0;
handler.c:	if( ch->power[DISC_WERE_PAIN] < 0 )
handler.c:        ch->power[DISC_WERE_PAIN] = 0;
handler.c:	if( ch->power[DISC_WERE_CONG] < 0 )
handler.c:        ch->power[DISC_WERE_CONG] = 0;
handler.c:	if( ch->power[DISC_DAEM_ATTA] < 0 )
handler.c:	ch->power[DISC_DAEM_ATTA] = 0;
handler.c:	if( ch->power[DISC_DAEM_IMMU] < 0 )
handler.c:	ch->power[DISC_DAEM_IMMU] = 0;
handler.c:	if( ch->power[DISC_DAEM_TEMP] < 0 )
handler.c:	ch->power[DISC_DAEM_TEMP] = 0;
handler.c:	if( ch->power[DISC_DAEM_CORR] < 0 )
handler.c:	ch->power[DISC_DAEM_CORR] = 0;
handler.c:	if( ch->power[DISC_DAEM_HELL] < 0 )
handler.c:	ch->power[DISC_DAEM_HELL] = 0;
handler.c:	if( ch->power[DISC_DAEM_GELU] < 0 )
handler.c:	ch->power[DISC_DAEM_GELU] = 0;
handler.c:	if( ch->power[DISC_DAEM_MORP] < 0 )
handler.c:	ch->power[DISC_DAEM_MORP] = 0;
handler.c:	if( ch->power[DISC_DAEM_NETH] < 0 )
handler.c:	ch->power[DISC_DAEM_NETH] = 0;
handler.c:	if( ch->power[DISC_DAEM_DISC] < 0 )
handler.c:	ch->power[DISC_DAEM_DISC] = 0;
handler.c:    paf_new->next	= ch->affected;
handler.c:    ch->affected	= paf_new;
handler.c:  if (ch->pcdata->alias == NULL)
handler.c:  if (ali == ch->pcdata->alias)
handler.c:    ch->pcdata->alias = ali->next;
handler.c:    for (prev = ch->pcdata->alias; prev; prev = prev->next)
handler.c:    if ( ch->affected == NULL )
handler.c:    if ( paf == ch->affected )
handler.c:	ch->affected	= paf->next;
handler.c:	for ( prev = ch->affected; prev != NULL; prev = prev->next )
handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
handler.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
handler.c:    for ( paf_old = ch->affected; paf_old != NULL; paf_old = paf_old->next )
handler.c:    if ( ch->in_room == NULL )
handler.c:    pRoomIndex = ch->in_room;
handler.c:	--ch->in_room->area->nplayer;
handler.c:    &&   ch->in_room->light > 0 )
handler.c:	--ch->in_room->light;
handler.c:    &&   ch->in_room->light > 0 )
handler.c:	--ch->in_room->light;
handler.c:    if ( !IS_NPC(ch)  &&  IS_SET(ch->newbits, NEW_DARKNESS))
handler.c:	if (ch->in_room != NULL)
handler.c:	    REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS); 
handler.c:    if ( ch == ch->in_room->people )
handler.c:	ch->in_room->people = ch->next_in_room;
handler.c:	for ( prev = ch->in_room->people; prev; prev = prev->next_in_room )
handler.c:		prev->next_in_room = ch->next_in_room;
handler.c:    if ( ch->furn )
handler.c:	ch->furn->value[2]--;
handler.c:	ch->furn = NULL;
handler.c:    ch->in_room      = NULL;
handler.c:    ch->next_in_room = NULL;
handler.c:	sprintf( buf, "Char_to_room: %s -> NULL room!  Putting char in limbo (%d)", ch->name, ROOM_VNUM_LIMBO );
handler.c:    ch->in_room		= pRoomIndex;
handler.c:    ch->next_in_room	= pRoomIndex->people;
handler.c:	++ch->in_room->area->nplayer;
handler.c:	++ch->in_room->light;
handler.c:	++ch->in_room->light;
handler.c:    if (ch->loc_hp[6] > 0 && ch->in_room->blood < 1000) ch->in_room->blood += 1;
handler.c:    if ( !IS_NPC(ch)  &&  IS_SET(ch->newbits, NEW_DARKNESS))
handler.c:        SET_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);  
handler.c:    obj->next_content	 = ch->carrying;
handler.c:    ch->carrying	 = obj;
handler.c:    ch->carry_number	+= 1;
handler.c:    ch->carry_weight	+= get_obj_weight( obj );
handler.c:    if ( ch->carrying == obj )
handler.c:	ch->carrying = obj->next_content;
handler.c:	for ( prev = ch->carrying; prev != NULL; prev = prev->next_content )
handler.c:    ch->carry_number	-= 1;
handler.c:    ch->carry_weight	-= get_obj_weight( obj );
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
handler.c:        obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room( obj, ch->in_room );
handler.c:	obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room( obj, ch->in_room );
handler.c:	obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:	obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:        obj_to_room(obj, ch->in_room);
handler.c:	obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room( obj, ch->in_room ); 
handler.c:	obj_to_room( obj, ch->in_room );
handler.c:	obj_to_room( obj, ch->in_room );
handler.c:        obj_to_room( obj, ch->in_room );
handler.c:	ch->armor -= apply_ac( obj, iWear );
handler.c:    &&   ch->in_room != NULL )
handler.c:	++ch->in_room->light;
handler.c:    	if ( (chch = get_char_world(ch,ch->name)) == NULL ) return;
handler.c:    	if ( chch->desc != ch->desc) return;
handler.c:	    SET_BIT(ch->affected_by, AFF_BLIND);
handler.c:	    SET_BIT(ch->affected_by, AFF_DETECT_INVIS);
handler.c:	    SET_BIT(ch->affected_by, AFF_FLYING);
handler.c:	    SET_BIT(ch->affected_by, AFF_INFRARED);
handler.c:	    SET_BIT(ch->affected_by, AFF_INVISIBLE);
handler.c:	    SET_BIT(ch->affected_by, AFF_PASS_DOOR);
handler.c:	    SET_BIT(ch->affected_by, AFF_DETECT_HIDDEN);
handler.c:	    SET_BIT(ch->affected_by, AFF_PROTECT);
handler.c:            SET_BIT(ch->affected_by, AFF_PROTECT_GOOD);
handler.c:	    SET_BIT(ch->affected_by, AFF_SANCTUARY);
handler.c:	    SET_BIT(ch->affected_by, AFF_SNEAK);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_SHOCKSHIELD);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_FIRESHIELD);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_ICESHIELD);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_ACIDSHIELD);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_MONKCHI);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_CHAOSSHIELD);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_REGENERATE);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_SPEED);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_VORPAL);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_PEACE);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_REFLECT);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_RESISTANCE);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_VISION);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_STALKER);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_VANISH);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_AFFMANTIS);
handler.c:	   SET_BIT(ch->itemaffect, ITEMA_AFFENTROPY);
handler.c:	   SET_BIT(ch->itemaffect, ITEMA_AFFEYE);
handler.c:           SET_BIT(ch->itemaffect, ITEMA_TALON);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_RAGER);
handler.c:	    if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->rage < 100)
handler.c:		ch->rage = 300;
handler.c:		ch->rage = 300;
handler.c:		ch->rage = 125;
handler.c:		ch->rage = 125;
handler.c:            SET_BIT(ch->itemaffect, ITEMA_RETORT);
handler.c:            SET_BIT(ch->itemaffect, ITEMA_BLOCK);
handler.c:            SET_BIT(ch->itemaffect, ITEMA_STANCEA);
handler.c:	    && ch->pcdata->stats[DEMON_POWER] < 15)
handler.c:	    ch->pcdata->stats[DEMON_POWER] += 1;
handler.c:	    && ch->pcdata->stats[DEMON_POWER] < 15)
handler.c:            ch->pcdata->stats[DEMON_POWER] += 1;
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_ARTIFACT);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_RIGHT_SILVER);
handler.c:	    SET_BIT(ch->itemaffect, ITEMA_LEFT_SILVER);
handler.c:	ch->armor += apply_ac(obj, obj->wear_loc);
handler.c:    &&   ch->in_room != NULL
handler.c:    &&   ch->in_room->light > 0 )
handler.c:	--ch->in_room->light;
handler.c:    if ( (chch = get_char_world(ch,ch->name)) == NULL ) return;
handler.c:    if ( chch->desc != ch->desc) return;
handler.c:    if (!IS_NPC(ch) && (ch->desc != NULL && ch->desc->connected != CON_PLAYING)) return;
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_BLIND);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_DETECT_INVIS);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_FLYING);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_INFRARED);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_INVISIBLE);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_PASS_DOOR);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_PROTECT);
handler.c:            REMOVE_BIT(ch->affected_by, AFF_PROTECT_GOOD);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_SANCTUARY);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_SNEAK);
handler.c:	    REMOVE_BIT(ch->affected_by, AFF_DETECT_HIDDEN);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_SHOCKSHIELD);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_FIRESHIELD);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_ICESHIELD);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_ACIDSHIELD);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_MONKCHI);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_CHAOSSHIELD);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_REGENERATE);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_SPEED);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_AFFMANTIS);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_AFFENTROPY);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_AFFEYE);
handler.c:            REMOVE_BIT(ch->itemaffect, ITEMA_TALON);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_VORPAL);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_PEACE);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_REFLECT);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_RESISTANCE);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_VISION);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_STALKER);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_VANISH);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_RAGER);
handler.c:            REMOVE_BIT(ch->itemaffect, ITEMA_RETORT);
handler.c:            REMOVE_BIT(ch->itemaffect, ITEMA_BLOCK);
handler.c:            REMOVE_BIT(ch->itemaffect, ITEMA_STANCEA);
handler.c:	    && ch->pcdata->stats[DEMON_POWER] > 0)
handler.c:	    ch->pcdata->stats[DEMON_POWER] -= 1;
handler.c:	    && ch->pcdata->stats[DEMON_POWER] > 0)
handler.c:            ch->pcdata->stats[DEMON_POWER] -= 1;
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_ARTIFACT);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_RIGHT_SILVER);
handler.c:	    REMOVE_BIT(ch->itemaffect, ITEMA_LEFT_SILVER);
handler.c:    &&   ch->pcdata->chobj == obj
handler.c:	REMOVE_BIT(ch->loc_hp[0],LOST_HEAD);
handler.c:	REMOVE_BIT(ch->affected_by,AFF_POLYMORPH);
handler.c:	free_string(ch->morph);
handler.c:	ch->morph = str_dup("");
handler.c:	ch->hit = 1;
handler.c:	ch->pcdata->chobj = NULL;
handler.c:	ch->position = POS_RESTING;
handler.c:    &&   ch->pcdata->chobj == obj
handler.c:    &&   (IS_EXTRA(ch,EXTRA_OSWITCH) || ch->pcdata->obj_vnum != 0))
handler.c:	if (ch->pcdata->obj_vnum != 0)
handler.c:	    ch->pcdata->chobj = NULL;
handler.c:	    REMOVE_BIT(ch->extra,EXTRA_OSWITCH);
handler.c:	    REMOVE_BIT(ch->affected_by,AFF_POLYMORPH);
handler.c:	    free_string(ch->morph);
handler.c:	    ch->morph = str_dup("");
handler.c:	    ch->pcdata->chobj = NULL;
handler.c:    if ( ch->in_room == NULL )
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
handler.c:	--ch->pIndexData->count;
handler.c:    else if ( ch->pcdata->chobj != NULL )
handler.c:	ch->pcdata->chobj->chobj = NULL;
handler.c:	ch->pcdata->chobj = NULL;
handler.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
handler.c:    for ( wch = char_list; wch != NULL; wch = wch->next )
handler.c:	if ( wch->reply == ch )
handler.c:	    wch->reply = NULL;
handler.c:       char_list = ch->next;
handler.c:		prev->next = ch->next;
handler.c:    if ( ch->desc )
handler.c:	ch->desc->character = NULL;
handler.c:    if ( (wizard = ch->wizard) != NULL)
handler.c:	ch->wizard = NULL;
handler.c:	if ((familiar = ch->pcdata->familiar) != NULL)
handler.c:	    ch->pcdata->familiar = NULL;
handler.c:	if ((familiar = ch->pcdata->partner) != NULL)
handler.c:	    ch->pcdata->partner = NULL;
handler.c:	if ((familiar = ch->pcdata->propose) != NULL)
handler.c:	    ch->pcdata->propose = NULL;
handler.c:    else if (IS_NPC(ch) && strlen(ch->lord) > 1)
handler.c:	for ( wch = char_list; wch != NULL ; wch = wch->next )
handler.c:	    if (str_cmp(wch->name, ch->lord)) continue;
handler.c:	    if (wch->pcdata->followers > 0) wch->pcdata->followers--;
handler.c:    if ( !str_cmp( arg, "self" ) && (IS_NPC(ch) || ch->pcdata->chobj == NULL))
handler.c:    for ( rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room )
handler.c:	else if ( !can_see( ch, rch ) || ( !is_name( arg, rch->name ) &&
handler.c:	 (IS_NPC(rch) || !is_name(arg, rch->pcdata->switchname)) &&
handler.c:	    ( IS_NPC(rch) || !is_name( arg, rch->morph ))))
handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
handler.c:        if (wch->in_room == NULL) continue; // wonder if this ever happens.
handler.c:	else if ( !can_see( ch, wch ) || ( !is_name( arg, wch->name ) &&
handler.c:	 (IS_NPC(wch) || !is_name(arg, wch->pcdata->switchname)) &&
handler.c:	    ( IS_NPC(wch) || !is_name( arg, wch->morph ))))
handler.c:    if (IS_NPC(ch) || ch->pcdata->chobj == NULL || ch->pcdata->chobj->in_obj == NULL)
handler.c:    obj = ch->pcdata->chobj;
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
handler.c:    for ( obj = ch->carrying; obj != NULL; obj = obj->next_content )
handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
handler.c:    obj = get_obj_list( ch, argument, ch->in_room->contents );
handler.c:    for ( rch = pRoomIndex->people; rch != NULL; rch = rch->next_in_room )
handler.c:  if (!IS_NPC(ch) && !IS_NPC(victim) && IS_IMMORTAL(ch) && IS_IMMORTAL(victim) && ch->level >= victim->level ) return TRUE;
handler.c:  if (!IS_NPC(ch) && ( ch->level > victim->level ) ) return TRUE;
handler.c:  if (!IS_NPC(victim) && IS_SET(victim->act, PLR_WIZINVIS) && ch->level < victim->level ) return FALSE;
handler.c:  if (ch->in_room != NULL) {
handler.c:    if (IS_SET ( ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) && IS_IMMORTAL(ch) )
handler.c:    if ( IS_AFFECTED(ch, AFF_BLIND) && !IS_AFFECTED(ch, AFF_SHADOWSIGHT) && !IS_SET(ch->act, PLR_HOLYLIGHT) )
handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) ) return TRUE;
handler.c:    if ( room_is_dark( ch->in_room ) && !IS_AFFECTED(ch, AFF_INFRARED) 
handler.c:  if (!IS_NPC(ch) && IS_HEAD(ch, LOST_HEAD) &&ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:  if (!IS_NPC(ch) && IS_EXTRA(ch, EXTRA_OSWITCH) &&	ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:      if (gch->desc != NULL)
handler.c:        if (gch->desc->connected != CON_PLAYING) return FALSE;
handler.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_HOLYLIGHT) )
handler.c:    if ( room_is_dark( ch->in_room ) && !IS_AFFECTED(ch, AFF_INFRARED) 
handler.c:	ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:	ch->in_room != NULL && ch->in_room->vnum == ROOM_VNUM_IN_OBJECT)
handler.c:    if ( !IS_NPC(ch) && ch->level >= LEVEL_IMMORTAL )
handler.c:    for ( wch = char_list; wch != NULL ; wch = wch->next )
handler.c:	if ( IS_NPC(wch) && !str_cmp( argument, wch->short_descr ) ) return wch;
handler.c:  for(pObj = ch->carrying; pObj != NULL; pObj = pObj->next_content)
handler.c:  for(pObj = ch->carrying; pObj != NULL; pObj = pObj->next_content)
huto.c:      if (ch->in_room->vnum != 75)
huto.c:           (x+1),weapons[x],ch->wpn_lvl[x],(ch->wpn_lvl[x]+5)*10000);
huto.c:        if (ch->wpn[x] < 2000)
huto.c:        if (ch->pcdata->quest < ((ch->wpn_lvl[x]+5)*10000))
huto.c:      if (ch->wpn_lvl[x] > 5 )  ch->wpn_lvl[x] = 5;
huto.c:      if(ch->wpn_lvl[x] == 5)
huto.c:      ch->pcdata->quest -= ((ch->wpn_lvl[x]+5)*10000);
huto.c:      ch->wpn_lvl[x] += 1;
huto.c:      ch->wpn[x] -= 2000;
imm_spec.c:        chroom = ch->in_room;
imm_spec.c:    if ( ch->pcdata->security < 4 )
imm_spec.c:    sprintf(buf,"%s: Mload %s",ch->name,argument);
imm_spec.c:    if (ch->level < NO_WATCH && ch->trust > 3) do_watching(ch,buf);
imm_spec.c:    char_to_room( victim, ch->in_room );
imm_spec.c:    if ( ch->pcdata->security < 4 )
imm_spec.c:    sprintf(buf,"%s: Oload %s",ch->name,argument);
imm_spec.c:    if (ch->level < NO_WATCH && ch->trust > 3) do_watching(ch,buf);
imm_spec.c:        obj_to_room( obj, ch->in_room );
imm_spec.c:    obj->questmaker = str_dup(ch->name);
imm_spec.c:        for ( victim = ch->in_room->people; victim != NULL; victim = vnext )
imm_spec.c:    in_room = ch->in_room;
imm_spec.c:    if ( ch->fighting )
imm_spec.c:  if(!IS_NPC(pVictim) && (pVictim->level > ch->level))
imm_spec.c:       && gch->in_room != NULL)
imm_spec.c:        sprintf(buf, "#7%s#n\t#L%d #Rseconds#n\n\r", gch->name, gch->pcdata->kdecap_timer * 4);
imm_spec.c:    in_room = ch->in_room;
imm_spec.c:    if ( ch->fighting )
imm_spec.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
imm_spec.c:          (ch->pcdata && ch->pcdata->bamfout[0] != '\0')
imm_spec.c:          ? ch->pcdata->bamfout : "leaves in a swirling mist.",  TO_ROOM );
imm_spec.c:    if ( !IS_SET(ch->act, PLR_WIZINVIS) )
imm_spec.c:          (ch->pcdata && ch->pcdata->bamfin[0] != '\0')
imm_spec.c:          ? ch->pcdata->bamfin : "appears in a swirling mist.",  TO_ROOM );
imm_spec.c:      vch_next = vch->next_in_room;
imm_spec.c:      if ( !IS_SET(ch->act, PLR_WIZINVIS) && !IS_SET(vch->act, PLR_WIZINVIS))
imm_spec.c:      if ( !IS_SET(ch->act, PLR_WIZINVIS) && !IS_SET(vch->act, PLR_WIZINVIS))
interp.c:    if (ch->level == 12)
interp.c:	 && ch->class == cmd_table[cmd].race)
interp.c:	 && ch->power [ cmd_table[cmd].discipline ] >= cmd_table[cmd].disclevel)
interp.c:    if ( ch->position < cmd_table[cmd].position )
interp.c:    if ( (ch->class == 0 && !IS_IMMORTAL(ch)) || IS_NPC(ch) )
interp.c:      if (IS_SET(ch->special,SPC_ELF_MAGE))
interp.c:      else if (IS_SET(ch->special,SPC_ELF_WARRIOR))
interp.c:      else if (IS_SET(ch->special,SPC_ELF_ARCHER))
interp.c:	if (ch->power[i] > 0 && strlen(discipline[i]) > 0
interp.c:		&& (ch->level < 7 || argument[0] == '\0' 
interp.c:			&& ch->power[i] >= cmd_table[cmd].disclevel
interp.c:if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] > 1)
interp.c:if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] > 6)
interp.c:if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] > 8)
interp.c:if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_OBEA] > 9)
interp.c:		switch (ch->class)
interp.c:    if (!ch || !ch->in_room) return;
interp.c:    if ( !IS_NPC(ch) && IS_SET(ch->act, PLR_FREEZE) )
interp.c:    if ( !IS_NPC(ch) && IS_SET(ch->extra, EXTRA_AFK) && str_cmp(argument, "afk"))
interp.c:      for (ali = ch->pcdata->alias; ali; ali = ali->next)
interp.c:		  !IS_NPC(ch) && ch->pcdata->obj_vnum!=0)found=TRUE;
interp.c:			!IS_NPC(ch) && ch->pcdata->obj_vnum != 0) found = TRUE;
interp.c:			!IS_NPC(ch) && ch->pcdata->obj_vnum != 0) found = TRUE;
interp.c:	    else if (ch->embracing!=NULL
interp.c:		  || ch->embraced!=NULL)
interp.c:     else if (!str_cmp(cmd_table[cmd].name,"diablerize") && ch->embracing !=NULL) found=TRUE;
interp.c:		    if (ch->position > POS_STUNNED)
interp.c:    if ( ( !IS_NPC(ch) && IS_SET(ch->act, PLR_LOG) )
interp.c:	sprintf( log_buf, "Log %s: %s", ch->pcdata->switchname, logline );
interp.c:    if ( ch->desc != NULL && ch->desc->snoop_by != NULL )
interp.c:	write_to_buffer( ch->desc->snoop_by, "% ",    2 );
interp.c:	write_to_buffer( ch->desc->snoop_by, logline, 0 );
interp.c:	write_to_buffer( ch->desc->snoop_by, "\n\r",  2 );
interp.c:    if ( ch != NULL && ch->unveil != NULL )
interp.c:	unveil = ch->unveil;
interp.c:	if ( unveil->in_room->vnum != ch->in_room->vnum )
interp.c:	  sprintf(buf, "You lose your mental link with %s.\n\r",ch->name);
interp.c:	else ch->unveil = NULL;
interp.c:       if (ch->desc != NULL)
interp.c:       write_to_buffer(ch->desc,"\n\r",2);	
interp.c:    if ( ch->position < cmd_table[cmd].position )
interp.c:	switch( ch->position )
interp.c:    sprintf(log_buf, "%s %s BY %s", cmd_table[cmd].name,argument,ch->name); 
interp.c:    switch ( ch->position )
interp.c:    switch ( ch->position )
interp.c:	if( !str_cmp(ch->pcdata->switchname, "") )
interp.c:	if (xsocial_table[cmd].gender == SEX_MALE && ch->sex != SEX_MALE)
interp.c:	else if (xsocial_table[cmd].gender == SEX_FEMALE && ch->sex != SEX_FEMALE)
interp.c:	else if (xsocial_table[cmd].gender == 3 && ch->sex != SEX_FEMALE)
interp.c:	else if (xsocial_table[cmd].stage == 0 && ch->pcdata->stage[0] < 1
interp.c:	    && ch->pcdata->stage[2] > 0 && ch->sex == 5)
interp.c:	else if (xsocial_table[cmd].stage > 0 && ch->pcdata->stage[0] < 100)
interp.c:	else if (xsocial_table[cmd].stage > 1 && ch->pcdata->stage[1] < 1)
interp.c:		if (ch->sex == SEX_FEMALE && 
interp.c:		ch->pcdata->stage[1] = xsocial_table[cmd].position;
interp.c:		if (!IS_SET(ch->extra, EXTRA_DONE))
interp.c:		    SET_BIT(ch->extra, EXTRA_DONE);
interp.c:		    if (ch->sex == SEX_FEMALE)
interp.c:			ch->in_room->blood += 1;
interp.c:			ch->in_room->blood += 1;
interp.c:	    if (stage == 2) amount = ch->pcdata->stage[1];
interp.c:		if (ch->pcdata->stage[stage] >= amount) is_ok = TRUE;
interp.c:		ch->pcdata->stage[stage] += xsocial_table[cmd].self;
interp.c:		if (!is_ok && ch->pcdata->stage[stage] >= amount) 
interp.c:		    ch->pcdata->stage[0] = 0;
interp.c:		    SET_BIT(ch->extra, EXTRA_EXP);
interp.c:		    ch->exp += 100000;
interp.c:	if (ch->sex == SEX_MALE)
interp.c:	else if (ch->sex == SEX_FEMALE)
interp.c:	if (ch->sex == SEX_MALE)
interp.c:	    ch->pcdata->genes[8] += 1;
interp.c:		ch->pcdata->stage[2] = 0;
interp.c:		if (ch->pcdata->stage[0] >= 200) ch->pcdata->stage[0] -= 100;
interp.c:	    else ch->pcdata->stage[2] = 200;
interp.c:	else if (ch->sex == SEX_FEMALE)
interp.c:		ch->pcdata->stage[2] = 0;
interp.c:		if (ch->pcdata->stage[0] >= 200) ch->pcdata->stage[0] -= 100;
interp.c:	    else ch->pcdata->stage[2] = 200;
interp.c:		p->disabled_by = str_dup (ch->pcdata->switchname); /* save name of disabler */
jobo_act.c:    if (ch->pcdata->upgrade_level < 2){
jobo_act.c:  if ( ch->pcdata->quest < 50000 )
jobo_act.c:  if(!IS_IMMORTAL(ch)) ch->pcdata->quest -= 50000;
jobo_act.c:  obj->questowner = str_dup(ch->pcdata->switchname);
jobo_act.c:  ch->pcdata->rune_count++;
jobo_act.c:  if (IS_SET(ch->act, AFF_HIDE))          send_to_char("* You cannot be seen by other players.\n\r",ch);
jobo_act.c:  if (IS_SET(ch->act, PLR_WIZINVIS))      send_to_char("* You cannot be seen by other players.\n\r",ch);
jobo_act.c:  if (IS_SET(ch->newbits, NEW_DARKNESS))  send_to_char("* You are shrouded in a globe of darkness.\n\r",ch);
jobo_act.c:  if (IS_SET(ch->act,PLR_HOLYLIGHT))      send_to_char("* You have superior vision.\n\r",ch);
jobo_act.c:  int nDifference = (ch->max_hit-ch->hit)/1000;
jobo_act.c:  if (ch->in_room != NULL && ch->in_room->vnum != ROOM_VNUM_ALTAR && ch->in_room->vnum != 86000 && ch->in_room->vnum != 86010 && ch->in_room->vnum != 86020 && ch->in_room->vnum != 86030 && ch->in_room->vnum != 86099)
jobo_act.c:  if (ch->fight_timer > 0)
jobo_act.c:  if (ch->pcdata->quest < nDifference)
jobo_act.c:  ch->pcdata->quest -= nDifference;
jobo_act.c:  ch->hit  = ch->max_hit;
jobo_act.c:  ch->mana = ch->max_mana;
jobo_act.c:  ch->move = ch->max_move;
jobo_act.c:  ch->loc_hp[0] = 0;
jobo_act.c:  ch->loc_hp[1] = 0;
jobo_act.c:  ch->loc_hp[2] = 0;
jobo_act.c:  ch->loc_hp[3] = 0;
jobo_act.c:  ch->loc_hp[4] = 0;
jobo_act.c:  ch->loc_hp[5] = 0;
jobo_act.c:  ch->loc_hp[6] = 0;
jobo_act.c:  if( ch->in_room->vnum == 86000 || ch->in_room->vnum == 86010 || ch->in_room->vnum == 86020 || ch->in_room->vnum == 86030 || ch->in_room->vnum ==86099 )
jobo_act.c:    ch->pcdata->quest -= 50;
jobo_act.c:    if (gch->level > 6) continue;
jobo_act.c:    switch (gch->class)
jobo_act.c:  if (ch->pcdata->upgrade_level < 8)
jobo_act.c:  if (!IS_SET(ch->itemaffect, ITEMA_VISION))
jobo_act.c:    SET_BIT(ch->itemaffect, ITEMA_VISION);
jobo_act.c:    SET_BIT(ch->newbits, NEW_VISION);  // so we know to remove it again.
jobo_act.c:  if (ch->pcdata->upgrade_level < 2)
jobo_act.c:  if (ch->in_room->vnum >= 86000 && ch->in_room->vnum <= 86099 )
jobo_act.c:    ch->fight_timer += 6;
jobo_act.c:  chroom = ch->in_room;
jobo_act.c://    REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c://    SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c://    SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c://    REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
jobo_act.c:  if (ch->level < 7) ch->fight_timer += 3;
jobo_act.c:  if (ch->pcdata->upgrade_level < 6)
jobo_act.c:  if (ch->in_room->vnum >= 86000 && ch->in_room->vnum <= 86099 )
jobo_act.c:    ch->fight_timer += 6;
jobo_act.c:    if (gch->in_room == NULL)
jobo_act.c:    tmp = gch->desc;
jobo_act.c:    gch->desc = ch->desc;
jobo_act.c:    sprintf(buf,"A pair of eyes grows on %s's %s.\n\rThe eyes blink once, then disappear.\n\r", gch->name, obj->short_descr);
jobo_act.c:    for (victim = gch->in_room->people; victim != NULL; victim = victim->next_in_room)
jobo_act.c:    if (IS_SET(gch->extra, EXTRA_AFK))
jobo_act.c:      REMOVE_BIT(gch->extra, EXTRA_AFK);
jobo_act.c:    gch->desc = tmp;
jobo_act.c:    if (afk) SET_BIT(gch->extra, EXTRA_AFK);
jobo_act.c:    from = ch->in_room;  
jobo_act.c:  if (ch->pcdata->upgrade_level < 9)
jobo_act.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
jobo_act.c:  if (ch->pcdata->upgrade_level < 3)
jobo_act.c:  if (ch->trust < 7) send_to_char("You are being examined.\n\r",victim); 
jobo_act.c:  if (ch->level < 7) ch->fight_timer += 3;
jobo_act.c:  if ((ratio = ch->pcdata->upgrade_level) < 1)
jobo_act.c:  ch->hit += (level*1000);
jobo_act.c:  if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
jobo_act.c:  if ( ch->fighting ) WAIT_STATE(ch,6);
jobo_act.c:  if (ch->pcdata->upgrade_level < 1)
jobo_act.c:  if (ch->pcdata->upgrade_level > 0)
jobo_act.c:  if (ch->pcdata->upgrade_level > 0)
jobo_act.c:  if (ch->pcdata->upgrade_level > 1)
jobo_act.c:  if (ch->pcdata->upgrade_level > 2)
jobo_act.c:  if (ch->pcdata->upgrade_level > 3)
jobo_act.c:  if (ch->pcdata->upgrade_level > 4)
jobo_act.c:  if (ch->pcdata->upgrade_level > 5)
jobo_act.c:  if (ch->pcdata->upgrade_level > 6)
jobo_act.c:  if (ch->pcdata->upgrade_level > 7)
jobo_act.c:  if (ch->pcdata->upgrade_level > 8)
jobo_act.c:  if (IS_SET(ch->newbits, NEW_MASTERY) && ch->level < 6)
jobo_act.c:  if (ch->wpn[0] < 200 || ch->wpn[1] < 200 || ch->wpn[2] < 200 || ch->wpn[3] < 200 || ch->wpn[4] < 200
jobo_act.c:   || ch->wpn[5] < 200 || ch->wpn[6] < 200 || ch->wpn[7] < 200 || ch->wpn[8] < 200
jobo_act.c:   || ch->wpn[9] < 200 || ch->wpn[10] < 200 || ch->wpn[11] < 200 || ch->wpn[12] < 200 )
jobo_act.c:  if (ch->spl[0] < 200 || ch->spl[1] < 200 || ch->spl[2] < 200 || ch->spl[3] < 200 || ch->spl[4] < 200 )
jobo_act.c:  if (ch->stance[1] < 200 || ch->stance[2] < 200 || ch->stance[3] < 200 || ch->stance[4] < 200
jobo_act.c:   || ch->stance[5] < 200 || ch->stance[6] < 200 || ch->stance[7] < 200 || ch->stance[8] < 200
jobo_act.c:   || ch->stance[9] < 200 || ch->stance[10] < 200 )
jobo_act.c:  obj->questowner = str_dup(ch->pcdata->switchname);
jobo_act.c:  sprintf(buf,"%s has achieved mastery.",ch->name);
jobo_act.c:  SET_BIT(ch->newbits, NEW_MASTERY);
jobo_act.c:  if (ch->stance[STANCE_TIGER] < 200 || ch->stance[STANCE_SWALLOW] < 200 || ch->stance[STANCE_MONKEY] < 200
jobo_act.c:  || ch->stance[STANCE_MANTIS] < 200 || ch->stance[STANCE_DRAGON] < 200)
jobo_act.c:  if (ch->stance[19] == -1) {max_lesser = 3; currentstance = 19; min_cost=40; max_cost=240;}
jobo_act.c:  else if (ch->stance[20] == -1) {max_lesser = 4; max_greater = 1; currentstance = 20; min_cost = 80; max_cost = 280;}
jobo_act.c:  else if (ch->stance[21] == -1) {max_lesser = 4; max_greater = 2; currentstance = 21; min_cost = 120; max_cost = 300;}
jobo_act.c:  else if (ch->stance[22] == -1) {currentstance = 22; max_lesser = 4; max_greater = 4; max_supreme = 1; min_cost = 160; max_cost = 360;}
jobo_act.c:  else if (ch->stance[23] == -1) {currentstance = 23; max_lesser = 4; 
jobo_act.c:  if (currentstance > 19 && ch->stance[currentstance-7] < 200)
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DODGE)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_PARRY)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_SPEED)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_BYPASS)) {count++;cost += count*20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3)) {current_supreme++;cost += 60;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_3)) {current_supreme++;cost += 60;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3)) {current_supreme++;cost += 60;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1)) {current_lesser++;cost += 20;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2)) {current_greater++;cost += 40;}
jobo_act.c:  if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3)) {current_supreme++;cost += 60;}
jobo_act.c:    if (ch->stance[18] == 0)
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DODGE))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_PARRY))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_SPEED))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_BYPASS))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2))
jobo_act.c:      if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:    if (ch->stance[currentstance] == -1)
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DODGE)) send_to_char("Advanced Dodge.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_PARRY)) send_to_char("Advanced Parry.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_SPEED)) send_to_char("Superior Speed.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_BYPASS)) send_to_char("The Bypassing ability.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMAGE_1)) send_to_char("Lesser Damage.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMAGE_2)) send_to_char("Greater Damage.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMAGE_3)) send_to_char("Superior Damage.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_RESIST_1)) send_to_char("Lesser Resistance.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_RESIST_2)) send_to_char("Greater Resistance.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_RESIST_3)) send_to_char("Supreme Resistance.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMCAP_1)) send_to_char("Lesser Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMCAP_2)) send_to_char("Greater Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_DAMCAP_3)) send_to_char("Supreme Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_REV_DAMCAP_1)) send_to_char("Lesser reverse Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_REV_DAMCAP_2)) send_to_char("Greater reverse Damcap.\n\r",ch);
jobo_act.c:    if (IS_SET(ch->stance[currentstance], STANCEPOWER_REV_DAMCAP_3)) send_to_char("Supreme reverse Damcap.\n\r",ch);
jobo_act.c:    if (ch->exp < cost * 1000000)
jobo_act.c:    ch->stance[currentstance] = ch->stance[18];
jobo_act.c:    ch->stance[18] = 0;
jobo_act.c:    ch->exp -= cost * 1000000;
jobo_act.c:      ch->stance[18] = 0;
jobo_act.c:      if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
jobo_act.c:      ch->stance[0] = 0;
jobo_act.c:      ch->stance[13] = 0;
jobo_act.c:      ch->stance[14] = 0;
jobo_act.c:      ch->stance[15] = 0;
jobo_act.c:      ch->stance[16] = 0;
jobo_act.c:      ch->stance[17] = 0;
jobo_act.c:      ch->stance[18] = 0;
jobo_act.c:      ch->stance[19] = -1;
jobo_act.c:      ch->stance[20] = -1;
jobo_act.c:      ch->stance[21] = -1;
jobo_act.c:      ch->stance[22] = -1;
jobo_act.c:      ch->stance[23] = -1;
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_DODGE ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_DODGE);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_DODGE);
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_PARRY ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_PARRY);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_PARRY);
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_SPEED ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_SPEED);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_SPEED);
jobo_act.c:    if (IS_SET(ch->stance[18], STANCEPOWER_BYPASS ))  REMOVE_BIT(ch->stance[18], STANCEPOWER_BYPASS);
jobo_act.c:    else SET_BIT(ch->stance[18], STANCEPOWER_BYPASS);
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2) || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMAGE_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_DAMAGE_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMAGE_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_DAMAGE_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMAGE_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMAGE_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_DAMAGE_3);}
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2) || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMCAP_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_DAMCAP_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMCAP_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_DAMCAP_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_DAMCAP_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_DAMCAP_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_DAMCAP_3);}
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_RESIST_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2) || IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_RESIST_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_RESIST_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_RESIST_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1) || IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_RESIST_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_RESIST_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_RESIST_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_1) || IS_SET(ch->stance[18], STANCEPOWER_RESIST_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_RESIST_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_RESIST_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_RESIST_3);}
jobo_act.c:      if (max_lesser > current_lesser || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2) || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1)) {current_lesser--; REMOVE_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_1);}
jobo_act.c:        else {current_lesser++; SET_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_1);}
jobo_act.c:      if (max_greater > current_greater || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2)) {current_greater--; REMOVE_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_2);}
jobo_act.c:        else {current_greater++; SET_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_2);}
jobo_act.c:      if (max_supreme > current_supreme || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_1) || IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_2))
jobo_act.c:        if (IS_SET(ch->stance[18], STANCEPOWER_REV_DAMCAP_3)) {current_supreme--; REMOVE_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_3);}
jobo_act.c:        else {current_supreme++; SET_BIT(ch->stance[18], STANCEPOWER_REV_DAMCAP_3);}
jobo_act.c:  if (ch->pcdata->quest < amount)
jobo_act.c:  ch->pcdata->quest -= amount;
jobo_act.c:/*  if (IS_SET(ch->act, PLR_RIGHTHAND) || IS_SET(ch->act, PLR_LEFTHAND) || IS_SET(ch->act, PLR_AMBI))
jobo_act.c:    if ( !IS_SET(ch->act, PLR_LEFTHAND) ) SET_BIT(ch->act, PLR_LEFTHAND);
jobo_act.c:    if ( IS_SET(ch->act, PLR_RIGHTHAND) ) REMOVE_BIT(ch->act,PLR_RIGHTHAND );
jobo_act.c:    if ( IS_SET(ch->act, PLR_AMBI) ) REMOVE_BIT(ch->act,PLR_AMBI );
jobo_act.c:    if ( !IS_SET(ch->act, PLR_RIGHTHAND) ) SET_BIT(ch->act, PLR_RIGHTHAND);
jobo_act.c:    if ( IS_SET(ch->act, PLR_LEFTHAND) ) REMOVE_BIT(ch->act,PLR_LEFTHAND );
jobo_act.c:    if ( IS_SET(ch->act, PLR_AMBI) ) REMOVE_BIT(ch->act,PLR_AMBI );
jobo_act.c:    if ( IS_SET(ch->act, PLR_LEFTHAND) ) REMOVE_BIT(ch->act, PLR_LEFTHAND);
jobo_act.c:    if ( IS_SET(ch->act, PLR_RIGHTHAND) ) REMOVE_BIT(ch->act,PLR_RIGHTHAND );
jobo_act.c:    if ( !IS_SET(ch->act, PLR_AMBI) ) SET_BIT(ch->act,PLR_AMBI );
jobo_act.c:  if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
jobo_act.c:  if (ch->pcdata->alias_count >= MAX_ALIAS)
jobo_act.c:  for (ali = ch->pcdata->alias; ali; ali = ali->next)
jobo_act.c:  ali->next = ch->pcdata->alias;
jobo_act.c:  ch->pcdata->alias = ali;
jobo_act.c:  ch->pcdata->alias_count++;
jobo_act.c:  for (ali = ch->pcdata->alias; ali; ali = ali->next)
jobo_act.c:  for (ali = ch->pcdata->alias; ali; ali = ali->next)
jobo_act.c:      ch->pcdata->alias_count--;
jobo_act.c:  if (ch->sex != SEX_FEMALE)
jobo_act.c:    if (ch->pcdata->genes[4] == SEX_MALE)
jobo_act.c:    else if (ch->pcdata->genes[4] == SEX_FEMALE)
jobo_act.c:  victim->class = ch->class;
jobo_act.c:  victim->sex = ch->pcdata->genes[4];
jobo_act.c:  victim->in_room = ch->in_room;
jobo_act.c:  ch->pcdata->genes[9] += 1;
jobo_act.c:  REMOVE_BIT(ch->extra, EXTRA_PREGNANT);
jobo_act.c:  REMOVE_BIT(ch->extra, EXTRA_LABOUR);  
jobo_act.c:  if (ch->pcdata->genes[4] == SEX_MALE)
jobo_act.c:    sprintf(buf, "%s gives birth to %s's son, named %s!", ch->name, ch->pcdata->cparents, arg);
jobo_act.c:    sprintf(buf, "%s gives birth to %s's daughter, named %s!", ch->name, ch->pcdata->cparents, arg);
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETDECAP)) SET_BIT(ch->pcdata->jflags, JFLAG_SETDECAP);
jobo_act.c:  free_string(ch->pcdata->decapmessage);
jobo_act.c:  ch->pcdata->decapmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETTIE)) SET_BIT(ch->pcdata->jflags, JFLAG_SETTIE);
jobo_act.c:  free_string(ch->pcdata->tiemessage);
jobo_act.c:  ch->pcdata->tiemessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETLOGOUT)) SET_BIT(ch->pcdata->jflags, JFLAG_SETLOGOUT);
jobo_act.c:  free_string(ch->pcdata->logoutmessage);
jobo_act.c:  ch->pcdata->logoutmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETLOGIN)) SET_BIT(ch->pcdata->jflags, JFLAG_SETLOGIN);
jobo_act.c:  free_string(ch->pcdata->loginmessage);
jobo_act.c:  ch->pcdata->loginmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_act.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_NOSET))
jobo_act.c:  if (ch->pcdata->quest < cost)
jobo_act.c:    sprintf(buf,"You need %d more qps to use this command.\n\r", cost - ch->pcdata->quest);
jobo_act.c:  if (!IS_SET(ch->pcdata->jflags, JFLAG_SETAVATAR)) SET_BIT(ch->pcdata->jflags, JFLAG_SETAVATAR);
jobo_act.c:  free_string(ch->pcdata->avatarmessage);
jobo_act.c:  ch->pcdata->avatarmessage = str_dup(argument);
jobo_act.c:  ch->pcdata->quest -= cost;
jobo_data.c:  if (ch->level > 6) return;
jobo_data.c:    if (!str_cmp(ch->name,top_board[i].name))
jobo_data.c:      if (( ch->race) != top_board[i].pkscore) top_board[i].pkscore = (ch->race);
jobo_data.c:    if ((ch->race) > top_board[i].pkscore)
jobo_data.c:      top_board[i].pkscore = ch->race;
jobo_data.c:      top_board[i].name = str_dup(ch->name);
jobo_data.c:  if (ch->level > 6) return;
jobo_data.c:  if (ch->race > leader_board.bestpk_number || !str_cmp(leader_board.bestpk_name , ch->name))
jobo_data.c:    leader_board.bestpk_number = (ch->race);
jobo_data.c:    leader_board.bestpk_name = str_dup(ch->name);
jobo_data.c:  if (ch->mdeath > leader_board.md_number)
jobo_data.c:    leader_board.md_number = ch->mdeath;
jobo_data.c:    leader_board.md_name = str_dup(ch->name);
jobo_data.c:  if (ch->mkill > leader_board.mk_number)
jobo_data.c:    leader_board.mk_number = ch->mkill;
jobo_data.c:    leader_board.mk_name = str_dup(ch->name);
jobo_data.c:  if (ch->pkill > leader_board.pk_number)
jobo_data.c:    leader_board.pk_number = ch->pkill;
jobo_data.c:    leader_board.pk_name = str_dup(ch->name);
jobo_data.c:  if (ch->pdeath > leader_board.pd_number)
jobo_data.c:    leader_board.pd_number = ch->pdeath;
jobo_data.c:    leader_board.pd_name = str_dup(ch->name);
jobo_data.c:  if (ch->pcdata->questsrun > leader_board.qc_number)
jobo_data.c:    leader_board.qc_number = ch->pcdata->questsrun;
jobo_data.c:    leader_board.qc_name = str_dup(ch->name);
jobo_data.c:    leader_board.tt_name = str_dup(ch->name);
jobo_data.c:  if (ch->pcdata->awins > leader_board.ak_number)
jobo_data.c:    leader_board.ak_number = ch->pcdata->awins;
jobo_data.c:    leader_board.ak_name = str_dup(ch->name);
jobo_data.c:  if (ch->pcdata->alosses > leader_board.ad_number)
jobo_data.c:    leader_board.ad_number = ch->pcdata->alosses;
jobo_data.c:    leader_board.ad_name = str_dup(ch->name);
jobo_data.c:  if (ch->level < 7) return;
jobo_data.c:  sprintf(buf,"\n\r   #GYou #0:#G                %-4d\n\r",ch->race);
jobo_data.c:  if (ch->level < 12) return;
jobo_fight.c:  if (ch->pcdata->upgrade_level < 5)
jobo_fight.c:  if (ch->fighting == NULL)
jobo_fight.c:  for (gch=ch->in_room->people;gch!=NULL;gch = gch->next_in_room)
jobo_fight.c:    if (gch == ch->fighting) continue;
jobo_fight.c:    if (gch->fighting != NULL) continue;
jobo_fight.c:    if (gch->level > (ch->race)/2)
jobo_fight.c:    if (ch->fighting == NULL) return;
jobo_fight.c:      multi_hit(gch,ch->fighting,TYPE_UNDEFINED);
jobo_fight.c:  if (ch->pcdata->upgrade_level < 7)
jobo_fight.c:  if (IS_SET(ch->newbits, NEW_IRONMIND))
jobo_fight.c:  SET_BIT(ch->newbits, NEW_IRONMIND);
jobo_fight.c:  if (ch->in_room != NULL)
jobo_fight.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
jobo_fight.c:  if ( IS_SET(ch->in_room->room_flags,  ROOM_NODECAP ))
jobo_fight.c:/*  if (ch->class != victim->class)
jobo_fight.c:  if (ch->generation < victim->generation)
jobo_fight.c:  if (ch->generation == 0)
jobo_fight.c:  if (ch->race - 3 > victim->race)
jobo_fight.c:  sprintf(buf, "#G%s #ohas beaten #L%s #oin combat, and has stolen their generation!#n",ch->pcdata->switchname,
jobo_fight.c:  ch->generation -= 1;
jobo_fight.c:  ch->fight_timer +=5;
jobo_fight.c:  if (ch->fighting == NULL)
jobo_fight.c:  if (ch->fighting == victim)
jobo_fight.c:  ch->fighting = victim;
jobo_king.c:    if(ch->pcdata->kingdom == 0)
jobo_king.c:    if ( ch->position == POS_FIGHTING)
jobo_king.c:    if ( !IS_NPC(ch) && ch->fight_timer > 0 )
jobo_king.c:    if ( ( location = get_room_index( kingdom_table[ch->pcdata->kingdom].recall ) ) == NULL )
jobo_king.c:	REMOVE_BIT(ch->affected_by, AFF_DARKNESS);
jobo_king.c:    if ( ch->in_room == location )
jobo_king.c:    if ( (IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
jobo_king.c:    ||	 IS_AFFECTED(ch, AFF_CURSE)) && (ch->level < 6) )
jobo_king.c:    if (ch->fight_timer > 0)
jobo_king.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_NO_CHANT))
jobo_king.c:    if ( IS_SET(ch->flag2, AFF_TOTALBLIND) )
jobo_king.c:    if ( ( victim = ch->fighting ) != NULL )
jobo_king.c:    if ( ( mount = ch->mount ) == NULL ) return;
jobo_king.c:    char_to_room( mount, ch->in_room );
jobo_king.c:	int nBaseCh = kingdom_table[ch->pcdata->kingdom].kills-kingdom_table[ch->pcdata->kingdom].deaths;
jobo_king.c:	if ( IS_NPC(ch) || ch->pcdata->kingdom == 0 ) return "#0";
jobo_king.c:	if ( ch->pcdata->kingdom == nNum ) return "#y";
jobo_king.c:  if (ch->pcdata->kingdom == 0)
jobo_king.c:  if (str_cmp(kingdom_table[ch->pcdata->kingdom].leader, ch->name) &&
jobo_king.c:      str_cmp(kingdom_table[ch->pcdata->kingdom].general, ch->name))
jobo_king.c:  if (victim->max_hit < kingdom_table[ch->pcdata->kingdom].req_hit ||
jobo_king.c:      victim->max_move < kingdom_table[ch->pcdata->kingdom].req_move ||
jobo_king.c:      victim->pcdata->quest < kingdom_table[ch->pcdata->kingdom].req_qps ||
jobo_king.c:      victim->max_mana < kingdom_table[ch->pcdata->kingdom].req_mana)
jobo_king.c:  victim->pcdata->kingdom = ch->pcdata->kingdom;
jobo_king.c:  victim->pcdata->quest -= kingdom_table[ch->pcdata->kingdom].req_qps;
jobo_king.c:  kingdom_table[ch->pcdata->kingdom].qps += kingdom_table[ch->pcdata->kingdom].req_qps;
jobo_king.c:  if (IS_SET(ch->pcdata->jflags, JFLAG_WANT_KINGDOM))
jobo_king.c:    REMOVE_BIT(ch->pcdata->jflags, JFLAG_WANT_KINGDOM);
jobo_king.c:  SET_BIT(ch->pcdata->jflags, JFLAG_WANT_KINGDOM);
jobo_king.c:  if (IS_NPC(ch) || ch->level < 1)
jobo_king.c:  if ( ch->pcdata->kingdom == 0 )
jobo_king.c:  if ((i = atoi(arg1)) > ch->pcdata->quest)
jobo_king.c:  kingdom_table[ch->pcdata->kingdom].qps += i;
jobo_king.c:  ch->pcdata->quest -= i;
jobo_king.c:  sprintf(buf2, "%s puts %d qps into %s's treasury now totaling %d!",ch->name, i, kingdom_table[ch->pcdata->kingdom].whoname, kingdom_table[ch->pcdata->kingdom].qps);
jobo_king.c:  if (IS_NPC(ch) || ch->level < 1)
jobo_king.c:  sprintf(buf2, "%s takes %d qps from %s's treasury now totaling %d qps!",ch->name, i, kingdom_table[a].whoname, kingdom_table[a].qps);
jobo_king.c:  if (ch->level > 6)
jobo_king.c:  if (ch->pcdata->kingdom == 0)
jobo_king.c:  if (str_cmp(kingdom_table[ch->pcdata->kingdom].leader, ch->name))
jobo_king.c:    kingdom_table[ch->pcdata->kingdom].req_mana = atoi(value);
jobo_king.c:    kingdom_table[ch->pcdata->kingdom].req_qps = atoi(value);
jobo_king.c:    kingdom_table[ch->pcdata->kingdom].req_hit = atoi(value);
jobo_king.c:    kingdom_table[ch->pcdata->kingdom].req_move = atoi(value);
jobo_king.c:    free_string(kingdom_table[ch->pcdata->kingdom].general);
jobo_king.c:    kingdom_table[ch->pcdata->kingdom].general = str_dup(value);
jobo_king.c:  if (ch->pcdata->kingdom == 0)
jobo_king.c:  if (str_cmp(kingdom_table[ch->pcdata->kingdom].leader, ch->name) &&
jobo_king.c:      str_cmp(kingdom_table[ch->pcdata->kingdom].general, ch->name))
jobo_king.c:  if (victim->pcdata->kingdom != ch->pcdata->kingdom)
jobo_king.c:  if (!str_cmp(victim->name, kingdom_table[ch->pcdata->kingdom].leader))
jobo_king.c:  if ((i = ch->pcdata->kingdom) == 0)
jobo_king.c:  if (IS_NPC(ch) || ch->level < 7)
jobo_util.c:    if (pHelp->level > ch->level) continue;
jobo_util.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
jobo_util.c:    while ( ch->affected )
jobo_util.c:      affect_remove( ch, ch->affected );
jobo_util.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH)) REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
jobo_util.c:    if (IS_SET(ch->affected_by, AFF_ETHEREAL)) REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);  
jobo_util.c:    if (IS_EXTRA(ch,EXTRA_DRAGON)) REMOVE_BIT(ch->extra, EXTRA_DRAGON);
jobo_util.c:    if (IS_VAMPAFF(ch, VAM_CHANGED) && IS_POLYAFF(ch, POLY_WOLF))  REMOVE_BIT(ch->polyaff, POLY_WOLF);
jobo_util.c:    ch->affected_by      = 0;
jobo_util.c:    ch->armor            = 100;
jobo_util.c:    ch->hit              = UMAX( 1, ch->hit  );
jobo_util.c:    ch->mana             = UMAX( 1, ch->mana );
jobo_util.c:    ch->move             = UMAX( 1, ch->move );
jobo_util.c:    ch->hitroll          = 0;
jobo_util.c:    ch->damroll          = 0;
jobo_util.c:    ch->saving_throw     = 0;
jobo_util.c:    ch->pcdata->mod_str  = 0;
jobo_util.c:    ch->pcdata->mod_int  = 0;
jobo_util.c:    ch->pcdata->mod_wis  = 0;
jobo_util.c:    ch->pcdata->mod_dex  = 0;
jobo_util.c:    ch->pcdata->mod_con  = 0;
jobo_util.c:    ch->pcdata->followers = 0;
jobo_util.c:    if (IS_SET(ch->newbits, NEW_DFORM)) REMOVE_BIT(ch->newbits, NEW_DFORM);
jobo_util.c:    if (IS_POLYAFF(ch, POLY_ZULOFORM)) REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
jobo_util.c:    if (IS_SET(ch->newbits, NEW_CUBEFORM)) REMOVE_BIT(ch->newbits, NEW_CUBEFORM);
jobo_util.c:  if (!IS_NPC(ch) && ch->level < 7 && ch->in_room != NULL && !IS_SET(ch->in_room->room_flags,ROOM_SAFE))
jobo_util.c:    for ( wch = ch->in_room->people; wch != NULL; wch = wch_next )
jobo_util.c:      wch_next = wch->next_in_room;
jobo_util.c:      if ( !IS_NPC(wch) || !IS_SET(wch->act, ACT_AGGRESSIVE)
jobo_util.c:         || wch->fighting != NULL || IS_AFFECTED(wch, AFF_CHARM)
jobo_util.c:         || !IS_AWAKE(wch) || ( IS_SET(wch->act, ACT_WIMPY) && IS_AWAKE(ch))
jobo_util.c:      REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
jobo_util.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
jobo_util.c:      free_string( ch->morph );
jobo_util.c:      ch->morph = str_dup( "" );
jobo_util.c:    if (IS_SET(ch->newbits,NEW_DFORM)) /* spiderform */
jobo_util.c:      free_string(ch->morph);
jobo_util.c:      ch->morph = str_dup("");
jobo_util.c:      REMOVE_BIT(ch->newbits,NEW_DFORM);
jobo_util.c:      REMOVE_BIT(ch->newbits,THIRD_HAND);
jobo_util.c:      REMOVE_BIT(ch->newbits,FOURTH_HAND);
jobo_util.c:      REMOVE_BIT(ch->extra,EXTRA_DRAGON);
jobo_util.c:      free_string( ch->morph );
jobo_util.c:      ch->morph = str_dup( "" );
jobo_util.c:      REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
jobo_util.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
jobo_util.c:      free_string( ch->morph );
jobo_util.c:      ch->morph = str_dup( "" );
jobo_util.c:    if (ch->pcdata->powers[TANARRI_FURY_ON] == 1)  /* fury */
jobo_util.c:      ch->pcdata->powers[TANARRI_FURY_ON] = 0;
jobo_util.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH)) /* reset form */
jobo_util.c:      ch->pcdata->powers[SHAPE_FORM]=0;
jobo_util.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
jobo_util.c:      free_string(ch->morph);
jobo_util.c:      ch->morph=str_dup("");
jobo_util.c:    if (IS_SET(ch->newbits, NEW_CUBEFORM))  /* avatar of Lloth */
jobo_util.c:      REMOVE_BIT(ch->newbits, NEW_CUBEFORM);
jobo_util.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);  
jobo_util.c:      free_string(ch->morph);
jobo_util.c:      ch->morph=str_dup("");
jobo_util.c:    if (IS_SET(ch->pcdata->powers[AURAS], MIGHT_AURA))  /* aura of might */
jobo_util.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], MIGHT_AURA);
jobo_util.c:    if (IS_SET(ch->newbits, NEW_CUBEFORM)) /* godly favor */
jobo_util.c:      REMOVE_BIT(ch->newbits, NEW_CUBEFORM);
jobo_util.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
jobo_util.c:      free_string(ch->morph);
jobo_util.c:      ch->morph=str_dup("");
jobo_util.c:  if ((ch->pkill + ch->pdeath) == 0) ratio = 0; // to avoid divide by zero.
jobo_util.c:  else if ( ch->pdeath >= ch->pkill ) ratio = 0;
jobo_util.c:	ratio = (ch->pkill*100)-(ch->pdeath*100);
jobo_util.c:  if (ch->level > 6) return FALSE;
jobo_util.c:  for (gch = char_list; gch; gch = gch->next)
jobo_util.c:    if (gch->level > 6) continue;
jobo_util.c:    if (strlen(gch->lasthost) > 2)
jobo_util.c:      if (gch->desc)
jobo_util.c:        if (!str_cmp(gch->desc->host, ch->desc->host))
jobo_util.c:          sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:      else if (!str_cmp(gch->lasthost, ch->desc->host))
jobo_util.c:        sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:  if (ch->level > 7) return FALSE;
jobo_util.c:  for (gch = char_list; gch; gch = gch->next)
jobo_util.c:    if (strlen(gch->lasthost) > 2)
jobo_util.c:      if (gch->desc)
jobo_util.c:		  if (gch->desc->host == "dsl-123.163.240.220.lns02-waym-adl.dsl.comindico.com.au") //ditoke home
jobo_util.c:        if (!str_cmp(gch->desc->host, ch->desc->host))
jobo_util.c:          sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:	  if ( ch->level < 7 && gch->level < 7
jobo_util.c:		&& str_cmp(ch->name,"Serena") 	&& str_cmp(gch->name,"Serena")
jobo_util.c:		&& str_cmp(ch->name,"Pithound")	&& str_cmp(gch->name,"Pithound")
jobo_util.c:		&& str_cmp(ch->name,"Useless")	&& str_cmp(gch->name,"Useless") 
jobo_util.c:                && str_cmp(ch->name,"Chrono")    && str_cmp(gch->name,"Chrono")
jobo_util.c:                && str_cmp(ch->name,"Dertaherup")    && str_cmp(gch->name,"Dertaherup")
jobo_util.c:		&& str_cmp(ch->name,"Beorn")	&& str_cmp(gch->name,"Beorn") 
jobo_util.c:		&& str_cmp(ch->name,"Zizina")   && str_cmp(gch->name,"Xalode") && !IS_IMMORTAL(ch))
jobo_util.c:      else if (!str_cmp(gch->lasthost, ch->desc->host))
jobo_util.c:        sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:	if ( ch->level < 13 && gch->level < 13
jobo_util.c:                && str_cmp(ch->name,"Serena")   && str_cmp(gch->name,"Serena")
jobo_util.c:                && str_cmp(ch->name,"Pithound") && str_cmp(gch->name,"Pithound")
jobo_util.c:		&& str_cmp(ch->name,"Angela")	&& str_cmp(gch->name,"Angela")
jobo_util.c:                && str_cmp(ch->name,"Chrono")    && str_cmp(gch->name,"Chrono")
jobo_util.c:		&& str_cmp(ch->name,"Useless")	&& str_cmp(gch->name,"Useless") 
jobo_util.c:		&& str_cmp(ch->name,"Beorn")    && str_cmp(gch->name,"Beorn")
jobo_util.c:		&& str_cmp(ch->name,"Xalode")   && str_cmp(gch->name,"Zizina") && !IS_IMMORTAL(ch))
jobo_util.c:  if (ch->level > 6) return FALSE;
jobo_util.c:  for (gch = char_list; gch; gch = gch->next)
jobo_util.c:    if (gch->level > 8) continue;
jobo_util.c:    if (strlen(gch->lasthost) > 2)
jobo_util.c:      if (gch->desc)
jobo_util.c:        if (!str_cmp(gch->desc->host, ch->desc->host) && !IS_IMMORTAL(ch))
jobo_util.c:          sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:      else if (!str_cmp(gch->lasthost, ch->desc->host) && !IS_IMMORTAL(ch))
jobo_util.c:        sprintf(buf,"%s has connected from the same IP as %s", ch->name, gch->name);
jobo_util.c:  if (ch->level > 6) return FALSE;
jobo_util.c:    for (paf = ch->affected; paf != NULL; paf = paf->next)
jobo_util.c:  hps = (ch->max_hit - (spellhps + objhps));
jobo_util.c:  if (is_upgrade(ch)) limit *= (2 + ch->pcdata->upgrade_level);
jobo_util.c:  limit += ch->pdeath;   
jobo_util.c:  if (limit > ch->pkill) return FALSE;
jobo_util.c://if( IS_SET(ch->deaf, CHANNEL_CHAT)return;
jobo_util.c://if( IS_SET(ch->deaf, CHANNEL_INFO)return;
jobo_util.c:    for (paf = ch->affected; paf != NULL; paf = paf->next)
jobo_util.c:  might = (ch->max_hit - ((spellhps/2) + (objhps/2)))/1000;
jobo_util.c:  for (i = 0; i < 5; i++)  might += UMIN(2, ch->spl[i]/100);
jobo_util.c:  for (i = 0; i < 13; i++) might += UMIN(4, ch->wpn[i]/500);
jobo_util.c:  for (i = 1; i < 11; i++) might += UMIN(4, ch->stance[i]/500);
jobo_util.c:  if (IS_SET(ch->newbits, NEW_MASTERY)) might += 2;
jobo_util.c:  if (ch->stance[23] != -1) might += 250;
jobo_util.c:  else if (ch->stance[22] != -1) might += 200;
jobo_util.c:  else if (ch->stance[21] != -1) might += 150;
jobo_util.c:  else if (ch->stance[20] != -1) might += 100;
jobo_util.c:  else if (ch->stance[19] != -1) might += 50;
jobo_util.c:  else if (ch->generation >= 0) might += 30*(6-ch->generation);
jobo_util.c:  if (ch->pkill >= 1)
jobo_util.c:  if (ch->pdeath*5 < ch->pkill*25)
jobo_util.c:      might += ((ch->pkill*50)-(ch->pdeath*10));
jobo_util.c:/*  if ( ch->pcdata->bloodpower[0] > 0 )
jobo_util.c:    might += ch->pcdata->bloodpower[0];
jobo_util.c:  if ( ch->pcdata->bloodpower[1] > 0 )
jobo_util.c:    might += ch->pcdata->bloodpower[1];*/
jobo_util.c:    if (ch->pcdata->rune_count > 0) might += UMIN(150, ch->pcdata->rune_count * 10);
jobo_util.c:    if ((temp = ch->race) >= 5) might += UMIN(100, temp / 5);  // 10 points for each pkpower.
jobo_util.c:    if (ch->pcdata->upgrade_level > 0) might += ch->pcdata->upgrade_level * 50;
jobo_util.c:  if (ch->pcdata->revision == CURRENT_REVISION) return;
jobo_util.c:  switch (ch->pcdata->revision)
jobo_util.c:        ch->pcdata->classone[i] = 0;
jobo_util.c:	ch->pcdata->classtwo[i] = 0;
jobo_util.c:        ch->pcdata->classthree[i] = 0;
jobo_util.c:        ch->pcdata->classfour[i] = 0;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      if ( ch->pkill <= 0 ) {ch->pcdata->pkpoints = 0;}
jobo_util.c:	{ch->pcdata->pkpoints = ch->pkill;}
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->store = ch->pcdata->classone[0];
jobo_util.c:      ch->pcdata->classone[0] = 0;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      if ( ch->max_hit > 200000 ) ch->max_hit = 200000;
jobo_util.c:      if ( ch->max_mana > 200000 ) ch->max_mana = 200000;
jobo_util.c:      if ( ch->max_move > 200000 ) ch->max_move = 200000;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      if ((ch->pkill - ch->pdeath) < 0)
jobo_util.c:	ch->race = 0;
jobo_util.c:      ch->race = (ch->pkill - ch->pdeath);
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->wpn_lvl[i] = 0;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->Bootcamp[i] = 0;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->pcdata->phoenix[i] = 0;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:      ch->act2 = 0;
jobo_util.c:      ch->pcdata->revision++;
jobo_util.c:  size = strlen2(ch->pcdata->logoutmessage);
jobo_util.c:  dmess = ch->pcdata->logoutmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->tiemessage);
jobo_util.c:  dmess = ch->pcdata->tiemessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->loginmessage);
jobo_util.c:  dmess = ch->pcdata->loginmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->decapmessage);
jobo_util.c:  dmess = ch->pcdata->decapmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:  size = strlen2(ch->pcdata->avatarmessage);
jobo_util.c:  dmess = ch->pcdata->avatarmessage;
jobo_util.c:      case 'n': i = ch->name; break;
jobo_util.c:      case 'e': i = he_she  [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 'm': i = him_her [URANGE(0, ch->sex, 1)]; break;
jobo_util.c:      case 's': i = his_her [URANGE(0, ch->sex, 1)]; break;
jobo_wiz.c:  if (ch->level < 12) return;
jobo_wiz.c:    if (gch->level > 6) continue;
jobo_wiz.c:    if (IS_SET(gch->act, PLR_SILENCE))
jobo_wiz.c:      sprintf(buf,"%-15s is silenced\n\r",gch->name);
jobo_wiz.c:  if (ch->level < 12) return;
jobo_wiz.c:  victim->desc = ch->desc;
jobo_wiz.c:  /*if (ch->level < MAX_LEVEL) return;*/
jobo_wiz.c:/*  if (ch->level < MAX_LEVEL)
jobo_wiz.c:    victim->desc = ch->desc;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;  
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:  victim->desc = ch->desc;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:      if (jope_table[cmd].level > ch->level)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if (!ch->desc) return;
jope.c:  ch->desc->connected = CON_PLAYING;
jope.c:      && jope_table[cmd].level <= ch->level)
jope.c:  if (ch->desc != NULL) write_to_buffer(ch->desc,"\n\r", 2);
jope.c:  if (!ch->desc) return;
jope.c:  ch->desc->connected = CON_PFILE;
jope.c:  if (ch->pcdata->pfile->level > ch->level)
jope.c:    ch->desc->connected = CON_PLAYING;
jope.c:  if (ch->pcdata->pfile != NULL)
jope.c:  if (load_char_obj(dummy, arg)) ch->pcdata->pfile = dummy->character;
jope.c:  if (ch->pcdata->pfile == NULL) return FALSE;
jope.c:  if ((victim = ch->pcdata->pfile) == NULL)
jope.c:  if (ch->level >= JOPE_SAVE_LEVEL) save_char_obj(victim);
jope.c:  ch->pcdata->pfile = NULL;
kahn.c:	ch->pcdata->classthree[KAHN_FORMS],
kahn.c:	ch->pcdata->classthree[KAHN_RANKS],
kahn.c:	ch->pcdata->classthree[KAHN_COMBAT],
kahn.c:	ch->pcdata->classthree[KAHN_TIGER]);
kahn.c:	cost = (ch->pcdata->classthree[learn]+1) * 2000;
kahn.c:	if ( ch->pcdata->classthree[learn] >= max)
kahn.c:	if (ch->pcdata->classthree[learn] >=max)
kahn.c:	if ( cost > ch->pcdata->stats[KAHN_CURRENT] )
kahn.c:	ch->pcdata->classthree[learn] += 1;
kahn.c:	ch->pcdata->stats[KAHN_CURRENT] -= cost;
kahn.c:	victim=ch->fighting;
kahn.c:    if (ch->pcdata->classthree[KAHN_COMBAT] < 4)
kahn.c:    if (arg[0] == '\0' && ch->fighting == NULL)
kahn.c:    if ( ( victim = ch->fighting ) == NULL )
kahn.c:    ch->fighting = victim;
kahn.c:    ch->position = POS_FIGHTING;
kahn.c:        if ((ch->pcdata->classthree[KAHN_FORMS] < 3))
kahn.c:    if ( !IS_SET(ch->polyaff, POLY_ZULOFORM) )
kahn.c:    if (ch->mounted == IS_RIDING) do_dismount(ch,"");
kahn.c:	SET_BIT(ch->polyaff, POLY_ZULOFORM);
kahn.c:	SET_BIT(ch->affected_by, AFF_POLYMORPH);
kahn.c:        ch->damroll += 2000;
kahn.c:        ch->hitroll += 2000;
kahn.c:        ch->armor   -= 2000;
kahn.c:	sprintf(buf, "#GThe ravenging weretiger #y%s#n", ch->name);
kahn.c:	free_string( ch->morph );
kahn.c:    	ch->morph = str_dup( buf );
kahn.c:    else if ( IS_SET(ch->polyaff, POLY_ZULOFORM) )
kahn.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
kahn.c:	REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
kahn.c:        ch->damroll -= 2000;
kahn.c:        ch->hitroll -= 2000;
kahn.c:        ch->armor   += 2000;
kahn.c:  	free_string( ch->morph );
kahn.c:    	ch->morph = str_dup( "" );
kahn.c:    if (ch->pcdata->classthree[KAHN_COMBAT] < 1)
kahn.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
kahn.c:	REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
kahn.c:	SET_BIT(ch->act, PLR_HOLYLIGHT);
kahn.c:	ch->move -= 750;
kahn.c:    if (ch->pcdata->classthree[KAHN_COMBAT] < 3)
kahn.c:    if ( ch->position == POS_FIGHTING )
kahn.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
kahn.c:	else if (ch->pcdata->classthree[KAHN_FORMS] < 1)
kahn.c:	else if (ch->move < 500)
kahn.c:	else if (ch->position == POS_FIGHTING)
kahn.c:	ch->move = ch->move - 500;
kahn.c:	if (ch->fight_timer == 0)
kahn.c:	  ch->hit = ch->hit + ch->max_hit / 4;
kahn.c:	else if (ch->fight_timer > 0)
kahn.c:	  ch->hit = ch->hit + 500;
kahn.c:	if (ch->hit > ch->max_hit)
kahn.c:		ch->hit = ch->max_hit;
kahn.c:	if (ch->pcdata->classthree[KAHN_FORMS] < 4)
kahn.c:  if (!IS_SET(ch->newbits, NEW_JAWLOCK))
kahn.c:  SET_BIT(ch->newbits, NEW_JAWLOCK);
kahn.c:  else if (IS_SET(ch->newbits, NEW_JAWLOCK))
kahn.c:  REMOVE_BIT(ch->newbits,NEW_JAWLOCK);
kahn.c:	if(ch->pcdata->classthree[KAHN_RANKS] < 5)
kahn.c:		vch_next = vch->next;
kahn.c:		if(ch->in_room->vnum != vch->in_room->vnum) continue;
kahn.c:		ch->fighting = vch;
kahn.c:		vch->fighting = ch;
kahn.c:	    	ch->position = POS_FIGHTING;
kahn.c:    		vch->position = POS_FIGHTING;
kahn.c:  if ( ch->fighting != NULL ) 
kahn.c:     victim = ch->fighting;
kahn.c:if (ch->pcdata->classthree[KAHN_COMBAT] < 5)
kahn.c:  if (ch->pcdata->classthree[KAHN_TICK] > 0)
kahn.c:        if ( ch->mana < 300 )
kahn.c:        ch->mana -= 300;
kahn.c:  ch->pcdata->classthree[KAHN_TICK] = 1;
kahn.c:    if (ch->pcdata->classthree[KAHN_RANKS] < 2)
kahn.c:    af.duration  = ch->spl[PURPLE_MAGIC];
kahn.c:  if (ch->pcdata->classthree[KAHN_FORMS] < 5)
kahn.c:if ( ch->fighting == NULL ) 
kahn.c:  victim = ch->fighting;
kahn.c:for ( gch = char_list; gch != NULL; gch = gch->next )
kahn.c:if ( !str_cmp(ch->clan,gch->clan) )
kahn.c:       capitalize( gch->name ),
kahn.c:       gch->hit,gch->mana,gch->move,
kahn.c:       gch->exp);
kahn.c:    if (ch->pcdata->classthree[KAHN_TIGER] < 5)
kahn.c:    if ( IS_SET(ch->act, PLR_SUPERINVIS) )
kahn.c:        REMOVE_BIT(ch->act, PLR_SUPERINVIS);
kahn.c:        if (ch->fight_timer >0) {
kahn.c:	SET_BIT(ch->act, PLR_SUPERINVIS);
kahn.c:    if ( !IS_SET(ch->act, PLR_SUPERINVIS) )
kahn.c:	REMOVE_BIT(ch->act, PLR_SUPERINVIS);
kahn.c:        if (ch->rage >0)
kahn.c:	if (ch->pcdata->classthree[KAHN_FORMS] < 2)
kahn.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
kahn.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_FANGS);
kahn.c:  int red_magic = ch->spl[RED_MAGIC];
kahn.c:  int blue_magic = ch->spl[BLUE_MAGIC];
kahn.c:  int green_magic = ch->spl[GREEN_MAGIC];
kahn.c:  int purple_magic = ch->spl[PURPLE_MAGIC];
kahn.c:  int yellow_magic = ch->spl[YELLOW_MAGIC];
kahn.c:  int magic_power = ch->spl[RED_MAGIC] + ch->spl[BLUE_MAGIC] + ch->spl[GREEN_MAGIC] + ch->spl[PURPLE_MAGIC] + ch->spl[YELLOW_MAGIC];
kahn.c:    if (ch->mana <2500)
kahn.c:    if (ch->position == POS_DEAD)
kahn.c:    ch->mana -= count * 500;
kahn.c:	if (!IS_CLASS(ch, CLASS_KAHN) || ch->pcdata->classthree[KAHN_TIGER] < 2) {
kahn.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
kahn.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
kahn.c:        if (ch->pcdata->classthree[KAHN_TIGER] < 3)
kahn.c:	  REMOVE_BIT(ch->extra, EXTRA_AWE);
kahn.c:        SET_BIT(ch->extra, EXTRA_AWE);
kahn.c:    else if (ch->pcdata->upgrade_level >= 1){
kahn.c:    if ( ch->practice < 60)
kahn.c:    ch->practice -= 60;
kahn.c:    obj->questowner = str_dup(ch->pcdata->switchname);
kahn.c:ch->pcdata->quest += obj->points;
kahn.c:else if(ch->practice < joshval*750)
kahn.c:ch->practice -= joshval*750;
kahn.c:ch->practice=0;*/
kav_fight.c://    if (ch->level < LEVEL_AVATAR) return;
kav_fight.c://    if (IS_CLASS(ch, CLASS_DROW) && (IS_SET(ch->special, SPC_DROW_WAR) || ch->generation >= 3)) max_skl = 5000;
kav_fight.c://    if (IS_CLASS(ch, CLASS_DROW) && (IS_SET(ch->special, SPC_DROW_WAR) || ch->generation < 3)) max_skl = 6000;
kav_fight.c://    if (IS_CLASS(ch, CLASS_DROW) && (IS_SET(ch->special, SPC_DROW_MAG) || ch->generation >= 3)) max_skl = 4000;
kav_fight.c://    if (IS_CLASS(ch, CLASS_DROW) && (IS_SET(ch->special, SPC_DROW_MAG) || ch->generation < 3)) max_skl = 4000;
kav_fight.c://    if (IS_CLASS(ch, CLASS_DROW) && (IS_SET(ch->special, SPC_DROW_CLE) || ch->generation >= 3)) max_skl = 4000;
kav_fight.c://    if (IS_CLASS(ch, CLASS_DROW) && (IS_SET(ch->special, SPC_DROW_CLE) || ch->generation < 3)) max_skl = 4000;
kav_fight.c:    else if (ch->class == CLASS_WEREWOLF) max_skl = 6000;
kav_fight.c:    else if (ch->class == CLASS_DROW) max_skl = 7000;
kav_fight.c:    else if (ch->class == CLASS_MONK) max_skl = 8000;
kav_fight.c:    else if (IS_CLASS(ch, CLASS_DROID) && (ch->pcdata->powers[CYBORG_LIMBS] > 3)) max_skl = 5000;
kav_fight.c:    else if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT)) max_skl = UMAX(500, ch->pcdata->powers[WEAPONSKILL] * 550);
kav_fight.c:    else if (IS_CLASS(ch, CLASS_MILITARY)) max_skl= 1000+(800*ch->pcdata->Bootcamp[0]); 
kav_fight.c:    else if (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_MAGE)) max_skl = 3000;
kav_fight.c:    else if (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_WARRIOR)) max_skl = 7000;
kav_fight.c:    else if (IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_ARCHER)) max_skl = 4000;
kav_fight.c:    if (ch->generation == 2) max_skl += max_skl *0.1;
kav_fight.c:    else if(ch->generation == 1) max_skl += max_skl *0.2;
kav_fight.c:    else if(ch->generation == 0) max_skl += max_skl *0.3;
kav_fight.c://    if( ch->level < 3 ) max_skl = 2000;
kav_fight.c:    if (ch->wpn[dtype] > max_skl) ch->wpn[dtype] = max_skl;
kav_fight.c:    if (ch->wpn[dtype] >= max_skl) return;
kav_fight.c:    trapper = ch->wpn[dtype];
kav_fight.c:    if ((dice1 > ch->wpn[dtype] || dice2 > ch->wpn[dtype]) || (dice1>= 99 || dice2>=99))
kav_fight.c:	ch->wpn[dtype] += number_range(1,5);
kav_fight.c:    if (trapper == ch->wpn[dtype]) return;
kav_fight.c:         if (ch->wpn[dtype] == 1   ) sprintf(bufskill,"slightly skilled");
kav_fight.c:    else if (ch->wpn[dtype] == 26  ) sprintf(bufskill,"reasonable");
kav_fight.c:    else if (ch->wpn[dtype] == 51  ) sprintf(bufskill,"fairly competent");
kav_fight.c:    else if (ch->wpn[dtype] == 76  ) sprintf(bufskill,"highly skilled");
kav_fight.c:    else if (ch->wpn[dtype] == 101 ) sprintf(bufskill,"very dangerous");
kav_fight.c:    else if (ch->wpn[dtype] == 126 ) sprintf(bufskill,"extremely deadly");
kav_fight.c:    else if (ch->wpn[dtype] == 151 ) sprintf(bufskill,"an expert");
kav_fight.c:    else if (ch->wpn[dtype] == 176 ) sprintf(bufskill,"a master");
kav_fight.c:    else if (ch->wpn[dtype] == 200 ) sprintf(bufskill,"a grand master");
kav_fight.c:    else if (ch->wpn[dtype] == 201 ) sprintf(bufskill,"supremely skilled");
kav_fight.c:    else if (ch->wpn[dtype] == 1000 ) sprintf(bufskill,"divinely skilled");
kav_fight.c:    else if (ch->wpn[dtype] == 5000 ) sprintf(bufskill,"a superior master");
kav_fight.c:    else if (ch->wpn[dtype] == 11000 ) sprintf(bufskill,"a ULTIMATE MASTER");
kav_fight.c:    stance = ch->stance[0];
kav_fight.c:    if (ch->stance[stance] >= 10000) {ch->stance[stance] = 10000; return;}
kav_fight.c:    if ((dice1 > ch->stance[stance] && dice2 > ch->stance[stance]) ||(dice1>=98 || dice2>=99)) 
kav_fight.c:	ch->stance[stance] += number_range(1,5);
kav_fight.c:    if (stance == ch->stance[stance]) return;
kav_fight.c:         if (ch->stance[stance] == 1  ) sprintf(bufskill,"an apprentice of");
kav_fight.c:    else if (ch->stance[stance] == 26 ) sprintf(bufskill,"a trainee of");
kav_fight.c:    else if (ch->stance[stance] == 51 ) sprintf(bufskill,"a student of");
kav_fight.c:    else if (ch->stance[stance] == 76 ) sprintf(bufskill,"fairly experienced in");
kav_fight.c:    else if (ch->stance[stance] == 101) sprintf(bufskill,"well trained in");
kav_fight.c:    else if (ch->stance[stance] == 126) sprintf(bufskill,"highly skilled in");
kav_fight.c:    else if (ch->stance[stance] == 151) sprintf(bufskill,"an expert of");
kav_fight.c:    else if (ch->stance[stance] == 176) sprintf(bufskill,"a master of");
kav_fight.c:    else if (ch->stance[stance] == 200) sprintf(bufskill,"a grand master of");
kav_fight.c:    else if (ch->stance[stance] == 500) sprintf(bufskill,"a superior master of");
kav_fight.c:    else if (ch->stance[stance] == 1000) sprintf(bufskill,"a godly master of");
kav_fight.c:    else if (ch->stance[stance] == 2000) sprintf(bufskill,"a grand expert of");
kav_fight.c:    else if (ch->stance[stance] == 5000) sprintf(bufskill,"a supergrand master of");
kav_fight.c:    else if (ch->stance[stance] == 10000) sprintf(bufskill,"the ultimate master of");
kav_fight.c:	ch->alignment = 1000;
kav_fight.c:        if (IS_SET(ch->affected_by, AFF_PROTECT_GOOD)) REMOVE_BIT(ch->affected_by, AFF_PROTECT_GOOD);
kav_fight.c:        if (IS_SET(ch->affected_by, AFF_PROTECT_GOOD)) REMOVE_BIT(ch->affected_by, AFF_PROTECT_GOOD);
kav_fight.c:        if (IS_SET(ch->affected_by, AFF_PROTECT)) REMOVE_BIT(ch->affected_by, AFF_PROTECT);
kav_fight.c:	ch->alignment = 0;
kav_fight.c:        if (IS_SET(ch->affected_by, AFF_PROTECT)) REMOVE_BIT(ch->affected_by, AFF_PROTECT);
kav_fight.c:	ch->alignment = -1000;
kav_fight.c:    ch->exp -= ch->exp * 0.1;
kav_fight.c:	( ch->class == 1 || ch->class == 2 ))
kav_fight.c:	ch->class = 3;
kav_fight.c:	sprintf(buf,"%s has turned renegade!",ch->name);
kav_fight.c:    if (ch->class == 1)
kav_fight.c:    else if (ch->class == 2)
kav_fight.c:    else if (ch->class == 3)
kav_fight.c:	ch->class = 1;
kav_fight.c:	sprintf(buf,"%s has sided with the scavengers!",ch->name);
kav_fight.c:	ch->class = 2;
kav_fight.c:	sprintf(buf,"%s has sided with the mutants!",ch->name);
kav_fight.c:    location = ch->in_room;
kav_fight.c:    if (( pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:	obj_to_room(obj, ch->in_room);
kav_fight.c:    pexit = ch->in_room->exit[door];
kav_fight.c:	obj_to_room(obj, ch->in_room);
kav_fight.c:    if (( pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:	obj_to_room(obj, ch->in_room);
kav_fight.c:    pexit = ch->in_room->exit[door];
kav_fight.c:	obj_to_room(obj, ch->in_room);
kav_fight.c:    if (( pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:	obj_to_room(obj, ch->in_room);
kav_fight.c:    pexit = ch->in_room->exit[door];
kav_fight.c:	obj_to_room(obj, ch->in_room);
kav_fight.c:    obj_to_room(obj, ch->in_room);
kav_fight.c:   /*  if (IS_SET(ch->mounted, IS_RIDING))
kav_fight.c:	&& !IS_SET(ch->flag2, VAMP_OBJMASK) && !IS_SET(ch->newbits, NEW_CUBEFORM) && !IS_CLASS(ch, CLASS_SHAPESHIFTER))
kav_fight.c:	if (ch->stance[0] == -1)
kav_fight.c:	    ch->stance[0] = 0;
kav_fight.c:	    ch->stance[0] = -1;
kav_fight.c:    if (ch->stance[0] > 0)
kav_fight.c:	if (!str_cmp(arg,"mantis") && ch->stance[STANCE_CRANE] >= 200 &&
kav_fight.c:	    ch->stance[STANCE_VIPER] >= 200)
kav_fight.c:	else if (!str_cmp(arg,"dragon") && ch->stance[STANCE_BULL] >= 200 &&
kav_fight.c:	    ch->stance[STANCE_CRAB] >= 200)
kav_fight.c:	else if (!str_cmp(arg,"tiger") && ch->stance[STANCE_BULL] >= 200 &&
kav_fight.c:	    ch->stance[STANCE_VIPER] >= 200)
kav_fight.c:	else if (!str_cmp(arg,"monkey") && ch->stance[STANCE_CRANE] >= 200 &&
kav_fight.c:	    ch->stance[STANCE_MONGOOSE] >= 200)
kav_fight.c:	else if (!str_cmp(arg,"swallow") && ch->stance[STANCE_CRAB] >= 200 &&
kav_fight.c:	    ch->stance[STANCE_MONGOOSE] >= 200)
kav_fight.c:  else if (!str_cmp(arg,"ss1") && ch->stance[19] != -1)
kav_fight.c:  else if (!str_cmp(arg,"ss2") && ch->stance[20] != -1)
kav_fight.c:  else if (!str_cmp(arg,"ss3") && ch->stance[21] != -1)
kav_fight.c:  else if (!str_cmp(arg,"ss4") && ch->stance[22] != -1)
kav_fight.c:  else if (!str_cmp(arg,"ss5") && ch->stance[23] != -1)
kav_fight.c:	else if (!str_cmp(arg,"wolf") && ch->stance[STANCE_SWALLOW] >= 200
kav_fight.c:&& ch->stance[STANCE_TIGER] >= 200 && ch->stance[STANCE_MANTIS] >= 200 &&
kav_fight.c:ch->stance[STANCE_DRAGON] >= 200 && ch->stance[STANCE_MONKEY] >= 200 &&
kav_fight.c:ch->power[DISC_WERE_WOLF]> 4 )
kav_fight.c:    ch->stance[0] = selection;
kav_fight.c:	sprintf(buf,"Selected options: 1:[%d] 2:[%d] 3:[%d] 4:[%d] 5:[%d] 6:[%d] 7:[%d] 8:[%d].\n\r",ch->cmbt[0],ch->cmbt[1],
kav_fight.c:	ch->cmbt[2],ch->cmbt[3],ch->cmbt[4],ch->cmbt[5],ch->cmbt[6],ch->cmbt[7]);
kav_fight.c:      if (ch->cmbt[i] == selection && selection !=0 && !(value-1 == i) )
kav_fight.c:    ch->cmbt[(value-1)] = selection;
kav_fight.c:    sprintf(buf,"Combat option %d now set to %s (%d).\n\r",value,arg2,ch->cmbt[0]);
kav_fight.c:	if ( number_percent( ) * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:	if( number_percent() * 4.5 <= ch->wpn[0] )
kav_fight.c:    if (IS_NPC(ch)) critical += ((ch->level+1) / 5);
kav_fight.c:    if (!IS_NPC(ch)) critical += ((ch->wpn[dtype]+1)/10);
kav_fight.c:if (!IS_NPC(ch) && IS_SET(ch->newbits,NEW_REND)&& number_range(1,25)==1)
kav_fight.c:    if (( pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_fight.c:	dam = number_range(ch->level, (ch->level * 4));
kav_fight.c:      	if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
kav_fight.c:	&&   pexit_rev->to_room == ch->in_room
kav_fight.c:	    dam = number_range(ch->level, (ch->level * 6));
kav_fight.c:    	    if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
kav_fight.c:	dam = number_range(ch->level, (ch->level * 2));
kav_fight.c:    	if (IS_NPC(victim) && !IS_NPC(ch)) ch->mkill = ch->mkill + 1;
kav_info.c:    if      (ch->spl[dtype] == 00 ) sprintf(bufskill,"untrained at");
kav_info.c:    else if (ch->spl[dtype] <= 25 ) sprintf(bufskill,"an apprentice at");
kav_info.c:    else if (ch->spl[dtype] <= 50 ) sprintf(bufskill,"a student at");
kav_info.c:    else if (ch->spl[dtype] <= 75 ) sprintf(bufskill,"a scholar at");
kav_info.c:    else if (ch->spl[dtype] <= 100) sprintf(bufskill,"a magus at");
kav_info.c:    else if (ch->spl[dtype] <= 125) sprintf(bufskill,"an adept at");
kav_info.c:    else if (ch->spl[dtype] <= 150) sprintf(bufskill,"a mage at");
kav_info.c:    else if (ch->spl[dtype] <= 175) sprintf(bufskill,"a warlock at");
kav_info.c:    else if (ch->spl[dtype] <= 199) sprintf(bufskill,"a master wizard at");
kav_info.c:    else if (ch->spl[dtype] >= 300) sprintf(bufskill,"a lich master of");
kav_info.c:    else if (ch->spl[dtype] >= 240) sprintf(bufskill,"the complete master of");
kav_info.c:    else if (ch->spl[dtype] >= 200) sprintf(bufskill,"a grand sorcerer at");
kav_info.c:    location = ch->in_room;
kav_info.c:    location = ch->in_room;
kav_info.c:    if (( pexit = ch->in_room->exit[door]) == NULL || (to_room = pexit->to_room) == NULL)
kav_info.c:    pexit = ch->in_room->exit[door];
kav_info.c:	vch_next	= vch->next;
kav_info.c:	if ( vch->in_room == NULL )
kav_info.c:	if ( vch->in_room == ch->in_room )
kav_info.c:		sprintf(buf,"   %s (Player)\n\r",vch->name);
kav_info.c:		sprintf(buf,"   %s (Player)\n\r",vch->morph);
kav_info.c:		sprintf(buf,"   %s (Player)\n\r",vch->morph);
kav_info.c:		sprintf(buf,"   %s\n\r",capitalize(vch->short_descr));
kav_info.c:    obj_to_room(obj,ch->in_room);
kav_info.c:        strcpy(buf,ch->createtime);
kav_info.c:        strcpy(buf,ch->pcdata->conception);
kav_info.c:            if (!IS_EXTRA(ch, EXTRA_LABOUR)) SET_BIT(ch->extra, EXTRA_LABOUR);
kav_info.c:    strcpy(buf,ch->createtime);
kav_info.c:    if ( strlen(ch->pcdata->marriage) < 2 || !IS_EXTRA(ch, EXTRA_MARRIED) )
kav_info.c:    if (strlen(ch->pcdata->marriage) > 1 && 
kav_info.c:	str_cmp(ch->pcdata->marriage,victim->name))
kav_info.c:	str_cmp(victim->pcdata->marriage,ch->name))
kav_info.c:    ch->pcdata->partner = victim;
kav_wiz.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
kav_wiz.c:    while ( ch->affected )
kav_wiz.c:	affect_remove( ch, ch->affected );
kav_wiz.c:    ch->armor			= 100;
kav_wiz.c:    ch->hitroll			= 0;
kav_wiz.c:    ch->damroll			= 0;
kav_wiz.c:    ch->saving_throw		= 0;
kav_wiz.c:    ch->pcdata->mod_str		= 0;
kav_wiz.c:    ch->pcdata->mod_int		= 0;
kav_wiz.c:    ch->pcdata->mod_wis		= 0;
kav_wiz.c:    ch->pcdata->mod_dex		= 0;
kav_wiz.c:    ch->pcdata->mod_con		= 0;
kav_wiz.c:  if (!str_cmp(ch->name,"Marisella"	)) {level = 14; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Chrono"	)) {level = 14; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Serena"	)) {level = 14; security = 9; }
kav_wiz.c://  if (!str_cmp(ch->name,"Seth"		)) {level = 14; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Raziel"        )) {level = 14; security = 9; } 
kav_wiz.c://  if (!str_cmp(ch->name,"Alesyira"	)) {level = 12; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Silk"          )) {level = 12; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Talyn"         )) {level = 12; security = 9; }  
kav_wiz.c:  if (!str_cmp(ch->name,"Reaver"        )) {level = 14; security = 9; } 
kav_wiz.c:  if (!str_cmp(ch->name,"Dertaherup"    )) {level = 14; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Ghant"         )) {level = 11; security = 9; }
kav_wiz.c://  if (!str_cmp(ch->name,"ZimZum"        )) {level = 11; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Hughes"        )) {level = 11; security = 9; }
kav_wiz.c:  if (!str_cmp(ch->name,"Beorn"         )) {level = 13; security = 9; }
kav_wiz.c:{   ch->level = level;
kav_wiz.c:    ch->trust = level;
kav_wiz.c:    ch->pcdata->security = security;
kav_wiz.c:    if (strlen(ch->pcdata->marriage) > 1)
kav_wiz.c:/*    if ( (ch->sex == SEX_MALE && victim->sex == SEX_FEMALE) ||
kav_wiz.c:	 (ch->sex == SEX_FEMALE && victim->sex == SEX_MALE) )
kav_wiz.c:	ch->pcdata->propose = victim;
kav_wiz.c:    if (strlen(ch->pcdata->marriage) > 1)
kav_wiz.c:/*    if ( (ch->sex == SEX_MALE && victim->sex == SEX_FEMALE) ||
kav_wiz.c:	 (ch->sex == SEX_FEMALE && victim->sex == SEX_MALE) )
kav_wiz.c:	ch->pcdata->propose = NULL;
kav_wiz.c:	victim->pcdata->marriage = str_dup( ch->name );
kav_wiz.c:	free_string(ch->pcdata->marriage);
kav_wiz.c:	ch->pcdata->marriage = str_dup( victim->name );
kav_wiz.c:	sprintf(buf,"%s and %s are now engaged!",ch->name,victim->name);
kav_wiz.c:    if (strlen(ch->pcdata->marriage) > 1)
kav_wiz.c:    if (!str_cmp(ch->name, victim->pcdata->marriage) &&
kav_wiz.c:	!str_cmp(victim->name, ch->pcdata->marriage))
kav_wiz.c:	free_string(ch->pcdata->marriage);
kav_wiz.c:	ch->pcdata->marriage = str_dup( "" );
kav_wiz.c:	sprintf(buf,"%s and %s have broken up!",ch->name,victim->name);
kav_wiz.c:	if (ch->pcdata->quest < value)
kav_wiz.c:	if ( ch->pcdata->quest < value )
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:    	obj->questowner = str_dup(ch->pcdata->switchname);
kav_wiz.c:    if (!IS_IMMORTAL(ch) && (obj->questowner == NULL || str_cmp(ch->pcdata->switchname,obj->questowner)))
kav_wiz.c:	else if (value > ch->pcdata->quest)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (value > ch->pcdata->quest)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (value > ch->pcdata->quest)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	    if (ch->pcdata->quest < 10)
kav_wiz.c:	    if(( !str_cmp(arg3,"bite") || !str_cmp(arg3,"grep")) && ch->pcdata->quest < 1000)
kav_wiz.c:		ch->pcdata->quest -= 1000;
kav_wiz.c:		ch->pcdata->quest -= 10;
kav_wiz.c:	    obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	    else if (ch->pcdata->quest < add)
kav_wiz.c:	    ch->pcdata->quest -= add;
kav_wiz.c:	    if (ch->pcdata->quest < remove)
kav_wiz.c:	    ch->pcdata->quest -= remove;
kav_wiz.c:	    if (ch->pcdata->quest < add)
kav_wiz.c:	    ch->pcdata->quest -= add;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (ch->pcdata->quest < 20 && !(obj->pIndexData->vnum == 30037 && obj->wear_flags == 1))
kav_wiz.c:	    ch->pcdata->quest -= 20;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (ch->pcdata->quest < 50 )
kav_wiz.c:	ch->pcdata->quest -= 50;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (ch->pcdata->quest < 50 )
kav_wiz.c:	ch->pcdata->quest -= 50;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (value > ch->pcdata->quest)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (ch->pcdata->quest < 10)
kav_wiz.c:	ch->pcdata->quest -= 10;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (ch->in_room->vnum >= 86000 && ch->in_room->vnum <= 86099 )
kav_wiz.c:	else if (ch->pcdata->quest < 50)
kav_wiz.c:	obj->specpower = ch->in_room->vnum;
kav_wiz.c:	ch->pcdata->quest -= 50;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	else if (ch->pcdata->quest < 50)
kav_wiz.c:	obj->specpower = ch->in_room->vnum;
kav_wiz.c:	ch->pcdata->quest -= 50;
kav_wiz.c:    	obj->questmaker = str_dup(ch->pcdata->switchname);
kav_wiz.c:	if (ch->pcdata->quest < value)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->name);
kav_wiz.c:	if (ch->pcdata->quest < value)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->name);
kav_wiz.c:	if (ch->pcdata->quest < value)
kav_wiz.c:	ch->pcdata->quest -= value;
kav_wiz.c:    	obj->questmaker = str_dup(ch->name);
kav_wiz.c:	str_cmp(ch->name,obj->questmaker)) && !is_quest )
kav_wiz.c:	max = 1500 + (ch->pcdata->upgrade_level * 1000);
kav_wiz.c:	{range *= 2; max = 1000 + (ch->pcdata->upgrade_level * 1000);}
kav_wiz.c:	max = 600 + (ch->pcdata->upgrade_level * 1000);
kav_wiz.c:    if (is_quest && ch->pcdata->quest < cost && !IS_JUDGE(ch))
kav_wiz.c:	sprintf(buf,"That costs %d quest points, while you only have %d.\n\r",cost, ch->pcdata->quest);
kav_wiz.c:    if (is_quest) ch->pcdata->quest -= cost;
kav_wiz.c:    obj->questmaker = str_dup(ch->name);
kav_wiz.c:        sprintf(buf, "%s is contemplating deletion.", ch->name);
kav_wiz.c:    if ( strcmp( crypt( arg, ch->pcdata->pwd ), ch->pcdata->pwd ) )
kav_wiz.c:     sprintf(buf, "%s tried to delete with the wrong pwd.", ch->name);
kav_wiz.c: sprintf( strsave, "%s%s", PLAYER_DIR, capitalize( ch->name ) );
kav_wiz.c: sprintf(buf, "%s turns themself into line noise.", ch->name );
kav_wiz.c:    if ( ch->level > 7 )
kav_wiz.c:        sprintf(buf, "%s is contemplating deletion.", ch->name);
kav_wiz.c:  if (strcmp(crypt(argument, ch->pcdata->pwd), ch->pcdata->pwd))
kav_wiz.c:  sprintf(buf, "%s turns themselves into linee noise.", ch->name);
kav_wiz.c:  sprintf(buf, "%s%s", PLAYER_DIR, capitalize(ch->pcdata->switchname));
kav_wiz.c:  ch->fight_timer = 0;
kav_wiz.c:  if (ch->level > 7)
lich.c:  if (ch->pcdata->powers[NECROMANTIC] < 5)
lich.c:    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
lich.c:  SET_BIT(ch->affected_by, AFF_ETHEREAL);
lich.c:  if (ch->in_room == NULL) return;
lich.c:  if (ch->pcdata->powers[CON_LORE] < 5)
lich.c:  if (ch->mana < 1500)
lich.c:    ||	 ch->in_room->area->vnum == 6
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_SOLITARY)
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_ASTRAL)
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_NOTRANS)
lich.c:    ||   victim->in_room->vnum == ch->in_room->vnum)
lich.c:  if (victim->level > (ch->spl[1]*2) )
lich.c:  gch = ch->in_room->people;
lich.c:  while ((gch = gch->next_in_room) != NULL) pcounter++;
lich.c:  location = ch->in_room;
lich.c:  ch->mana -= 1500;
lich.c:  if (IS_CLASS(ch, CLASS_LICH) && ch->pcdata->powers[NECROMANTIC] < 3)
lich.c:  if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT) && ch->pcdata->powers[SPIRIT] < 4)
lich.c:  dam = ch->pcdata->powers[SPIRIT] * (number_range(2400,2360) + (ch->pcdata->upgrade_level * 440) + 1920)/ 2;
lich.c:  ch->hit = UMIN(ch->max_hit, ch->hit + dam);
lich.c:    if (ch->fighting == NULL) set_fighting(ch, victim);
lich.c:  dam = ch->pcdata->powers[SPIRIT] * (number_range(1500,2000) + (ch->pcdata->upgrade_level * 400) + 1900)/8;
lich.c:  ch->hit = UMIN(ch->max_hit, ch->hit + dam);
lich.c:    if (ch->fighting == NULL) set_fighting(ch, victim);
lich.c:    if (ch->pcdata->upgrade_level >= 1)
lich.c:  if (ch->practice < 150)
lich.c:  obj->questowner = str_dup(ch->pcdata->switchname);
lich.c:  ch->practice -= 150;
lich.c:  if (ch->pcdata->powers[LIFE_LORE] < 3)
lich.c:  if (ch->mana < 5000)
lich.c:  if (ch->in_room != NULL)
lich.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
lich.c:  ch->mana -= 5000;
lich.c:  if (ch->pcdata->powers[DEATH_LORE] < 4)
lich.c:  int totaldam = ch->hit;
lich.c:  if (ch->pcdata->powers[DEATH_LORE] < 5)
lich.c:  if (ch->mana < 5000)
lich.c:  for (ich = ch->in_room->people; dummychar != NULL; ich = dummychar )
lich.c:    dummychar = ich->next_in_room;
lich.c:    if (IS_SET(ich->act, ACT_QUEST)) continue;
lich.c:    dam = UMIN(totaldam, ich->hit + 10);
lich.c:    if (ich->position > POS_STUNNED && ich != ch)
lich.c:      if (ich->fighting == NULL) set_fighting(ich, ch);
lich.c:      if (ch->fighting == NULL) set_fighting(ch, ich);
lich.c:  ch->mana -= ch->mana/2;
lich.c:  if (ch->pcdata->powers[DEATH_LORE] < 3)
lich.c:  if (arg[0] == '\0' && ch->fighting != NULL) victim = ch->fighting;
lich.c:  if (ch->pcdata->powers[LIFE_LORE] < 5)
lich.c:  if (arg[0] == '\0' && ch->fighting != NULL) victim = ch->fighting;
lich.c:  ch->hit += dam/2;
lich.c:  if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
lich.c:  if (ch->mana < 5000)
lich.c:  if (ch->pcdata->powers[LIFE_LORE] < 4)
lich.c:  if (ch->hit >= ch->max_hit)
lich.c:  ch->hit += number_range(7500, 10000);
lich.c:  if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
lich.c:  ch->mana -= 5000;
lich.c:  if (ch->mana < 5000)
lich.c:  if (ch->pcdata->powers[NECROMANTIC] < 4)
lich.c:  for (ich = ch->in_room->people; dummychar != NULL; ich = dummychar )
lich.c:    dummychar = ich->next_in_room;
lich.c:    if (ich->position > POS_STUNNED && ich != ch)
lich.c:      if (ich->fighting == NULL) set_fighting(ich, ch);
lich.c:      if (ch->fighting == NULL) set_fighting(ch, ich);
lich.c:  ch->mana -= ch->mana/2;
lich.c:  if (ch->pcdata->powers[CON_LORE] < 3)
lich.c:  if (ch->mana < 500)
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_SOLITARY)
lich.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_ASTRAL)
lich.c:    ||   victim->in_room->vnum == ch->in_room->vnum)
lich.c:  obj->value[3] = ch->in_room->vnum;
lich.c:  obj_to_room( obj, ch->in_room );
lich.c:  obj->value[0] = ch->in_room->vnum;
lich.c:  ch->mana -= 500;
lich.c:  if (ch->pcdata->powers[CHAOS_MAGIC] < 5)
lich.c:    SET_BIT(ch->immune, IMM_SHIELD2);
lich.c:  REMOVE_BIT(ch->immune, IMM_SHIELD2);
lich.c:                ch->pcdata->powers[CON_LORE], ch->pcdata->powers[DEATH_LORE], ch->pcdata->powers[LIFE_LORE] );
lich.c:                ch->pcdata->powers[NECROMANTIC], ch->pcdata->powers[CHAOS_MAGIC] );
lich.c:    if (ch->pcdata->powers[CON_LORE] > 4)
lich.c:    if (ch->exp < 10000000 * (ch->pcdata->powers[CON_LORE] + 1))
lich.c:    ch->pcdata->powers[CON_LORE] += 1;
lich.c:    ch->exp -= 10000000 * ch->pcdata->powers[CON_LORE];
lich.c:    if (ch->pcdata->powers[DEATH_LORE] > 4)
lich.c:    if (ch->exp < 10000000 * (ch->pcdata->powers[DEATH_LORE] + 1))
lich.c:    ch->pcdata->powers[DEATH_LORE] += 1;
lich.c:    ch->exp -= 10000000 * ch->pcdata->powers[DEATH_LORE];
lich.c:    if (ch->pcdata->powers[LIFE_LORE] > 4)
lich.c:    if (ch->exp < 10000000 * (ch->pcdata->powers[LIFE_LORE] + 1))
lich.c:    ch->pcdata->powers[LIFE_LORE] += 1;
lich.c:    ch->exp -= 10000000 * ch->pcdata->powers[LIFE_LORE];
lich.c:    if (ch->pcdata->powers[NECROMANTIC] > 4)
lich.c:    if (ch->exp < 10000000 * (ch->pcdata->powers[NECROMANTIC] + 1))
lich.c:    ch->pcdata->powers[NECROMANTIC] += 1;
lich.c:    ch->exp -= 10000000 * ch->pcdata->powers[NECROMANTIC];
lich.c:    if (ch->pcdata->powers[CHAOS_MAGIC] > 4)
lich.c:    if (ch->exp < 10000000 * (ch->pcdata->powers[CHAOS_MAGIC] + 1))
lich.c:    ch->pcdata->powers[CHAOS_MAGIC] += 1;
lich.c:    ch->exp -= 10000000 * ch->pcdata->powers[CHAOS_MAGIC];
lich.c:  if (ch->pcdata->powers[CON_LORE] < 4)
lich.c:  if (ch->pcdata->followers > 6)
lich.c:    if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_FIRE))
lich.c:    victim->level = ch->spl[RED_MAGIC] / 2;
lich.c:    victim->hit = 50 * ch->spl[RED_MAGIC]; 
lich.c:    victim->max_hit = 50 * ch->spl[RED_MAGIC];
lich.c:    victim->hitroll =  ch->spl[RED_MAGIC]/2; 
lich.c:    victim->damroll =  ch->spl[RED_MAGIC]/2;  
lich.c:    char_to_room( victim, ch->in_room );
lich.c:    ch->pcdata->followers++;
lich.c:    SET_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_FIRE);
lich.c:    if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_CLAY))
lich.c:    victim->level = ch->spl[YELLOW_MAGIC] / 2;
lich.c:    victim->hit = 50 * ch->spl[YELLOW_MAGIC];
lich.c:    victim->max_hit = 50 * ch->spl[YELLOW_MAGIC];
lich.c:    victim->hitroll = ch->spl[YELLOW_MAGIC]/2;
lich.c:    victim->damroll = ch->spl[YELLOW_MAGIC]/2;
lich.c:    char_to_room( victim, ch->in_room );
lich.c:    ch->pcdata->followers++;
lich.c:    SET_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_CLAY);
lich.c:    if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_STONE))
lich.c:    victim->level = ch->spl[GREEN_MAGIC] / 2;
lich.c:    victim->hit = 50 * ch->spl[GREEN_MAGIC];
lich.c:    victim->max_hit = 50 * ch->spl[GREEN_MAGIC];
lich.c:    victim->hitroll = ch->spl[GREEN_MAGIC]/2; 
lich.c:    victim->damroll = ch->spl[GREEN_MAGIC]/2;
lich.c:    char_to_room( victim, ch->in_room );
lich.c:    ch->pcdata->followers++;
lich.c:    SET_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_STONE);
lich.c:    if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_IRON))
lich.c:    victim->level = ch->spl[BLUE_MAGIC] / 2;
lich.c:    victim->hit = 50 * ch->spl[BLUE_MAGIC];
lich.c:    victim->max_hit = 50 * ch->spl[BLUE_MAGIC];
lich.c:    victim->hitroll = ch->spl[BLUE_MAGIC]/2;  
lich.c:    victim->damroll = ch->spl[BLUE_MAGIC]/2; 
lich.c:    char_to_room( victim, ch->in_room );
lich.c:    ch->pcdata->followers++;
lich.c:    SET_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_IRON);
maar.c:  if (ch->level < 10)
maar.c:  if (ch->level < 12)
mage.c:  if (ch->mana < 5000)
mage.c:  for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
mage.c:    if (ich==ch || ich->trust > 6) continue;
mage.c:    if (IS_SET(ich->affected_by, AFF_HIDE))      REMOVE_BIT(ich->affected_by, AFF_HIDE);
mage.c:    if (IS_SET(ich->affected_by, AFF_INVISIBLE)) REMOVE_BIT(ich->affected_by, AFF_INVISIBLE);
mage.c:    if (IS_SET(ich->affected_by, AFF_SNEAK))     REMOVE_BIT(ich->affected_by, AFF_SNEAK);
mage.c:    if (IS_SET(ich->affected_by, AFF_SHADOWPLANE))REMOVE_BIT(ich->affected_by, AFF_SHADOWPLANE);
mage.c:    if (IS_SET(ich->act, PLR_WIZINVIS))          REMOVE_BIT(ich->act, PLR_WIZINVIS);
mage.c:    if (IS_SET(ich->act, AFF_HIDE))              REMOVE_BIT(ich->act, AFF_HIDE);
mage.c:    if (IS_SET(ich->affected_by, AFF_SHIFT))     REMOVE_BIT(ich->affected_by, AFF_SHIFT);
mage.c:    if (IS_SET(ich->extra, EXTRA_EARTHMELD))     REMOVE_BIT(ich->extra, EXTRA_EARTHMELD);
mage.c:    if (IS_AFFECTED(ch,AFF_SHADOWPLANE)) REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
mage.c:    if (IS_AFFECTED(ch, AFF_PEACE)) REMOVE_BIT(ch->affected_by, AFF_PEACE);
mage.c:    if (IS_AFFECTED(ch,AFF_ETHEREAL)) REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
mage.c:    if (IS_CLASS(ich, CLASS_DROW) && IS_SET(ich->newbits, NEW_DARKNESS))
mage.c:      REMOVE_BIT(ich->newbits, NEW_DARKNESS);
mage.c:      REMOVE_BIT(ich->in_room->room_flags, ROOM_TOTAL_DARKNESS);
mage.c:  ch->mana -= 5000;
mage.c:  if ( ch->practice < 60 )
mage.c:      if (ch->pcdata->upgrade_level >= 1){
mage.c:  obj->questowner = str_dup(ch->pcdata->switchname);
mage.c:  ch->practice -= 60;
mage.c:  level = ch->spl[RED_MAGIC]/10;
mage.c:  if (IS_CLASS(ch, CLASS_LICH) && ch->pcdata->powers[CHAOS_MAGIC] < 1)
mage.c:  if (ch->mana < 5000)
mage.c:  if (ch->in_room != NULL)
mage.c:    if ( IS_SET(ch->in_room->room_flags,ROOM_SAFE) )
mage.c:  if (arg[0] == '\0' && ch->fighting != NULL) victim = ch->fighting;
mage.c:  ch->mana -= 5000;
mage.c:  int red_magic = ch->spl[RED_MAGIC];
mage.c:  int blue_magic = ch->spl[BLUE_MAGIC];
mage.c:  int green_magic = ch->spl[GREEN_MAGIC];
mage.c:  int purple_magic = ch->spl[PURPLE_MAGIC];
mage.c:  int yellow_magic = ch->spl[YELLOW_MAGIC];
mage.c:  int magic_power = ch->spl[RED_MAGIC] + ch->spl[BLUE_MAGIC] + ch->spl[GREEN_MAGIC] + ch->spl[PURPLE_MAGIC] + ch->spl[YELLOW_MAGIC];
mage.c:	if (ch->fight_timer>0)
mage.c:    if (ch->mana < 7500)
mage.c:    ch->mana -= 7500;
mage.c:    if (arg2[0] == '\0' && ch->fighting != NULL) victim = ch->fighting;
mage.c:    if (ch->mana < 15000)
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room)
mage.c:    if (IS_AFFECTED(ch, AFF_PEACE)) REMOVE_BIT(ch->affected_by, AFF_PEACE);
mage.c:      if (ch->fighting == NULL) set_fighting(ch, victim);
mage.c:    ch->mana -= 15000;
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room) return;
mage.c:    if (ch->mana <2500)
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room)
mage.c:    ch->mana -= count * 500;
mage.c:    if (ch->mana <2500)
mage.c:    if (victim->position == POS_DEAD || ch->in_room != victim->in_room)
mage.c:    ch->mana -= count * 500;
mage.c:    if(ch->pcdata->powers[PINVOKE] > 0)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 1)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 2)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 3)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 4)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 5)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 7)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 8)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 6 && ch->pcdata->powers[PINVOKE] < 10)
mage.c:    if(ch->pcdata->powers[PINVOKE] > 9)
mage.c:    sprintf(buf,"invokes Learned (%d).\n\r", ch->pcdata->powers[PINVOKE]);
mage.c:    int cost = (ch->pcdata->powers[PINVOKE]+1) * 20;
mage.c:    if ( ch->pcdata->powers[PINVOKE] >= 10 )
mage.c:    else if (cost > ch->practice)
mage.c:      ch->pcdata->powers[PINVOKE] +=1;
mage.c:      ch->practice -= cost;
mage.c:    if (ch->pcdata->powers[PINVOKE] < 6)
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_STEELSHIELD) && ch->practice >= steelshieldcost)
mage.c:      SET_BIT(ch->itemaffect, ITEMA_STEELSHIELD);
mage.c:      ch->practice -= steelshieldcost;
mage.c:    if (ch->pcdata->powers[PINVOKE] < 9)
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_BEAST) && ch->practice >= beastcost)
mage.c:      SET_BIT(ch->itemaffect, ITEMA_BEAST);
mage.c:      ch->practice -= beastcost;
mage.c:    if (ch->pcdata->powers[PINVOKE] < 8)
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_ILLUSIONS) && ch->practice >= illusioncost)
mage.c:      SET_BIT(ch->itemaffect, ITEMA_ILLUSIONS);
mage.c:      ch->practice -= illusioncost;
mage.c:    if (ch->pcdata->powers[PINVOKE] < 5)
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_DEFLECTOR) && ch->practice >= defshieldcost)
mage.c:      SET_BIT(ch->itemaffect, ITEMA_DEFLECTOR);
mage.c:      ch->practice -= defshieldcost;
mage.c:    if (ch->pcdata->powers[PINVOKE] < 2)
mage.c:    if (!IS_SET(ch->newbits, NEW_MULTIARMS))
mage.c:      SET_BIT(ch->newbits, NEW_MULTIARMS);
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_MAGESHIELD) && ch->practice>=shieldcost)
mage.c:      SET_BIT(ch->itemaffect, ITEMA_MAGESHIELD);
mage.c:      ch->practice -= shieldcost;
mage.c:    if (ch->pcdata->powers[PINVOKE] < 9)
mage.c:    if (ch->practice < totalcost)
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_MAGESHIELD)) SET_BIT(ch->itemaffect, ITEMA_MAGESHIELD);
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_DEFLECTOR)) SET_BIT(ch->itemaffect, ITEMA_DEFLECTOR);
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_ILLUSIONS)) SET_BIT(ch->itemaffect, ITEMA_ILLUSIONS);
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_BEAST)) SET_BIT(ch->itemaffect, ITEMA_BEAST);
mage.c:    if (!IS_ITEMAFF(ch, ITEMA_STEELSHIELD)) SET_BIT(ch->itemaffect, ITEMA_STEELSHIELD);
mage.c:    ch->practice -= totalcost;
mage.c:  int magic_power = ch->spl[RED_MAGIC] + ch->spl[BLUE_MAGIC] + ch->spl[GREEN_MAGIC] + ch->spl[PURPLE_MAGIC] + ch->spl[YELLOW_MAGIC];
mage.c:  if (ch->pcdata->powers[PINVOKE] < 4) /* 4 is just a test */
mage.c:    REMOVE_BIT(ch->itemaffect, ITEMA_MAGESHIELD);
mage.c:    for (vch = ch->in_room->people; vch != NULL; vch = vch_next)
mage.c:      vch_next = vch->next_in_room;
mage.c:        if ((mount = ch->mount) != NULL)
mage.c:        dam = number_range(magic_power*7/2, magic_power*9/2) + ch->damroll;
mage.c:        if (vch->position > POS_STUNNED)
mage.c:          if (vch->fighting == NULL) set_fighting(vch, ch);
mage.c:          if (ch->fighting == NULL) set_fighting(ch, vch);
mage.c:  if (ch->pcdata->powers[PINVOKE] < 1) /* 1 is just a test */
mage.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
mage.c:  if (ch->mana < 250) 
mage.c:	ch->mana -= 250;
mage.c:  if (IS_CLASS(ch, CLASS_LICH) && ch->pcdata->powers[CON_LORE] < 1)
mage.c:  if(IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
mage.c:    char_to_room( create_mobile( get_mob_index(MOB_VNUM_VAMPIRE) ),	ch->in_room );
magic.c:   if (ch->generation == 5) genbonus = 500;
magic.c:   if (ch->generation == 4) genbonus = 750;
magic.c:   if (ch->generation == 3) genbonus = 1000;
magic.c:   if (ch->generation == 2) genbonus = 1250;
magic.c:   if (ch->generation == 1) genbonus = 1500;
magic.c:   if (ch->generation == 0) genbonus = 2000;
magic.c:      if(ch->spl[dtype] >= 1000+ genbonus + (get_curr_int(ch) * 2))
magic.c:        ch->spl[dtype] = 1000+genbonus + (get_curr_int(ch) * 2);
magic.c:    else if(IS_CLASS(ch, CLASS_ELF) && IS_SET(ch->special,SPC_ELF_MAGE))
magic.c:      if(ch->spl[dtype] >= 1500 + (get_curr_int(ch) * 5)+ genbonus)
magic.c:        ch->spl[dtype] = (1500 + (get_curr_int(ch) * 5)+genbonus);
magic.c:      if(ch->spl[dtype] >= 900+genbonus + (get_curr_int(ch) * 2))
magic.c:        ch->spl[dtype] = 900+genbonus + (get_curr_int(ch) * 2);
magic.c:      if(ch->spl[dtype] >= 1200+genbonus + (get_curr_int(ch) * 2))
magic.c:        ch->spl[dtype] = 1200+genbonus + (get_curr_int(ch) * 2);
magic.c:	if(IS_SET(ch->special, SPC_DROW_MAG))
magic.c:          if(ch->spl[dtype] >= 500 + (get_curr_int(ch) * 2))
magic.c:            ch->spl[dtype] = 500 + (get_curr_int(ch) * 2);
magic.c:        else if(ch->spl[dtype] >= 350 + (get_curr_int(ch) * 2))
magic.c:          ch->spl[dtype] = 350 + (get_curr_int(ch) * 2);
magic.c:	if(IS_SET(ch->special, SPC_DROW_CLE))
magic.c:          if(ch->spl[dtype] >= 500 + (get_curr_int(ch) * 2))
magic.c:            ch->spl[dtype] = 500 + (get_curr_int(ch) * 2);
magic.c:        else if(ch->spl[dtype] >= 350 + (get_curr_int(ch) * 2))
magic.c:          ch->spl[dtype] = 350 + (get_curr_int(ch) * 2);
magic.c:      if(ch->spl[dtype] >= 350 + (get_curr_int(ch) * 2))
magic.c:    if ((dice1 > ch->spl[dtype] || dice2 > ch->spl[dtype]) || (dice1>=50 || dice2>=50)) ch->spl[dtype] += number_range(1,5);
magic.c:	 if (ch->spl[dtype] == 1  ) sprintf(bufskill,"an apprentice of");
magic.c:    else if (ch->spl[dtype] == 26 ) sprintf(bufskill,"a student at");
magic.c:    else if (ch->spl[dtype] == 51 ) sprintf(bufskill,"a scholar at");
magic.c:    else if (ch->spl[dtype] == 76 ) sprintf(bufskill,"a magus at");
magic.c:    else if (ch->spl[dtype] == 101) sprintf(bufskill,"an adept at");
magic.c:    else if (ch->spl[dtype] == 126) sprintf(bufskill,"a mage at");
magic.c:    else if (ch->spl[dtype] == 151) sprintf(bufskill,"a warlock at");
magic.c:    else if (ch->spl[dtype] == 176) sprintf(bufskill,"a master wizard at");
magic.c:    else if (ch->spl[dtype] == 200) sprintf(bufskill,"a grand sorcerer at");
magic.c:    else if (ch->spl[dtype] == 240) sprintf(bufskill,"the complete master of");
magic.c:    else if (ch->spl[dtype] == 300) sprintf(bufskill,"possesing lich knowledge of");
magic.c:    else if (ch->spl[dtype] == 500) sprintf(bufskill,"beyond mortal limits in");
magic.c:    else if (ch->spl[dtype] == 1000) sprintf(bufskill,"ultimate master of");
magic.c:    if ( ( obj = ch->pcdata->chobj ) == NULL )
magic.c:    for (rch = ch->in_room->people; rch != NULL; rch = rch->next_in_room) {
magic.c:        if (IS_NPC(rch) && rch->spec_fun == spec_lookup("spec_wall_force")) {
magic.c:    if (ch->in_room->exit[dir] == NULL) {
magic.c:    char_to_room(mob1, ch->in_room);
magic.c:    char_to_room(mob2, ch->in_room->exit[dir]->to_room);
magic.c:	!IS_VAMPAFF(ch,VAM_DISGUISED) && !IS_POLYAFF(ch, POLY_SPIDER) && ch->power[DISC_VAMP_OBEA] < 10
magic.c:	&& !IS_SET(ch->flag2, VAMP_OBJMASK) && !IS_CLASS(ch,CLASS_DEMON) && !IS_CLASS(ch, CLASS_DRAGON) && !IS_CLASS(ch, CLASS_MAGE) &&
magic.c:	ch->pcdata->powers[FAERIE_LEVEL]>1))
magic.c:    if (IS_CLASS(ch,CLASS_VAMPIRE) && IS_AFFECTED(ch, AFF_POLYMORPH) && ch->power[DISC_VAMP_OBEA] > 9)
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level))
magic.c:    if( IS_SET(ch->in_room->room_flags, ROOM_NOCAST) && !IS_IMMORTAL(ch))
magic.c:    if ( ch->position < skill_table[sn].minimum_position )
magic.c:	    if ( ch->move < 25 )
magic.c:	    ch->move = ch->move - 25;
magic.c:	    if ( ch->move < 50 )
magic.c:	    ch->move = ch->move - 50;
magic.c:	100 / UMAX(( 2 + (ch->level*12) - skill_table[sn].skill_level),1)
magic.c:    if ( !IS_NPC(ch) && IS_SET(ch->special, SPC_WOLFMAN) )
magic.c:	if (ch->power[DISC_WERE_OWL] < 4) mana *= 2;
magic.c:/*	    if ( ( victim = ch->fighting ) == NULL )
magic.c:	    else {target_name = ch->fighting;}*/
magic.c:            victim = ch->fighting;
magic.c:	    if ( IS_AFFECTED(ch, AFF_CHARM) && ch->master == victim )
magic.c:	if ( arg2[0] != '\0' && !is_name( arg2, ch->name ) )
magic.c:    if ( !IS_NPC(ch) && ch->mana < mana )
magic.c:    if ( !IS_NPC(ch) && number_percent( ) > ch->pcdata->learned[sn] )
magic.c:	ch->mana -= mana / 2;
magic.c:	ch->mana -= mana;
magic.c:	    (*skill_table[sn].spell_fun) ( sn, ch->level / 4, ch, vo );
magic.c:	    (*skill_table[sn].spell_fun) ( sn, ((ch->spl[skill_table[sn].target]*0.25)+tempentro), ch, vo );
magic.c:	  (*skill_table[sn].spell_fun) ( sn, (ch->spl[skill_table[sn].target]*.5+tempentro),ch, vo );
magic.c:	for ( vch = ch->in_room->people; vch; vch = vch_next )
magic.c:	    vch_next = vch->next_in_room;
magic.c:	    victim = ch->fighting;
magic.c:	for ( vch = ch->in_room->people; vch; vch = vch_next )
magic.c:	    vch_next = vch->next_in_room;
magic.c:	vch_next	= vch->next;
magic.c:	if ( vch->in_room == NULL )
magic.c:	if ( vch->in_room == ch->in_room )
magic.c:		hp = vch->hit;
magic.c:		    vch->hit = hp;
magic.c:	if ( vch->in_room->area == ch->in_room->area
magic.c:    obj_to_room( light, ch->in_room );
magic.c:    obj_to_room( mushroom, ch->in_room );
magic.c:    obj_to_room( spring, ch->in_room );
magic.c:	if ( ch->fighting != NULL )
magic.c:        if ( ch->fighting != NULL )
magic.c:        if ( ch->fighting != NULL )
magic.c:      if(IS_NPC(victim) && saves_spell(level, victim) && (ch->level < 10))
magic.c:      else if(!IS_NPC(victim) && (saves_spell(level, victim) || (victim->spl[BLUE_MAGIC] > ch->spl[BLUE_MAGIC])) && (ch->level < 10))
magic.c:	if (dark == TRUE) REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
magic.c:	vch_next	= vch->next;
magic.c:	if ( vch->in_room == NULL || !can_see(ch, vch))
magic.c:	if ( vch->in_room == ch->in_room )
magic.c:	if ( vch->in_room->area == ch->in_room->area )
magic.c:	ch->alignment = UMAX(-1000, ch->alignment - 200);
magic.c:	dam		 = ch->hit + 1;
magic.c:	    ch->hit		+= dam;
magic.c:	    if (ch->hit > (2*ch->max_hit))
magic.c:		ch->hit = (2 * ch->max_hit);
magic.c:  if ( (mount = ch->mount) == NULL ) return;
magic.c:  char_to_room( mount, ch->in_room );
magic.c:    "A look of concentration passes over %s's face.\n\r",ch->name);
magic.c:    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
magic.c:	vch_next = vch->next_in_room;
magic.c:	if (vch->trust>6) continue;
magic.c:  for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
magic.c:  if (ich==ch || ich->trust > 6) continue;
magic.c:    if (IS_SET(ich->affected_by, AFF_HIDE))	 REMOVE_BIT(ich->affected_by, AFF_HIDE);
magic.c:    if (IS_SET(ich->affected_by, AFF_INVISIBLE)) REMOVE_BIT(ich->affected_by, AFF_INVISIBLE);
magic.c:    if (IS_SET(ich->affected_by, AFF_SNEAK))	 REMOVE_BIT(ich->affected_by, AFF_SNEAK);
magic.c:    if (IS_SET(ich->act, PLR_WIZINVIS)) 	 REMOVE_BIT(ich->act, PLR_WIZINVIS);
magic.c:    if (IS_SET(ich->act, AFF_HIDE))		 REMOVE_BIT(ich->act, AFF_HIDE);
magic.c:    if (IS_SET(ich->affected_by, AFF_SHIFT))	 REMOVE_BIT(ich->affected_by, AFF_SHIFT);
magic.c:    if (IS_SET(ich->extra, EXTRA_EARTHMELD))	 REMOVE_BIT(ich->extra, EXTRA_EARTHMELD);
magic.c:    if (IS_AFFECTED(ich,AFF_SHADOWPLANE))	 REMOVE_BIT(ich->affected_by, AFF_SHADOWPLANE);
magic.c:    if (IS_AFFECTED(ich, AFF_PEACE))		 REMOVE_BIT(ich->affected_by, AFF_PEACE);
magic.c:    if (IS_AFFECTED(ich,AFF_ETHEREAL))		 REMOVE_BIT(ich->affected_by, AFF_ETHEREAL);
magic.c:    if (IS_SET(ich->act,PLR_SUPERINVIS) )	 REMOVE_BIT(ich->act,PLR_SUPERINVIS);
magic.c:    if ((IS_CLASS(ich, CLASS_DROW) || IS_CLASS(ich, CLASS_DROID)) && IS_SET(ich->newbits, NEW_DARKNESS))
magic.c:      REMOVE_BIT(ich->newbits, NEW_DARKNESS);
magic.c:      REMOVE_BIT(ich->in_room->room_flags, ROOM_TOTAL_DARKNESS);
magic.c:  if (IS_SET(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS))
magic.c:    for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
magic.c:      if (IS_CLASS(ich, CLASS_DROW) && IS_SET(ich->newbits, NEW_DARKNESS))
magic.c:    if (!still_dark) REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
magic.c:    if( IS_SET(ch->in_room->room_flags, ROOM_NOCAST)) return;
magic.c:    char_to_room( victim, ch->in_room );
magic.c:  for ( ich = ch->in_room->people; ich != NULL; ich = ich->next_in_room )
magic.c:      ich->hit += number_range(150,250);
magic.c:      if (ich->hit > ich->max_hit) ich->hit=ich->max_hit;
magic.c:        if ( ch->fighting != NULL )
magic.c:    if (((get_age(ch)-17) < 2 || ch->level < 3) && (victim != ch))
magic.c:    if (!can_see_obj( ch, obj ) || !is_name(target_name, obj->name) || (ch->level < 7 &&
magic.c:    for ( gch = ch->in_room->people; gch != NULL; gch = gch->next_in_room )
magic.c:    if (!IS_NPC(victim) && IS_EXTRA(victim, EXTRA_PREGNANT) && ch->sex == SEX_FEMALE)
magic.c:    ||	 victim->in_room->area != ch->in_room->area
magic.c:    char_to_room( victim, ch->in_room );
magic.c:    if ( (mount = ch->mount) == NULL ) return;
magic.c:    char_to_room( mount, ch->in_room );
magic.c:    for ( vch = ch->in_room->people; vch != NULL; vch = vch->next_in_room )
magic.c:	if ( !is_name( speaker, vch->name ) )
magic.c:    hpch = UMAX( 10, ch->hit );
magic.c:    hpch = UMAX( 10, ch->max_hit );
magic.c:    hpch = UMAX( 10, ch->hit );
magic.c:  pDesc = ch->desc;
magic.c:  ch->desc = NULL;
magic.c:    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
magic.c:	vch_next = vch->next_in_room;
magic.c:	    hpch = UMAX( 10, ch->hit );
magic.c:	chhp = vch->hit;
magic.c:      if (dam > ch->damcap[DAM_CAP]) dam = number_range( (ch->damcap[DAM_CAP] - 200), (ch->damcap[DAM_CAP] + 100) );
magic.c:  ch->desc = pDesc;
magic.c:    hpch = UMAX( 10, ch->hit );
magic.c:    if (ch->pcdata->followers > 4)
magic.c:    ch->pcdata->followers++;
magic.c:    char_to_room( victim, ch->in_room );
magic.c:    if (ch->wpn[1]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[2]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[4]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[5]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[6]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[7]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[8]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[9]  > ch->wpn[weapontype])
magic.c:    if (ch->wpn[10] > ch->wpn[weapontype])
magic.c:    if (ch->wpn[11] > ch->wpn[weapontype])
magic.c:    if (ch->wpn[12] > ch->wpn[weapontype])
magic.c:    sprintf(buf,"%s soul %s",ch->name,wpnname);
magic.c:    if (IS_NPC(ch)) sprintf(buf,"%s's soul %s",ch->short_descr,wpnname);
magic.c:    else sprintf(buf,"%s's soul %s",ch->pcdata->switchname,wpnname);
magic.c:    if (IS_NPC(ch)) sprintf(buf,"%s's soul %s is lying here.",ch->short_descr,wpnname);
magic.c:    else sprintf(buf,"%s's soul %s is lying here.",ch->name,wpnname);
magic.c:    if (IS_NPC(ch)) obj->level = ch->level;
magic.c:    else if (ch->spl[2] > 4) obj->level = ch->spl[2]/4;
magic.c:    obj->questmaker = str_dup(ch->name);
magic.c:	obj->questowner = str_dup(ch->pcdata->switchname);
magic.c:	if ( ch->move < 25 )
magic.c:	ch->move = ch->move - 25;
magic.c:	if ( ch->move < 50 )
magic.c:	ch->move = ch->move - 50;
magic.c:    if ( IS_SET(ch->in_room->room_flags, ROOM_ARENA) ) return stcf(ch,"You can't portal outside of the arena.\n\r");
magic.c:    ||	 IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
magic.c:    ||	 IS_SET(ch->in_room->room_flags, ROOM_SOLITARY)
magic.c:    ||	 IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
magic.c:    ||	 IS_SET(ch->in_room->room_flags, ROOM_ASTRAL)
magic.c:    ||	 IS_SET(ch->in_room->room_flags, ROOM_ARENA)
magic.c:    ||	 victim->in_room->vnum == ch->in_room->vnum)
magic.c:				IS_SET(ch->in_room->room_flags, ROOM_ARENA) )
magic.c:    obj->value[3] = ch->in_room->vnum;
magic.c:    obj_to_room( obj, ch->in_room );
magic.c:    obj->value[0] = ch->in_room->vnum;
magic.c:    if (ch->practice < 5)
magic.c:    ch->practice -= 5;
magic.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
magic.c:    if (ch->practice < 1)
magic.c:    if (ch->in_room == NULL) return;
magic.c:    if (ch->practice >= 250) {ch->practice -= 250; obj->level = 250;}
magic.c:    else {obj->level = ch->practice; ch->practice = 0;}
magic.c:    obj->questmaker = str_dup(ch->name);
magic.c:    obj->questowner = str_dup(ch->name);
magic.c:    sprintf(buf,"%s %s",ch->name,itemkind);
magic.c:    sprintf(buf,"%s's %s",ch->name, itemkind);
magic.c:    sprintf(buf,"%s's %s lies here.",ch->name,itemkind);
magic.c:    obj->questmaker=str_dup(ch->name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s potion %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s potion of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s scroll %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s scroll of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s wand %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s wand of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level ) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:	{obj->value[0] = (ch->spl[0]+1)/4;sprintf(col,"purple");}
magic.c:	{obj->value[0] = (ch->spl[1]+1)/4;sprintf(col,"red");}
magic.c:	{obj->value[0] = (ch->spl[2]+1)/4;sprintf(col,"blue");}
magic.c:	{obj->value[0] = (ch->spl[3]+1)/4;sprintf(col,"green");}
magic.c:	{obj->value[0] = (ch->spl[4]+1)/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s staff %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s staff of %s",ch->name,col,skill_table[sn].name);
magic.c:    || ( !IS_NPC(ch) && ch->level < skill_table[sn].skill_level ) )
magic.c:    if ( ch->pcdata->learned[sn] < 100 )
magic.c:	{obj->value[0] = ch->spl[0]/4;sprintf(col,"purple");}
magic.c:	{obj->value[0] = ch->spl[1]/4;sprintf(col,"red");}
magic.c:	{obj->value[0] = ch->spl[2]/4;sprintf(col,"blue");}
magic.c:	{obj->value[0] = ch->spl[3]/4;sprintf(col,"green");}
magic.c:	{obj->value[0] = ch->spl[4]/4;sprintf(col,"yellow");}
magic.c:    sprintf(buf,"%s pill %s %s",ch->name,col,skill_table[sn].name);
magic.c:    sprintf(buf,"%s's %s pill of %s",ch->name,col,skill_table[sn].name);
magic.c:    if (ch->pcdata->followers > 4)
magic.c:    ch->pcdata->followers++;
magic.c:	victim->lord = str_dup(ch->name);
magic.c:	char_to_room( victim, ch->in_room );
magic.c:	victim->lord = str_dup(ch->name);
magic.c:	char_to_room( victim, ch->in_room );
magic.c:    victim->lord = str_dup(ch->name);
magic.c:	sprintf(buf,"%s's white pegasus",ch->name);
magic.c:	sprintf(buf,"%s's griffin",ch->name);
magic.c:	sprintf(buf,"%s's black nightmare",ch->name);
magic.c:    char_to_room( victim, ch->in_room );
magic.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
magic.c:    for ( obj = ch->carrying; obj != NULL; obj = obj_next )
magic.c:    if ( ch->position == POS_FIGHTING || is_affected( ch, sn ) )
magic.c:	if (!IS_NPC(ch) && ch->stance[0] != -1) do_stance(ch,"");
magic.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
magic.c:	sprintf(buf,"%s the frog",ch->name);
magic.c:	free_string(ch->morph);
magic.c:	ch->morph = str_dup(buf);
magic.c:	if (!IS_NPC(ch) && ch->stance[0] != -1) do_stance(ch,"");
magic.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
magic.c:	sprintf(buf,"%s the fish",ch->name);
magic.c:	free_string(ch->morph);
magic.c:	ch->morph = str_dup(buf);
magic.c:	if (!IS_NPC(ch) && ch->stance[0] != -1) do_stance(ch,"");
magic.c:	if (ch->mounted == IS_RIDING) do_dismount(ch,"");
magic.c:	sprintf(buf,"%s the raven",ch->name);
magic.c:	free_string(ch->morph);
magic.c:	ch->morph = str_dup(buf);
magic.c:    if ( ( familiar = ch->pcdata->familiar ) != NULL ) 
magic.c:    char_to_room( victim, ch->in_room );
magic.c:    ch->pcdata->familiar = victim;
magic.c:    ROOM_INDEX_DATA *old_room = ch->in_room;
magic.c:	if (ch->in_room->exit[door] != NULL)
magic.c:	    make_wall(ch->in_room, door, EX_ICE_WALL);
magic.c:    ch->hit += (ch->hit *3/2);
magic.c:       if (ch->hit > ch->max_hit)
magic.c:		ch->hit = ch->max_hit;
magic.c:  ROOM_INDEX_DATA * pRoom = ch->in_room;
magic.c:  pArea = ch->in_room->area;
magic.c:  pDesc = ch->desc;
magic.c:  ch->desc = NULL;
magic.c:  ch->desc = pDesc;
magic.c:((strlen(pObj->questowner) > 1) && (strcmp(pObj->questowner, ch->name))))) && (!IS_IMMORTAL(ch))) || (IS_SET(pObj->quest, QUEST_ARTIFACT)))
magic.c:    pVictim = RandomInRoom(ch->in_room, ch);
mccp.c:    if (!ch->desc) {
mccp.c:    if (!ch->desc->out_compress) {
mccp.c:        if (!compressStart(ch->desc)) {
mccp.c:       if (!compressEnd(ch->desc)) {
mccp.c:    if (gch->level > 6) continue;
mccp.c:    if (gch->desc->out_compress) {sprintf(buf,"%-15s uses mccp\n\r",gch->name); count1++;}
mccp.c:    else {sprintf(buf,"%-15s Does not use mccp.\n\r",gch->name); count2++;}
military.c:ch->pcdata->Bootcamp[0]=0;
military.c:ch->pcdata->Bootcamp[1]=0;
military.c:ch->pcdata->Bootcamp[2]=0;
military.c:ch->pcdata->Bootcamp[3]=0;
military.c:ch->pcdata->Bootcamp[4]=0;
military.c:ch->pcdata->Bootcamp[5]=50;
military.c:ch->pcdata->store+=10;
military.c:    sprintf(buf,"You are level %d training in Weapons.\n\r", ch->pcdata->Bootcamp[0]);
military.c:    sprintf(buf,"You are level %d training in Speed.\n\r", ch->pcdata->Bootcamp[1]);
military.c:    sprintf(buf,"You are level %d training in Stealth.\n\r", ch->pcdata->Bootcamp[2]);
military.c:    sprintf(buf,"You are level %d training in Sniper.\n\r", ch->pcdata->Bootcamp[3]);
military.c:    sprintf(buf,"You are level %d training in Endurance.\n\r", ch->pcdata->Bootcamp[4]);
military.c:  if(ch->pcdata->Bootcamp[5]>0)
military.c:    sprintf(buf,"You can train %d more levels.\n\r", ch->pcdata->Bootcamp[5]);
military.c:  if(ch->pcdata->Bootcamp[choice] >= 10)
military.c:  if(ch->pcdata->store < ( ( 50 - ch->pcdata->Bootcamp[5] ) ) )
military.c:    sprintf(buf,"You need [%d] more stores.\n\r", (ch->pcdata->Bootcamp[choice] - ch->pcdata->store));
military.c:  //ch->pcdata->store-=((28 - ch->pcdata->Bootcamp[5])); // <---- ORIGINAL TRAIN COSTS
military.c:  ch->pcdata->store -= ((ch->pcdata->Bootcamp[choice]));
military.c:  ch->pcdata->Bootcamp[choice] += 1;
military.c:  ch->pcdata->Bootcamp[5] -= 1;
military.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
military.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ARENA) || IS_SET(victim->in_room->room_flags, ROOM_ARENA) )
military.c:  if (ch->move < 500)
military.c:  ch->move -= 500;
military.c:(ch->pcdata->Bootcamp[0]+ch->pcdata->Bootcamp[2]+ch->pcdata->Bootcamp[3]+ch->pcdata->Bootcamp[4]+ch->pcdata->Bootcamp[1]<2)
military.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT))
military.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
military.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
military.c:    int dm=ch->pcdata->Bootcamp[4];
military.c:        if ((victim = ch->fighting) == NULL)
military.c:  if ((victim = ch->fighting) == NULL)
military.c:dammod2+=ch->pcdata->Bootcamp[2];
military.c:dammod3+=ch->pcdata->Bootcamp[1];
military.c:    if(ch->pcdata->Bootcamp[5]>0){
military.c:     if(ch->pcdata->Bootcamp[5]<(-1-ch->pcdata->Bootcamp[4])){
military.c:    obj->questowner = str_dup(ch->pcdata->switchname);
military.c:    ch->pcdata->Bootcamp[5]-=1;
military.c:      af.duration  = (ch->pcdata->Bootcamp[4])*100;
military.c:      af.modifier  = (ch->pcdata->Bootcamp[4])*125;
military.c:      af.duration  = (ch->pcdata->Bootcamp[4])*100;
military.c:      af.modifier  = (ch->pcdata->Bootcamp[4])*125;
military.c:    if (ch->pcdata->upgrade_level >= 1)
military.c:    if (ch->practice < 60)
military.c:    ch->practice -= 60;
military.c:    obj->questowner = str_dup(ch->pcdata->switchname);
monk2.c:  if ( !IS_NPC(ch) && IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_POTE] > 0) dam *= (ch->power[DISC_VAMP_POTE] * .4);
monk2.c:  else if (ch->power[DISC_DAEM_ATTA] > 0) dam *= ch->power[DISC_DAEM_ATTA] * .5;
monk2.c:    if (ch->chi[CURRENT] > 0 && ch->chi[CURRENT] < 3) dam *= 1.1;
monk2.c:    if (ch->chi[CURRENT] > 2) dam *= ( ch->chi[CURRENT] / 2 );
monk2.c:    if (ch->power[DISC_WERE_LUNA] > 6)
monk2.c:  if ( !IS_NPC(ch) ) dam = dam + (dam * ((ch->wpn[0]+1) / 100));
monk2.c:    stance = ch->stance[0];
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:  if ( ch->monkcrap == 0 )
monk2.c:    SET_BIT(ch->monkcrap, COMB_SHIN);
monk2.c:  else if ( ch->monkcrap > 0 )
monk2.c:    ch->monkcrap = 0;
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:  if ( IS_SET(ch->monkcrap, COMB_SHIN) && !IS_SET(ch->monkcrap, COMB_KNEE ) )
monk2.c:    SET_BIT(ch->monkcrap, COMB_KNEE);
monk2.c:  else if ( IS_SET(ch->monkcrap, COMB_REV1) )
monk2.c:    SET_BIT(ch->monkcrap, COMB_KNEE);
monk2.c:  else if ( ch->monkcrap > 0 )
monk2.c:    ch->monkcrap = 0;
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:  if ( ch->monkcrap == 0 )
monk2.c:    SET_BIT(ch->monkcrap, COMB_REV1);
monk2.c:  else if ( IS_SET(ch->monkcrap, COMB_REV1) && IS_SET(ch->monkcrap, COMB_SWEEP) )
monk2.c:    ch->move += UMIN(10000,move);
monk2.c:    ch->hit += UMIN(10000,move);
monk2.c:    ch->mana += UMIN(10000,move);
monk2.c:    ch->monkcrap = 0;
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:  if ( IS_SET(ch->monkcrap, COMB_REV1) )
monk2.c:    SET_BIT(ch->monkcrap, COMB_SWEEP);
monk2.c:    ch->move += UMIN(10000,mana);
monk2.c:    ch->hit += UMIN(10000,mana);
monk2.c:    ch->mana += UMIN(10000,mana);
monk2.c:    ch->monkcrap = 0;
monk2.c:    ch->monkcrap = 0;
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:  if ( ch->monkcrap == 0 && !IS_SET(ch->monkcrap, COMB_THRUST1) )
monk2.c:    SET_BIT(ch->monkcrap, COMB_THRUST1);
monk2.c:  else if ( IS_SET(ch->monkcrap, COMB_THRUST1) && !IS_SET(ch->monkcrap,COMB_THRUST2) )
monk2.c:    SET_BIT(ch->monkcrap, COMB_THRUST2);
monk2.c:  else if ( ch->monkcrap != 0 )
monk2.c:    ch->monkcrap = 0;
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:    ch->monkcrap = 0;
monk2.c:   if ( ch->chi[CURRENT] > 5 )
monk2.c:   else if ( ch->chi[CURRENT] > 4 )
monk2.c:   else if ( ch->chi[CURRENT] > 3 )
monk2.c:   else if ( ch->chi[CURRENT] > 2 )
monk2.c:   else if ( ch->chi[CURRENT] > 1 )
monk2.c:  else if ( IS_SET(ch->monkcrap, COMB_SHIN) && IS_SET(ch->monkcrap, COMB_KNEE ) )
monk2.c:    ch->monkcrap = 0;
monk2.c:      vch_next  = vch->next;
monk2.c:      if (number_hit > (ch->chi[CURRENT] + 1)) continue;
monk2.c:      if ( vch->in_room == NULL )
monk2.c:      if ( !IS_NPC(vch) && vch->pcdata->chobj != NULL )
monk2.c:      if ( vch->in_room == ch->in_room )
monk2.c:        if ( ( mount = ch->mount ) != NULL ) {if ( mount == vch ) continue;}
monk2.c:  if ( ( victim = ch->fighting ) == NULL )
monk2.c:      ch->monkab[AWARE] > 0 ? "*" : " ",
monk2.c:      ch->monkab[AWARE] > 1 ? "*" : " ",
monk2.c:      ch->monkab[AWARE] > 2 ? "*" : " ",
monk2.c:      ch->monkab[AWARE] > 3 ? "*" : " ",
monk2.c:      ch->monkab[BODY]  > 0 ? "*" : " ",
monk2.c:      ch->monkab[BODY]  > 1 ? "*" : " ",
monk2.c:      ch->monkab[BODY]  > 2 ? "*" : " ",
monk2.c:      ch->monkab[BODY]  > 3 ? "*" : " ");
monk2.c:      ch->monkab[COMBAT] > 0 ? "*" : " ",
monk2.c:      ch->monkab[COMBAT] > 1 ? "*" : " ",
monk2.c:      ch->monkab[COMBAT] > 2 ? "*" : " ",
monk2.c:      ch->monkab[COMBAT] > 3 ? "*" : " ",
monk2.c:      ch->monkab[SPIRIT] > 0 ? "*" : " ",
monk2.c:      ch->monkab[SPIRIT] > 1 ? "*" : " ",
monk2.c:      ch->monkab[SPIRIT] > 2 ? "*" : " ",
monk2.c:      ch->monkab[SPIRIT] > 3 ? "*" : " ");
monk2.c:    sprintf(buf,"                 You have attained a level %d mastery of your Ch'i.\n\r",ch->chi[MAXIMUM]);
monk2.c:    if ( ch->chi[CURRENT] > 0 )
monk2.c:      sprintf(buf,"                     Your ch'i is currently active at level %d\n\r",ch->chi[CURRENT]);
monk2.c:    cost = (ch->chi[inpart]+1) * 1000000;
monk2.c:    if (ch->monkab[inpart] >= 4)
monk2.c:    if ( ch->exp < cost )
monk2.c:    ch->monkab[inpart]++;
monk2.c:    ch->exp -= cost;
monk2.c:    if ( ch->chi[MAXIMUM] >= 6 )
monk2.c:    if ( ch->exp < cost)
monk2.c:    ch->exp -= cost;
monk2.c:    ch->chi[MAXIMUM]++;
monk2.c:    if ( ch->exp < cost )
monk2.c:    SET_BIT(ch->monkstuff, inpart);
monk2.c:    ch->exp -= cost;
monk.c:  if ( ch->practice <60 )
monk.c:    if (ch->pcdata->upgrade_level >= 1){
monk.c:  obj->questowner = str_dup(ch->pcdata->switchname);
monk.c:  ch->practice -= 60;
monk.c:  if ( ch->monkab[SPIRIT] < 4 )
monk.c:  if ( ch->monkab[SPIRIT] < 3 )
monk.c:        if ( ch->fighting != NULL )
monk.c:    SET_BIT(ch->monkstuff, MONK_HEAL);
monk.c:  if (!IS_CLASS(ch, CLASS_MONK) || ch->monkab[BODY] < 3)
monk.c:  if ( IS_SET(ch->newbits, NEW_POWER) )
monk.c:    ch->damroll -= 1000;
monk.c:    ch->hitroll -= 1000;
monk.c:    REMOVE_BIT(ch->newbits, NEW_POWER);
monk.c:  if ( ch->move < 100 )
monk.c:  SET_BIT(ch->newbits, NEW_POWER);
monk.c:  ch->damroll += 1000;
monk.c:  ch->hitroll += 1000;
monk.c:  ch->move -= 25;
monk.c:  if ( ch->chi[CURRENT] < 1 )
monk.c:  if ( ch->position == POS_FIGHTING )
monk.c:  ch->chi[CURRENT]--;
monk.c:/*  if ( ch->fighting == NULL )
monk.c:  if ( ch->chi[CURRENT] >= ch->chi[MAXIMUM] )
monk.c:    if (ch->chi[MAXIMUM] == 0) stc("You have not gained any control of your ch'i.\n\r",ch);
monk.c:      sprintf(buf,"You cannot focus your ch'i past a level of %d.",ch->chi[MAXIMUM]);
monk.c:  if ( ch->move < 500 + ((ch->chi[CURRENT]+1) * 20) )
monk.c:  if ( ch->chi[CURRENT] == 0 )
monk.c:  if ( ch->chi[CURRENT] == 1 )
monk.c:  if ( ch->chi[CURRENT] == 2 )
monk.c:  if ( ch->chi[CURRENT] == 3 )
monk.c:  if ( ch->chi[CURRENT] == 4 )
monk.c:  if ( ch->chi[CURRENT] == 5 )
monk.c:  ch->chi[CURRENT]++;
monk.c:  ch->move -= ((ch->chi[CURRENT] * 20));
monk.c:  if ( ch->pcdata->powers[PMONK] < 9 )
monk.c:      REMOVE_BIT(ch->itemaffect, ITEMA_FIRESHIELD); 
monk.c:      REMOVE_BIT(ch->itemaffect, ITEMA_ACIDSHIELD); 
monk.c:      REMOVE_BIT(ch->itemaffect, ITEMA_SHOCKSHIELD);  
monk.c:      REMOVE_BIT(ch->itemaffect, ITEMA_ICESHIELD);  
monk.c:      REMOVE_BIT(ch->itemaffect, ITEMA_CHAOSSHIELD);  
monk.c:    REMOVE_BIT(ch->itemaffect, ITEMA_CHAOSHANDS);
monk.c:      SET_BIT(ch->itemaffect, ITEMA_FIRESHIELD);  
monk.c:      SET_BIT(ch->itemaffect, ITEMA_ACIDSHIELD);  
monk.c:      SET_BIT(ch->itemaffect, ITEMA_SHOCKSHIELD); 
monk.c:      SET_BIT(ch->itemaffect, ITEMA_ICESHIELD); 
monk.c:      SET_BIT(ch->itemaffect, ITEMA_CHAOSSHIELD); 
monk.c:    SET_BIT(ch->itemaffect, ITEMA_CHAOSHANDS);
monk.c:  if (ch->exp < 50000)
monk.c:  ch->exp -= 50000;
monk.c:  victim->lord = str_dup(ch->name);
monk.c:    sprintf(buf,"Mantras Learned (%d).\n\r", ch->pcdata->powers[PMONK]);
monk.c:    if ( ch->pcdata->powers[PMONK] < 1 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 1 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 2 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 3 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 4 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 5 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 6 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 7 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 8 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 9 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 10 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 11 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 12 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 13 )
monk.c:    if ( ch->pcdata->powers[PMONK] >= 14 )
monk.c:    cost = (ch->pcdata->powers[improve]+1) * 10;
monk.c:    if ( ch->pcdata->powers[improve] >= max )
monk.c:    if ( cost > ch->practice )
monk.c:    ch->pcdata->powers[improve] += 1;
monk.c:    ch->practice -= cost;
monk.c:  if (ch->pcdata->powers[PMONK] < 11 )
monk.c:  if (ch->move < 1000)
monk.c:  if (IS_SET(ch->newbits, NEW_MONKCLOAK))
monk.c:    REMOVE_BIT(ch->newbits, NEW_MONKCLOAK);
monk.c:  if (!IS_SET(ch->newbits,NEW_MONKCLOAK))
monk.c:    SET_BIT(ch->newbits, NEW_MONKCLOAK);
monk.c:    ch->move = ch->move - 1000;
monk.c:  if (ch->pcdata->powers[PMONK] < 3)
monk.c:  if (ch->fight_timer >0) {
monk.c:  if ( IS_SET(ch->act, PLR_SUPERINVIS) )
monk.c:    REMOVE_BIT(ch->act, PLR_SUPERINVIS);
monk.c:    if (ch->move < 500) 
monk.c:    SET_BIT(ch->act, PLR_SUPERINVIS);
monk.c:    ch->move -= 500;
monk.c:  if (ch->pcdata->powers[PMONK] <5)
monk.c:  if (IS_SET(ch->newbits, NEW_MONKFLAME))
monk.c:    REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
monk.c:  if (!IS_SET(ch->newbits, NEW_MONKFLAME))
monk.c:    SET_BIT(ch->newbits, NEW_MONKFLAME);
monk.c:  if (ch->monkab[BODY] < 1)
monk.c:  if (IS_SET(ch->newbits, NEW_MONKADAM))
monk.c:    REMOVE_BIT(ch->newbits, NEW_MONKADAM);
monk.c:  if (!IS_SET(ch->newbits, NEW_MONKADAM))
monk.c:    SET_BIT(ch->newbits, NEW_MONKADAM);
monk.c:  if (ch->pcdata->powers[PMONK] < 10)
monk.c:  if (ch->move < 250)
monk.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
monk.c:  if (victim->in_room->vnum == ch->in_room->vnum)
monk.c:  ch->move -= 250;
monk.c:  if ( ch->pcdata->powers[PMONK] < 1 )
monk.c:  if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
monk.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
monk.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
monk.c:  if (ch->pcdata->powers[PMONK] < 6)
monk.c:  if ( IS_SET(ch->newbits, NEW_MONKSKIN) )
monk.c:    REMOVE_BIT( ch->newbits, NEW_MONKSKIN );
monk.c:    SET_BIT(ch->newbits, NEW_MONKSKIN);
monk.c:  if ( IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 7 )
monk.c:  if (ch->mana < 3000) 
monk.c:  ch->mana = ch->mana - 3000;
monk.c:  if ( IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 4 )
monk.c:  if (ch->fighting != NULL) victim = ch->fighting;
monk.c:  if ( IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 8 )
monk.c:  if (ch->move < 1500)
monk.c:  if (!IS_SET(ch->newbits, NEW_MONKFAVOR))
monk.c:    SET_BIT(ch->newbits, NEW_MONKFAVOR);
monk.c:    ch->move = ch->move - 1500;
monk.c:  if (IS_SET(ch->newbits, NEW_MONKFAVOR))
monk.c:    REMOVE_BIT(ch->newbits, NEW_MONKFAVOR);
monk.c:  if ( IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 8 )
monk.c:  if (ch->fighting != NULL) victim = ch->fighting;
monk.c:  if ( IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 12 )
monk.c:  if (ch->mana < 300)
monk.c:  if (ch->fighting != NULL)
monk.c:    ch->hit += 150;
monk.c:    if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
monk.c:    ch->mana -= 400;
monk.c:  if (ch->fighting == NULL)
monk.c:    ch->hit += 500;
monk.c:    if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
monk.c:    ch->mana -= 400;
monk.c:  if ( IS_CLASS(ch, CLASS_MONK) && ch->pcdata->powers[PMONK] < 13 )
monk.c:  if (!IS_SET(ch->newbits, NEW_JAWLOCK))
monk.c:    SET_BIT(ch->newbits, NEW_JAWLOCK);
monk.c:  else if (IS_SET(ch->newbits, NEW_JAWLOCK))
monk.c:    REMOVE_BIT(ch->newbits,NEW_JAWLOCK);
ninja.c:  if( ch->move < 500) 
ninja.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
ninja.c:  if (victim->in_room == ch->in_room)
ninja.c:  ch->move -= 500;
ninja.c:	ch->pcdata->powers[NPOWER_SORA], ch->pcdata->powers[NPOWER_CHIKYU],
ninja.c:	ch->pcdata->powers[NPOWER_NINGENNO]);
ninja.c:	    if (ch->pcdata->powers[NPOWER_SORA] < 1) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_SORA] > 0) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_SORA] > 1) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_SORA] > 2) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_SORA] > 3) 
ninja.c:		if (ch->pcdata->powers[NPOWER_SORA] > 4)
ninja.c:		if (ch->pcdata->powers[NPOWER_SORA] > 5)
ninja.c:	    if (ch->pcdata->powers[NPOWER_CHIKYU] < 1) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_CHIKYU] > 0) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_CHIKYU] > 1) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_CHIKYU] > 2) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_CHIKYU] > 3) 
ninja.c:		if (ch->pcdata->powers[NPOWER_CHIKYU] > 4)
ninja.c:	    if (ch->pcdata->powers[NPOWER_CHIKYU] > 5)
ninja.c:	    if (ch->pcdata->powers[NPOWER_NINGENNO] < 1) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_NINGENNO] > 0) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_NINGENNO] > 1) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_NINGENNO] > 2) 
ninja.c:	    if (ch->pcdata->powers[NPOWER_NINGENNO] > 3) 
ninja.c:		if (ch->pcdata->powers[NPOWER_NINGENNO] > 4)
ninja.c:	if (ch->pcdata->powers[NPOWER_NINGENNO] > 5)
ninja.c:	ch->pcdata->powers[NPOWER_SORA], ch->pcdata->powers[NPOWER_CHIKYU],
ninja.c:	ch->pcdata->powers[NPOWER_NINGENNO]);
ninja.c:	cost = (ch->pcdata->powers[improve]+1) * 10;
ninja.c:	if ( ch->pcdata->powers[improve] >= max )
ninja.c:	if ( cost > ch->practice )
ninja.c:	ch->pcdata->powers[improve] += 1;
ninja.c:	ch->practice -= cost;
ninja.c:	if ( ch->rage >= 100 )
ninja.c:	if ( ch->move < 500 )
ninja.c:	ch->rage += 100;
ninja.c:	ch->move -= 500; 
ninja.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_SORA] < 3 )
ninja.c:	if (ch->move < 5000)
ninja.c:        if (ch->fight_timer >0) {
ninja.c:    if ( IS_SET(ch->act, PLR_SUPERINVIS) )
ninja.c:	REMOVE_BIT(ch->act, PLR_SUPERINVIS);
ninja.c:	ch->move -= 5000;
ninja.c:        SET_BIT(ch->act,PLR_SUPERINVIS);
ninja.c:    if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_SORA] < 5 )
ninja.c:	else if (ch->move < 500)
ninja.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
ninja.c:	REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
ninja.c:	SET_BIT(ch->act, PLR_HOLYLIGHT);
ninja.c:	ch->move -= 500; 
ninja.c:	if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_NINGENNO] < 3 )
ninja.c:    if ( ( victim = ch->fighting ) == NULL )
ninja.c:	if ( ch->position == POS_FIGHTING )
ninja.c:	    ch->position = POS_STANDING;
ninja.c:	if (ch->move < 200)
ninja.c:    was_in = ch->in_room;
ninja.c:	if ( ( now_in = ch->in_room ) == was_in )
ninja.c:	ch->in_room = was_in;
ninja.c:	ch->in_room = now_in;
ninja.c:/*	if (victim->in_room == ch->in_room)
ninja.c:    ch->move -= 1000;
ninja.c:	else if ( ch->pcdata->powers[NPOWER_SORA] < 6 )
ninja.c:  if (ch->in_room != NULL)
ninja.c:    if ( IS_SET(ch->in_room->room_flags,ROOM_SAFE) )
ninja.c:    if ( ch->position == POS_FIGHTING )
ninja.c:	if (ch->move < 500)
ninja.c:    if ( victim->in_room == ch->in_room )
ninja.c:	ch->move -= 500;
ninja.c:	if (!IS_CLASS(ch, CLASS_NINJA) || ch->pcdata->powers[NPOWER_NINGENNO] < 1) {
ninja.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
ninja.c:	SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
ninja.c:	if (!IS_CLASS(ch, CLASS_NINJA) || ch->pcdata->powers[NPOWER_CHIKYU] < 6) {
ninja.c:	if (ch->pcdata->powers[HARA_KIRI] > 0) {
ninja.c:	if (ch->hit < ch->max_hit/10) {
ninja.c:	ch->pcdata->powers[HARA_KIRI] = ch->hit/500;
ninja.c:	if (ch->pcdata->powers[HARA_KIRI] < 5)
ninja.c:	ch->pcdata->powers[HARA_KIRI] = 5;	
ninja.c:	ch->hit = 1;
ninja.c:	ch->mana = 1;
ninja.c:	ch->move = 1;
ninja.c:    if ( ch->practice < 60 )
ninja.c:       if (ch->pcdata->upgrade_level >= 1){
ninja.c:		ch->practice -= 60;
ninja.c:    obj->questowner = str_dup(ch->pcdata->switchname);
ninja.c:  if (ch->pcdata->powers[NPOWER_NINGENNO] < 2)
olc_act.c:    pArea = ch->in_room->area;
olc_act.c:    pArea = ch->in_room->area;
olc_act.c:	ch->desc->pEdit = (void *)pMob;
olc_act.c:    ch->desc->pEdit = (void *)ch->in_room;
olc_act.c:	ch->desc->pEdit = (void *)pObj;
olc_act.c:    ch->desc->pEdit = (void *)ch->in_room;
olc_act.c:    ch->desc->pEdit     =   (void *)pArea;
olc_act.c:    if ( value > ch->pcdata->security || value < 0 )
olc_act.c:	if ( ch->pcdata->security != 0 )
olc_act.c:	    sprintf( buf, "Security is 0-%d.\n\r", ch->pcdata->security );
olc_act.c:    for ( rch = pRoom->people; rch; rch = rch->next_in_room )
olc_act.c:	one_argument( rch->name, buf );
olc_act.c:	pExit->to_room		= ch->in_room;	/* Assign data.		*/
olc_act.c:	pExit->vnum		= ch->in_room->vnum;
olc_act.c:    ch->desc->pEdit		= (void *)pRoom;
olc_act.c:    if ( !IS_BUILDER( ch, pArea ) && ch->level < 12 )
olc_act.c:    ch->desc->pEdit		= (void *)pObj;
olc_act.c:    ch->desc->pEdit		= (void *)pMob;
olc_act.c:        ch->desc->pEdit         = (void *)tHelp;
olc_act.c: ch->desc->pEdit                = (void *)pHelp;
olc.c:    switch (ch->desc->editor)
olc.c:    switch ( ch->desc->editor )
olc.c:	pArea = (AREA_DATA *)ch->desc->pEdit;
olc.c:	pRoom = ch->in_room;
olc.c:	pObj = (OBJ_INDEX_DATA *)ch->desc->pEdit;
olc.c:	pMob = (MOB_INDEX_DATA *)ch->desc->pEdit;
olc.c:    switch (ch->desc->editor)
olc.c:    ch->desc->pEdit = NULL;
olc.c:    ch->desc->editor = 0;
olc.c:    if ( !IS_BUILDER( ch, pArea ) && ch->level < 13 )
olc.c:	if ( ch->trust == 13 || ch->level == 13 ) return TRUE;
olc.c:	if ( ch->pcdata->security < pArea->security ) return FALSE;
olc.c:	if ( ch->pcdata->security == pArea->security ) return TRUE;
olc.c:	if ( ch->pcdata->security == 0 ) return FALSE;
olc.c:    pArea = ch->in_room->area;
olc.c:	if ( ch->desc->editor == ED_AREA )
olc.c:	    reset_area( (AREA_DATA *)ch->desc->pEdit );
olc.c:	    ch->desc->editor = ED_AREA;
olc.c:	    pArea = (AREA_DATA *)ch->desc->pEdit;
olc.c:    ch->desc->pEdit = (void *)pArea;
olc.c:    ch->desc->editor = ED_AREA;
olc.c:    pRoom = ch->in_room;
olc.c:        if ( !IS_BUILDER(ch, pRoom->area) && ch->pcdata->security < 7 )
olc.c:	    char_to_room( ch, ch->desc->pEdit );
olc.c:    ch->desc->editor = ED_ROOM;
olc.c:	ch->desc->pEdit = (void *)pObj;
olc.c:	ch->desc->editor = ED_OBJECT;
olc.c:	    ch->desc->editor = ED_OBJECT;
olc.c:	ch->desc->pEdit = (void *)pMob;
olc.c:	ch->desc->editor = ED_MOBILE;
olc.c:	    ch->desc->editor = ED_MOBILE;
olc.c:	if ( ch->in_room->reset_first )
olc.c:	ROOM_INDEX_DATA *pRoom = ch->in_room;
olc.c:	    if ( !ch->in_room->reset_first )
olc.c:		pReset->arg3    = ch->in_room->vnum;
olc.c:		    pReset->arg3     = ch->in_room->vnum;
olc.c:	    add_reset( ch->in_room, pReset, atol( arg1 ) );
olc.c:	if (ch->pcdata->security < 1) {
olc.c:  if (ch->level < (MAX_LEVEL - 10))
olc.c:        ch->desc->editor = ED_HELP;
olc.c:        ch->desc->editor = ED_HELP;
olc.c:        ch->desc->editor = ED_HELP;
olc.c:        ch->desc->editor = ED_HELP;
olc.c:        ch->desc->editor = ED_HELP;
olc_save.c:	if (ch->pcdata->security < 1) {
olc_save.c:		if (ch->level > 6){
olc_save.c:	switch (ch->desc->editor)
olc_save.c:		pArea = (AREA_DATA *)ch->desc->pEdit;
olc_save.c:		pArea = ch->in_room->area;
olc_save.c:		pArea = ( (OBJ_INDEX_DATA *)ch->desc->pEdit )->area;
olc_save.c:		pArea = ( (MOB_INDEX_DATA *)ch->desc->pEdit )->area;
olc_save.c:		pArea = ch->in_room->area;
phoenix.c:  if ( ch->practice < 150 )
phoenix.c:   if (ch->pcdata->upgrade_level >= 1)
phoenix.c:  obj->questowner = str_dup(ch->pcdata->switchname);
phoenix.c:  ch->practice -= 150;
phoenix.c:if(ch->pcdata->phoenix[0]>0)
phoenix.c:if(ch->pcdata->phoenix[0]>1)
phoenix.c:if(ch->pcdata->phoenix[0]>2)
phoenix.c:if(ch->pcdata->phoenix[0]>3)
phoenix.c:if(ch->pcdata->phoenix[0]>4)
phoenix.c:if(ch->pcdata->phoenix[0]>5)
phoenix.c:if(ch->pcdata->phoenix[0]>6)
phoenix.c:if(ch->pcdata->phoenix[0]>7)
phoenix.c:if(ch->pcdata->phoenix[0]>8)
phoenix.c:if(ch->pcdata->phoenix[0]>9)
phoenix.c:    if(ch->exp<1000000000){
phoenix.c:else if(ch->pcdata->phoenix[0]>=10){
phoenix.c:ch->pcdata->phoenix[0]+=1;
phoenix.c:ch->exp-=1000000000;}
phoenix.c:  victim = ch->fighting;
phoenix.c:if(ch->pcdata->phoenix[0]<10){
phoenix.c:if(ch->pcdata->phoenix[1]>0){
phoenix.c:if(ch->hit>0){
phoenix.c:  ch->hit+=ch->max_hit*.18;
phoenix.c:ch->position = POS_STANDING;
phoenix.c:ch->pcdata->phoenix[1]=5;
phoenix.c:if(ch->pcdata->phoenix[0]<9){
phoenix.c:        if ( ch->fighting != NULL )
phoenix.c:if(victim->in_room!=ch->in_room){
phoenix.c:victim->hit+=ch->pcdata->phoenix[0]*1000;
phoenix.c:WAIT_STATE(ch,(14-(ch->pcdata->phoenix[0])));
phoenix.c:if(ch->pcdata->phoenix[0]<1){
phoenix.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
phoenix.c:  if (victim->in_room == ch->in_room)
phoenix.c:if(ch->pcdata->phoenix[0]<5){
phoenix.c:        if ( ch->rage >= 500 )
phoenix.c:        if ( ch->move < 500 )
phoenix.c:        ch->rage += 100;
phoenix.c:        ch->move -= 500;
phoenix.c:if(ch->pcdata->phoenix[0]<4){
phoenix.c:  if (ch->mana < 5000)
phoenix.c:        ch->mana -= 5000;
phoenix.c:if(ch->pcdata->phoenix[0]<8){
phoenix.c:    if ( !IS_SET(ch->polyaff, POLY_ZULOFORM) )
phoenix.c:    if (ch->mounted == IS_RIDING) do_dismount(ch,"");
phoenix.c:        SET_BIT(ch->polyaff, POLY_ZULOFORM);
phoenix.c:        SET_BIT(ch->affected_by, AFF_POLYMORPH);
phoenix.c:        ch->damroll += 3000;
phoenix.c:        ch->hitroll += 3000;
phoenix.c:        ch->armor   -= 1000;
phoenix.c:        sprintf(buf, "#RF#rl#Ra#rm#Ri#rn#Rg #RP#yh#Ro#ye#Rn#yi#Rx #R%s#n", ch->name);
phoenix.c:        free_string( ch->morph );
phoenix.c:        ch->morph = str_dup( buf );
phoenix.c:    else if ( IS_SET(ch->polyaff, POLY_ZULOFORM) )
phoenix.c:        REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
phoenix.c:        REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
phoenix.c:        ch->damroll -= 3000;
phoenix.c:        ch->hitroll -= 3000;
phoenix.c:        ch->armor   += 1000;
phoenix.c:        free_string( ch->morph );
phoenix.c:        ch->morph = str_dup( "" );
phoenix.c:    if(ch->pcdata->phoenix[0]<2){
phoenix.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
phoenix.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
phoenix.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
phoenix.c:if(ch->pcdata->phoenix[0]<7){
phoenix.c:        REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
phoenix.c:        SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_CLAWS);
phoenix.c:if(ch->pcdata->phoenix[0]<6){
phoenix.c:    if (( victim = ch->fighting) == NULL)
phoenix.c:    else victim = ch->fighting;
phoenix.c:  if (ch->mana < 10000)
phoenix.c:  sprintf(buf, "#C%s calls upon a sun fire to harm you! #7[%d]\n\r",ch->name,dam);
phoenix.c:  ch->mana -= 10000;
phoenix.c:  ch->hit += dam/2;
phoenix.c:if(ch->hit>ch->max_hit)ch->hit=ch->max_hit;
phoenix.c:  if (ch->fighting == NULL) ch->fighting = victim;
phoenix.c:if(ch->pcdata->phoenix[0]<3){
phoenix.c:   if ((victim = ch->fighting) == NULL)
psycho.c:  if( (victim == ch) && (ch->level != MAX_LEVEL) )
psycho.c:      if(!IS_SET(wch->affected_by2, PLR_PSYCHO))
randomeq.c:dam+=number_range((ch->damcap[DAM_CAP]/2)+ac,ch->damcap[DAM_CAP]);
randomeq.c:dam +=ch->damroll;
randomeq.c:if(dam>ch->damcap[DAM_CAP])dam=ch->damcap[DAM_CAP];
randomeq.c:dam+=number_range((ch->damcap[DAM_CAP]/2)+ac,ch->damcap[DAM_CAP]);
randomeq.c:dam +=ch->damroll;
randomeq.c:if(dam>ch->damcap[DAM_CAP])dam=ch->damcap[DAM_CAP];
rpalign.c:  ch->pcdata->rpalign=RPALIGN_NONE;
rpalign.c:    {//if(ch->pcdata->quest >=10000){
rpalign.c:       // ch->pcdata->quest -= 10000;
rpalign.c:        ch->pcdata->rpalign = RPALIGN_LIGHT;
rpalign.c:	sprintf(buf,"%s has chosen to be a warrior for the light.\n\r",ch->name);
rpalign.c:        //if(ch->pcdata->quest >=10000){
rpalign.c:        //ch->pcdata->quest -= 10000;
rpalign.c:        ch->pcdata->rpalign = RPALIGN_DARK;
rpalign.c:	sprintf(buf,"%s has chosen to be a warrior for the darkness.\n\r",ch->name);
rpalign.c:    //if(ch->pcdata->quest >=10000){
rpalign.c:       // ch->pcdata->quest -= 10000;
rpalign.c:        ch->pcdata->rpalign = RPALIGN_NEUTRAL;
rpalign.c:	sprintf(buf,"%s has chosen to be a warrior for themselves.\n\r",ch->name);
rpalign.c:    if(ch->pcdata->quest >=1000000){
rpalign.c:        ch->pcdata->quest -= 1000000;
rpalign.c:        ch->pcdata->rpalign = RPALIGN_LOVE;
rpalign.c:        sprintf(buf,"%s has chosen to be a warrior for Love.\n\r",ch->name);
rpalign.c:        //if(ch->pcdata->quest >=20000){
rpalign.c:        //ch->pcdata->quest -= 20000;
rpalign.c:        ch->pcdata->rpalign = RPALIGN_NONE;
rpalign.c:	sprintf(buf,"%s has given up in the war between the light and dark.\n\r",ch->name);
rponly.c:    obj->questmaker = str_dup(ch->name);
rponly.c:    obj->questmaker = str_dup(ch->name);
rponly.c:    if ( !str_cmp(arg2,"all" ) ) value = ch->pcdata->store;
rponly.c:    obj->questmaker = str_dup(ch->name);
rponly.c:    if ( !str_cmp(arg2,"all" ) ) value = ch->pcdata->quest;
rponly.c:    obj->questowner = str_dup(ch->pcdata->switchname);
rponly.c:    obj->questmaker = str_dup(ch->name);
runemaster.c:		if ( ch->pcdata->quest < costs[9] )
runemaster.c:		ch->pcdata->quest -= costs[9];
runemaster.c:		if ( ch->practice < costs[i] )
runemaster.c:		ch->practice -= costs[i];
runemaster.c:	    free_string(rune->questmaker); rune->questmaker = str_dup(ch->name);
runemaster.c:	    free_string(rune->questowner); rune->questowner = str_dup(ch->name);
runemaster.c:	if ( ch->practice < 1000 )
runemaster.c:	ch->practice -= 1000;
runemaster.c:	free_string(robe->questmaker); robe->questmaker = str_dup(ch->name);
runemaster.c:	free_string(robe->questowner); robe->questowner = str_dup(ch->name);
runemaster.c:	if ( ch->practice < 1500 )
runemaster.c:	if ( (weapon_type == 9 || weapon_type == 10) && ch->pcdata->quest < 1000 )
runemaster.c:	else ch->pcdata->quest -= 1000;
runemaster.c:	ch->practice -= 1500;
runemaster.c:	free_string(weapon->questmaker); weapon->questmaker = str_dup(ch->name);
runemaster.c:	free_string(weapon->questowner); weapon->questowner = str_dup(ch->name);
runemaster.c:	if ( ch->pcdata->quest < 5000 )
runemaster.c:	ch->pcdata->quest -= 5000;
runemaster.c:	free_string(scroll->questmaker); scroll->questmaker = str_dup(ch->name);
runemaster.c:	free_string(scroll->questowner); scroll->questowner = str_dup(ch->name);
runemaster.c:	if ( ch->pcdata->powers[RUNEM_FORGE] == 10 )
runemaster.c:	cost = 1000 * (ch->pcdata->powers[RUNEM_FORGE] + 1);
runemaster.c:	if ( ch->practice < cost )
runemaster.c:	ch->practice -= cost;
runemaster.c:	ch->pcdata->powers[RUNEM_FORGE]++;
runemaster.c:	if ( ch->pcdata->powers[RUNEM_WEAVE] == 10 )
runemaster.c:	cost = 1000 * (ch->pcdata->powers[RUNEM_WEAVE] + 1);
runemaster.c:	if ( ch->practice < cost )
runemaster.c:	ch->practice -= cost;
runemaster.c:	ch->pcdata->powers[RUNEM_WEAVE]++;
runemaster.c:	 ch->pcdata->powers[RUNEM_FORGE], ch->pcdata->powers[RUNEM_WEAVE] );
runemaster.c:    for ( runeobj = ch->carrying; runeobj; runeobj = runeobj->next )
runemaster.c:    if ( rune_global[0] >= ch->pcdata->powers[RUNEM_FORGE] )
runemaster.c:    for ( runeobj = ch->carrying; runeobj; runeobj = runeobj->next )
runemaster.c:    if ( rune_global[0] >= ch->pcdata->powers[RUNEM_WEAVE] )
runemaster.c:	    if ( rune_spell_table[i].type == RS_TAR && ch->fighting )
runemaster.c:		victim = ch->fighting;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:	for ( rvict = ch->in_room->people; rvict;  )
runemaster.c:	    if ( !rvict ) rvict = ch->in_room->people;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    for ( rvict = ch->in_room->people; rvict; rvict = rvict->next )
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    for ( rvict = ch->in_room->people; rvict; rvict = rvict->next )
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    for ( rvict = ch->in_room->people; rvict; rvict = rvict->next )
runemaster.c:    dam = ch->hit/2;
runemaster.c:    sh_int rgen = 6 - ch->generation;
runemaster.c:    sh_int rgen = 6 - ch->generation;
samurai.c:  if ( 250 > ch->practice)
samurai.c:  ch->practice   -= 250;
samurai.c:  obj->questowner = str_dup(ch->pcdata->switchname);
samurai.c:joshqval = ch->pcdata->quest;
samurai.c:ch->pcdata->quest = 999999;
samurai.c:  joshval=(ch->wpn[0]/70)*(1+(ch->pcdata->upgrade_level*.6));
samurai.c:  joshval+=(ch->stance[7]/70)*(1+(ch->pcdata->upgrade_level*.3));
samurai.c:ch->pcdata->quest += obj->points;
samurai.c://ch->quest += obj->points;
samurai.c:  joshval=(ch->wpn[1]/70)*(1+(ch->pcdata->upgrade_level*.6));
samurai.c:  joshval+=(ch->stance[6]/70)*(1+(ch->pcdata->upgrade_level*.3));
samurai.c:ch->pcdata->quest += obj->points;
samurai.c://ch->quest += obj->points;
samurai.c:  joshval=(ch->wpn[2]/3)*ch->pcdata->upgrade_level+1;
samurai.c:  joshval+=(ch->stance[4]/3)*(ch->pcdata->upgrade_level+1);
samurai.c:ch->pcdata->quest += obj->points;
samurai.c://ch->quest += obj->points;
samurai.c:  joshval=(ch->wpn[3]/45)*(1+(ch->pcdata->upgrade_level*.3));
samurai.c:  joshval-=(ch->stance[4]/45)*(1+(ch->pcdata->upgrade_level*.3)) ;
samurai.c:ch->pcdata->quest += obj->points;
samurai.c://ch->quest += obj->points;
samurai.c:joshval = (((ch->wpn[7] + ch->stance[3])/70)*(2+(ch->pcdata->upgrade_level*.4))/4);
samurai.c:joshval=(((ch->wpn[5] + ch->stance[2])/40)*(2+(ch->pcdata->upgrade_level*.4))/4);
samurai.c:  ch->pcdata->quest = joshqval;
samurai.c://    obj->questowner = str_dup(ch->pcdata->switchname);
samurai.c:  if (250 > ch->practice)
samurai.c:  ch->practice   -= 250;
samurai.c:  obj->questowner = str_dup(ch->pcdata->switchname);
samurai.c:samcost = ch->pcdata->quest;
samurai.c:ch->pcdata->quest = 999999;
samurai.c:sambonus = (ch->wpn[0]/70)*(1+(ch->pcdata->upgrade_level)/2);
samurai.c:sambonus +=(ch->stance[7]/70)*(1+(ch->pcdata->upgrade_level)/2);
samurai.c:ch->pcdata->quest += obj->points;
samurai.c:sambonus = (ch->wpn[1]/70)*(1+(ch->pcdata->upgrade_level)/2);
samurai.c:sambonus += (ch->stance[6]/70)*(1+(ch->pcdata->upgrade_level)/2);
samurai.c:ch->pcdata->quest += obj->points;
samurai.c:sambonus=(ch->wpn[2]/3)*ch->pcdata->upgrade_level+1;
samurai.c:sambonus+=(ch->stance[4]/2)*(ch->pcdata->upgrade_level+1);
samurai.c:ch->pcdata->quest += obj->points;
samurai.c:sambonus = (ch->wpn[3]/45)*(1+(ch->pcdata->upgrade_level)/2);
samurai.c:sambonus += (ch->stance[4]/30)*(1+(ch->pcdata->upgrade_level)/2);
samurai.c:ch->pcdata->quest += obj->points;
samurai.c:sambonus = (((ch->wpn[7] + ch->stance[3])/100)*(2+(ch->pcdata->upgrade_level))/4); 
samurai.c:sambonus=(((ch->wpn[5] + ch->stance[2])/60)*(2+(ch->pcdata->upgrade_level))/4);
samurai.c:  ch->pcdata->quest = samcost;
samurai.c:  if (ch->wpn[3] < 1000 || ch->wpn[0]<1000 || ch->wpn[1] <1000)
samurai.c:  if ( IS_SET(ch->newbits, NEW_BLADESPIN) )
samurai.c:    REMOVE_BIT(ch->newbits, NEW_BLADESPIN);
samurai.c:  if (!IS_SET(ch->newbits, NEW_BLADESPIN) )
samurai.c:    SET_BIT(ch->newbits, NEW_BLADESPIN);
samurai.c:   if( ch->move < 1000) 
samurai.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
samurai.c:    if (victim->in_room == ch->in_room)
samurai.c:    ch->move -= 1000;
samurai.c:  if (ch->pcdata->powers[SAMURAI_FOCUS] < 10)
samurai.c:  ch->pcdata->powers[SAMURAI_FOCUS] -= number_range(1, ch->pcdata->powers[SAMURAI_FOCUS]);
samurai.c:  if (!IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_SLIDE))
samurai.c:  if (ch->pcdata->powers[SAMURAI_FOCUS] > 50)
samurai.c:  if ((victim = ch->fighting) == NULL)
samurai.c:  ch->pcdata->powers[SAMURAI_FOCUS] += 1;
samurai.c:  if (!IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_SIDESTEP))
samurai.c:  if (ch->pcdata->powers[SAMURAI_FOCUS] > 50)
samurai.c:  if ((victim = ch->fighting) == NULL)
samurai.c:  ch->pcdata->powers[SAMURAI_FOCUS] += 2;
samurai.c:  if (!IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_BLOCK))
samurai.c:  if (ch->pcdata->powers[SAMURAI_FOCUS] > 50)
samurai.c:  if ((victim = ch->fighting) == NULL)
samurai.c:  ch->pcdata->powers[SAMURAI_FOCUS] += 4;
samurai.c:  if (!IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_COUNTERMOVE))
samurai.c:  if (ch->pcdata->powers[SAMURAI_FOCUS] > 50)
samurai.c:  if ((victim = ch->fighting) == NULL)
samurai.c:  ch->pcdata->powers[SAMURAI_FOCUS] += 8;
samurai.c:  switch(ch->pcdata->powers[SAMURAI_FOCUS])
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 10)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 10;
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 15)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 15;
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 20)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 20;
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 25)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 25;
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 30)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 30;
samurai.c:      ch->hit += number_range(10000, 20000);
samurai.c:     // if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 35)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 35;
samurai.c:      if (ch->pcdata->powers[SAMURAI_LAST] == 40)
samurai.c:      ch->pcdata->powers[SAMURAI_LAST] = 40;
samurai.c:      ch->move -= 50000;
samurai.c://      REMOVE_BIT(ch->newbits, SPEED);
samurai.c:    if (IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_SLIDE))
samurai.c:    if (ch->exp < cost)
samurai.c:      sprintf(buf, "You need %d more exp to learn this technique.\n\r", cost - ch->exp);
samurai.c:    ch->exp -= cost;
samurai.c:    SET_BIT(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_SLIDE);
samurai.c:    if (IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_SIDESTEP))
samurai.c:    if (ch->exp < cost)
samurai.c:      sprintf(buf, "You need %d more exp to learn this technique.\n\r", cost - ch->exp);
samurai.c:    ch->exp -= cost;
samurai.c:    SET_BIT(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_SIDESTEP);
samurai.c:    if (IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_BLOCK))
samurai.c:    if (ch->exp < cost)
samurai.c:      sprintf(buf, "You need %d more exp to learn this technique.\n\r", cost - ch->exp);
samurai.c:    ch->exp -= cost;
samurai.c:    SET_BIT(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_BLOCK);
samurai.c:    if (IS_SET(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_COUNTERMOVE))
samurai.c:    if (ch->exp < cost)
samurai.c:      sprintf(buf, "You need %d more exp to learn this technique.\n\r", cost - ch->exp);
samurai.c:    ch->exp -= cost;
samurai.c:    SET_BIT(ch->pcdata->powers[SAMURAI_MARTIAL], SAM_COUNTERMOVE);
save.c:    if ( IS_NPC(ch) || ch->level < 2 )
save.c:    if ( ch->desc != NULL && ch->desc->connected != CON_PLAYING )
save.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
save.c:	ch = ch->desc->original;
save.c:    ch->save_time = current_time;
save.c:    sprintf( strsave, "%s%s", PLAYER_DIR, capitalize( ch->pcdata->switchname ) );
save.c:	if ( ch->carrying != NULL )
save.c:	    fwrite_obj( ch, ch->carrying, fp, 0 );
save.c:    if ( IS_NPC(ch) || ch->level < 2 )
save.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
save.c:	ch = ch->desc->original;
save.c:    ch->save_time = current_time;
save.c:    sprintf( strsave, "%sstore/%s", PLAYER_DIR, capitalize(ch->pcdata->switchname) );
save.c:	if ( ch->carrying != NULL )
save.c:	    fwrite_obj( ch, ch->carrying, fp, 0 );
save.c:	if      (ch->level >= 12) sprintf(chlevel,"<Creator>");
save.c:        else if (ch->level == 11) sprintf(chlevel,"<Implementor>");
save.c:	else if (ch->level == 10) sprintf(chlevel,"<High Judge>");
save.c:	else if (ch->level == 9 ) sprintf(chlevel,"<Judge>");
save.c:	else if (ch->level == 8 ) sprintf(chlevel,"<Quest Maker>");
save.c:	else if (ch->level == 7 ) sprintf(chlevel,"<Builder>");
save.c:	else if (ch->level == 6 ) sprintf(chlevel,"<Intern>");
save.c:	else if (ch->level == 5 ) sprintf(chlevel,"<Avatar>");
save.c:	else if (ch->level == 4 ) sprintf(chlevel,"<Avatar>");
save.c:	else if (ch->level == 3 ) sprintf(chlevel,"<Avatar>");
save.c:	if (strlen(ch->lasttime) > 1)
save.c:	    sprintf(buf,"%s Last logged in on %s.\n\r", chlevel, ch->lasttime);
save.c:	    sprintf(buf,"%s New player logged in on %s.\n\r", chlevel, ch->createtime);
save.c:    if ( IS_NPC(ch) || ch->level < 2 )
save.c:    if ( ch->desc != NULL && ch->desc->original != NULL )
save.c:	ch = ch->desc->original;
save.c:    ch->save_time = current_time;
save.c:    sprintf( strsave, "%sbackup/%s", PLAYER_DIR, capitalize(ch->pcdata->switchname) );
save.c:	fprintf( fp, "%s~\n",   ch->name                );
save.c:	fprintf( fp, "%s~\n",   ch->pcdata->title       );
save.c:	fprintf( fp, "%s~\n",   ch->lasthost            );
save.c:	fprintf( fp, "%s~\n",   ch->lasttime            );
save.c:	fprintf( fp, "%d\n",    ch->extra               );
save.c:	fprintf( fp, "%d\n",    ch->sex                 );
save.c:	fprintf( fp, "%s~\n",   ch->pcdata->conception  );
save.c:	fprintf( fp, "%s~\n",   ch->createtime          );
save.c:	fprintf( fp, "%d\n",    ch->level               );
save.c:	    ch->played + (int) (current_time - ch->logon));
save.c:	fprintf( fp, "%s~\n",   ch->pcdata->marriage    );
save.c:	fprintf( fp, "%d\n",    ch->pkill 		);
save.c:	fprintf( fp, "%d\n",    ch->pdeath 		);
save.c:	fprintf( fp, "%d\n",    ch->pcdata->awins       );
save.c:	fprintf( fp, "%d\n",    ch->pcdata->alosses     );
save.c:	fprintf( fp, "%d\n",    ch->mkill 		);
save.c:	fprintf( fp, "%d\n",    ch->mdeath 		);
save.c:        fprintf( fp, "%d\n",    ch->class               );
save.c:        fprintf( fp, "%d\n",    ch->race                );
save.c:	fprintf( fp, "%d\n",	ch->pcdata->kingdom	);
save.c:    fprintf( fp, "Name         %s~\n",  ch->name                );
save.c:    fprintf( fp, "Switchname   %s~\n",  ch->pcdata->switchname  );
save.c:    fprintf( fp, "ShortDescr   %s~\n",  ch->short_descr         );
save.c:    fprintf( fp, "LongDescr    %s~\n",  ch->long_descr          );
save.c:    fprintf( fp, "ObjDesc      %s~\n",  ch->objdesc		);
save.c:    fprintf( fp, "Description  %s~\n",  ch->description         );
save.c:    fprintf( fp, "Lord         %s~\n",  ch->lord                );
save.c:    fprintf( fp, "Kingdom      %d\n", ch->pcdata->kingdom	);
save.c:    fprintf( fp, "Kdecaptimer  %d\n", ch->pcdata->kdecap_timer	);
save.c:    fprintf( fp, "CPower %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d\n", ch->power[0],ch->power[1],ch->power[2],ch->power[3],ch->power[4], ch->power[5],ch->power[6],ch
save.c:->power[7],ch->power[8],ch->power[9], ch->power[10],ch->power[11],ch->power[12],ch->power[13],ch->power[14], ch->power[15],ch->power[16],ch->power[17],ch->power[18],ch->power[19], ch->power[20],ch->power[21],ch->power[22],ch->power[23],ch->power[24], ch->
save.c:power[25],ch->power[26],ch->power[27],ch->power[28],ch->power[29], ch->power[30],ch->power[31],ch->power[32],ch->power[33],ch->power[34], ch->power[35],ch->power[36],ch->power[37],ch->power[38],ch->power[39], ch->power[40],ch->power[41],ch->power[42],ch->
save.c:    fprintf( fp, "DiscRese     %d\n",   ch->pcdata->disc_research);
save.c:    fprintf( fp, "DiscPoin     %d\n",   ch->pcdata->disc_points );
save.c:    fprintf( fp, "Class        %d\n",   ch->class               );
save.c:    fprintf( fp, "Upgradelevel %d\n",   ch->pcdata->upgrade_level);
save.c:    fprintf( fp, "Race         %d\n",   ch->race		);
save.c:    fprintf( fp, "Morph        %s~\n",  ch->morph               );
save.c:    fprintf( fp, "Createtime   %s~\n",  ch->createtime          );
save.c:    fprintf( fp, "Lasttime     %s~\n",  ch->lasttime            );
save.c:    fprintf( fp, "Lasthost     %s~\n",  ch->lasthost            );
save.c:    fprintf( fp, "Poweraction  %s~\n",  ch->poweraction         );
save.c:    fprintf( fp, "Powertype    %s~\n",  ch->powertype           );
save.c:    fprintf( fp, "Prompt       %s~\n",  ch->prompt              );
save.c:    fprintf( fp, "Cprompt      %s~\n",  ch->cprompt             );
save.c:    fprintf( fp, "Decapmessage  %s~\n",  ch->pcdata->decapmessage  );
save.c:    fprintf( fp, "Loginmessage  %s~\n",  ch->pcdata->loginmessage  );
save.c:    fprintf( fp, "Logoutmessage %s~\n",  ch->pcdata->logoutmessage );
save.c:    fprintf( fp, "Avatarmessage %s~\n",  ch->pcdata->avatarmessage );
save.c:    fprintf( fp, "Tiemessage    %s~\n",  ch->pcdata->tiemessage  );
save.c:    fprintf( fp, "Jflags       %d\n",   ch->pcdata->jflags	);
save.c:    fprintf( fp, "Sex          %d\n",   ch->sex                 );
save.c:    fprintf( fp, "Meanparadox  %d\n",   ch->pcdata->mean_paradox_counter   );
save.c:    fprintf( fp, "Relrank      %d\n",   ch->pcdata->relrank	);
save.c:    fprintf( fp, "Runecount    %d\n",   ch->pcdata->rune_count   );
save.c:    fprintf( fp, "Revision     %d\n",   ch->pcdata->revision   );
save.c:    fprintf( fp, "Immune       %d\n",   ch->immune              );
save.c:    fprintf( fp, "Polyaff      %d\n",   ch->polyaff             );
save.c:    fprintf( fp, "Gnosis       %d\n",	ch->gnosis[GMAXIMUM]	);
save.c:    fprintf( fp, "Clan         %s~\n",  ch->clan		);
save.c:    fprintf( fp, "CurrentForm  %d\n",   ch->cur_form            );
save.c:    fprintf( fp, "Rage         %d\n",   ch->rage                );
save.c:    fprintf( fp, "Generation   %d\n",   ch->generation          );
save.c:    fprintf( fp, "Flag2       %d\n",   ch->flag2              );
save.c:    fprintf( fp, "Flag3       %d\n",   ch->flag3              );
save.c:    fprintf( fp, "Flag4       %d\n",   ch->flag4              ); 
save.c:    fprintf( fp, "SilTol      %d\n",   ch->siltol               );
save.c:    fprintf( fp, "Souls	      %d\n",   ch->pcdata->souls        );
save.c://    fprintf( fp, "Bloodpower  %d %d\n", ch->pcdata->bloodpower[0], ch->pcdata->bloodpower[1] );
save.c:    fprintf( fp, "Itemaffect   %d\n",   ch->itemaffect          );
save.c:    fprintf( fp, "Form         %d\n",   ch->form                );
save.c:    fprintf( fp, "Beast        %d\n",   ch->beast               );
save.c:    fprintf( fp, "Spectype     %d\n",   ch->spectype            );
save.c:    fprintf( fp, "Specpower    %d\n",   ch->specpower           );
save.c:    fprintf( fp, "Home         %d\n",   ch->home                );
save.c:    fprintf( fp, "Level        %d\n",   ch->level               );
save.c:    fprintf( fp, "Trust        %d\n",   ch->trust               );
save.c:    fprintf( fp, "Security     %d\n",   ch->pcdata->security    );  /* OLC */
save.c:    fprintf( fp, "Paradox      %d %d %d\n", ch->paradox[0], ch->paradox[1], 
save.c:					     ch->paradox[2] ); 
save.c:	ch->played + (int) (current_time - ch->logon)           );
save.c:    if ( ch->in_room->vnum == 72018 || (ch->was_in_room && ch->was_in_room->vnum == 72018) )
save.c:	(  ch->in_room == get_room_index( ROOM_VNUM_LIMBO )
save.c:	&& ch->was_in_room != NULL )
save.c:	    ? ch->was_in_room->vnum
save.c:	    : ch->in_room->vnum );
save.c:	ch->pkill, ch->pdeath, ch->mkill, ch->mdeath );
save.c:    fprintf( fp, "Pkpoints     %d\n", ch->pcdata->pkpoints );
save.c:    fprintf( fp, "Store	       %d\n", ch->pcdata->store );
save.c:    fprintf( fp, "Alos         %d\n", ch->pcdata->alosses);
save.c:    fprintf( fp, "Awin         %d\n", ch->pcdata->awins); 
save.c:	ch->wpn[0], ch->wpn[1], ch->wpn[2], ch->wpn[3], ch->wpn[4], 
save.c:	ch->wpn[5], ch->wpn[6], ch->wpn[7], ch->wpn[8], ch->wpn[9], 
save.c:	ch->wpn[10], ch->wpn[11], ch->wpn[12] );
save.c:        ch->wpn_lvl[0], ch->wpn_lvl[1], ch->wpn_lvl[2], ch->wpn_lvl[3], ch->wpn_lvl[4], 
save.c:        ch->wpn_lvl[5], ch->wpn_lvl[6], ch->wpn_lvl[7], ch->wpn_lvl[8], ch->wpn_lvl[9], 
save.c:        ch->wpn_lvl[10], ch->wpn_lvl[11], ch->wpn_lvl[12] );
save.c:	ch->spl[0], ch->spl[1], ch->spl[2], ch->spl[3], ch->spl[4] );
save.c:	ch->cmbt[0], ch->cmbt[1], ch->cmbt[2], ch->cmbt[3],
save.c:	ch->cmbt[4], ch->cmbt[5], ch->cmbt[6], ch->cmbt[7] );
save.c:	ch->stance[0], ch->stance[1], ch->stance[2], ch->stance[3],
save.c:	ch->stance[4], ch->stance[5], ch->stance[6], ch->stance[7],
save.c:	ch->stance[8], ch->stance[9], ch->stance[10], ch->stance[11] );
save.c:        ch->stance[12], ch->stance[13], ch->stance[14], ch->stance[15],
save.c:        ch->stance[16], ch->stance[17], ch->stance[18], ch->stance[19],
save.c:        ch->stance[20], ch->stance[21], ch->stance[22], ch->stance[23] );
save.c:	ch->loc_hp[0], ch->loc_hp[1], ch->loc_hp[2], ch->loc_hp[3],
save.c:	ch->loc_hp[4], ch->loc_hp[5], ch->loc_hp[6] );
save.c:	ch->hit, ch->max_hit, ch->mana, ch->max_mana, ch->move, ch->max_move );
save.c:    fprintf( fp, "Gold         %d\n",   ch->gold                );
save.c:    if (ch->class == CLASS_DEMON)
save.c:    fprintf( fp, "Warps        %d\n",   ch->warp                );
save.c:    fprintf( fp, "WarpCount    %d\n",   ch->warpcount           );
save.c:    fprintf( fp, "Monkstuff    %d\n",   ch->monkstuff           );
save.c:    fprintf( fp, "Monkcrap     %d\n",   ch->monkcrap            );
save.c:    fprintf( fp, "Chi       %d %d\n",  ch->chi[0], ch->chi[1]   );
save.c:    fprintf( fp, "Focus     %d %d\n",  ch->focus[0], ch->focus[1] );
save.c:    fprintf( fp, "Monkab     %d %d %d %d\n", ch->monkab[0], ch->monkab[1],
save.c:                                            ch->monkab[2], ch->monkab[3]);
save.c:      ch->gifts[0],  ch->gifts[1],  ch->gifts[2],
save.c:      ch->gifts[3],  ch->gifts[4],  ch->gifts[5],
save.c:      ch->gifts[6],  ch->gifts[7],  ch->gifts[8],
save.c:      ch->gifts[9],  ch->gifts[10], ch->gifts[11],
save.c:      ch->gifts[12], ch->gifts[13], ch->gifts[14],
save.c:      ch->gifts[15], ch->gifts[16], ch->gifts[17],
save.c:      ch->gifts[18], ch->gifts[19], ch->gifts[20] );
save.c:    fprintf( fp, "Garou1        %d\n", ch->garou1 );
save.c:    fprintf( fp, "Garou2        %d\n", ch->garou2 );
save.c:    fprintf( fp, "Explevel     %d\n",   ch->explevel            );
save.c:    fprintf( fp, "Expgained    %d\n",   ch->expgained           );
save.c:    fprintf( fp, "Exp          %d\n",   ch->exp                 );
save.c:    fprintf( fp, "Act          %d\n",   ch->act                 );
save.c:    fprintf( fp, "Act2         %d\n",   ch->act2                );
save.c:    fprintf( fp, "Special      %d\n",   ch->special             );
save.c:    fprintf( fp, "Newbits      %d\n",   ch->newbits             );
save.c:    fprintf( fp, "Extra        %d\n",   ch->extra               );
save.c:    fprintf( fp, "AffectedBy   %d\n",   ch->affected_by         );
save.c:	ch->position == POS_FIGHTING ? POS_STANDING : ch->position );
save.c:    fprintf( fp, "Practice     %d\n",   ch->practice            );
save.c:    fprintf( fp, "SavingThrow  %d\n",   ch->saving_throw        );
save.c:    fprintf( fp, "Alignment    %d\n",   ch->alignment           );
save.c:    fprintf( fp, "XHitroll     %d\n",   ch->xhitroll            );
save.c:    fprintf( fp, "XDamroll     %d\n",   ch->xdamroll            );
save.c:    fprintf( fp, "Hitroll      %d\n",   ch->hitroll             );
save.c:    fprintf( fp, "Damroll      %d\n",   ch->damroll             );
save.c:    fprintf( fp, "Armor        %d\n",   ch->armor               );
save.c:    fprintf( fp, "Wimpy        %d\n",   ch->wimpy               );
save.c:    fprintf( fp, "Deaf         %d\n",   ch->deaf                );
save.c:	fprintf( fp, "Vnum         %d\n",       ch->pIndexData->vnum    );
save.c:	fprintf( fp, "Password     %s~\n",      ch->pcdata->pwd         );
save.c:	fprintf( fp, "Bamfin       %s~\n",      ch->pcdata->bamfin      );
save.c:	fprintf( fp, "Bamfout      %s~\n",      ch->pcdata->bamfout     );
save.c:        fprintf( fp, "Lastdecap1      %s~\n",      ch->pcdata->last_decap[0]  );
save.c:        fprintf( fp, "Lastdecap2      %s~\n",      ch->pcdata->last_decap[1]  );
save.c:	fprintf( fp, "Questsrun    %d\n",	ch->pcdata->questsrun	);
save.c:	fprintf( fp, "Queststotal  %d\n",	ch->pcdata->questtotal	);
save.c:	fprintf( fp, "Title        %s~\n",      ch->pcdata->title       );
save.c:	fprintf( fp, "Bounty	    %d\n",      ch->pcdata->bounty	);
save.c:	fprintf( fp, "Conception   %s~\n",      ch->pcdata->conception  );
save.c:	fprintf( fp, "Parents      %s~\n",      ch->pcdata->parents     );
save.c:	fprintf( fp, "Cparents     %s~\n",      ch->pcdata->cparents    );
save.c:        fprintf( fp, "Wiznet       %d\n",       ch->pcdata->wiznet      );
save.c:	fprintf( fp, "Marriage     %s~\n",      ch->pcdata->marriage    );
save.c:	    ch->pcdata->perm_str,
save.c:	    ch->pcdata->perm_int,
save.c:	    ch->pcdata->perm_wis,
save.c:	    ch->pcdata->perm_dex,
save.c:	    ch->pcdata->perm_con );
save.c:	    ch->pcdata->mod_str, 
save.c:	    ch->pcdata->mod_int, 
save.c:	    ch->pcdata->mod_wis,
save.c:	    ch->pcdata->mod_dex, 
save.c:	    ch->pcdata->mod_con );
save.c:	fprintf( fp, "Quest        %d\n", ch->pcdata->quest );
save.c:	fprintf( fp, "Wolf         %d\n", ch->rage      );
save.c:	fprintf( fp, "Rank         %d\n", ch->pcdata->rank );
save.c:        fprintf( fp, "Rpalign      %d\n", ch->pcdata->rpalign);
save.c:	    ch->pcdata->language[0],
save.c:	    ch->pcdata->language[1] );
save.c:	    ch->pcdata->stage[0],
save.c:	    ch->pcdata->stage[1],
save.c:	    ch->pcdata->stage[2] );
save.c:	    ch->pcdata->score[0],
save.c:	    ch->pcdata->score[1],
save.c:	    ch->pcdata->score[2],
save.c:	    ch->pcdata->score[3],
save.c:	    ch->pcdata->score[4],
save.c:	    ch->pcdata->score[5]);
save.c:	    ch->pcdata->genes[0],
save.c:	    ch->pcdata->genes[1],
save.c:	    ch->pcdata->genes[2],
save.c:	    ch->pcdata->genes[3],
save.c:	    ch->pcdata->genes[4],
save.c:	    ch->pcdata->genes[5],
save.c:	    ch->pcdata->genes[6],
save.c:	    ch->pcdata->genes[7],
save.c:	    ch->pcdata->genes[8],
save.c:	    ch->pcdata->genes[9] );
save.c:		fprintf(fp, "%d ", ch->pcdata->powers[sn]);
save.c:            ch->pcdata->classone[0],
save.c:            ch->pcdata->classone[1],
save.c:            ch->pcdata->classone[2],
save.c:            ch->pcdata->classone[3],
save.c:            ch->pcdata->classone[4],
save.c:            ch->pcdata->classone[5],
save.c:            ch->pcdata->classone[6],
save.c:            ch->pcdata->classone[7],
save.c:            ch->pcdata->classone[8],
save.c:            ch->pcdata->classone[9],
save.c:            ch->pcdata->classone[10],
save.c:            ch->pcdata->classone[11],
save.c:            ch->pcdata->classone[12],
save.c:            ch->pcdata->classone[13],
save.c:            ch->pcdata->classone[14],
save.c:            ch->pcdata->classone[15],
save.c:            ch->pcdata->classone[16],
save.c:            ch->pcdata->classone[17],
save.c:            ch->pcdata->classone[18],
save.c:            ch->pcdata->classone[19] );
save.c:            ch->pcdata->classtwo[0],
save.c:            ch->pcdata->classtwo[1],
save.c:            ch->pcdata->classtwo[2],
save.c:            ch->pcdata->classtwo[3],
save.c:            ch->pcdata->classtwo[4],
save.c:            ch->pcdata->classtwo[5],
save.c:            ch->pcdata->classtwo[6],
save.c:            ch->pcdata->classtwo[7],
save.c:            ch->pcdata->classtwo[8],
save.c:            ch->pcdata->classtwo[9],
save.c:            ch->pcdata->classtwo[10],
save.c:            ch->pcdata->classtwo[11],
save.c:            ch->pcdata->classtwo[12],
save.c:            ch->pcdata->classtwo[13],
save.c:            ch->pcdata->classtwo[14],
save.c:            ch->pcdata->classtwo[15],
save.c:            ch->pcdata->classtwo[16],
save.c:            ch->pcdata->classtwo[17],
save.c:            ch->pcdata->classtwo[18],
save.c:            ch->pcdata->classtwo[19] );
save.c:            ch->pcdata->classthree[0],
save.c:            ch->pcdata->classthree[1],
save.c:            ch->pcdata->classthree[2],
save.c:            ch->pcdata->classthree[3],
save.c:            ch->pcdata->classthree[4],
save.c:            ch->pcdata->classthree[5],
save.c:            ch->pcdata->classthree[6],
save.c:            ch->pcdata->classthree[7],
save.c:            ch->pcdata->classthree[8],
save.c:            ch->pcdata->classthree[9],
save.c:            ch->pcdata->classthree[10],
save.c:            ch->pcdata->classthree[11],
save.c:            ch->pcdata->classthree[12],
save.c:            ch->pcdata->classthree[13],
save.c:            ch->pcdata->classthree[14],
save.c:            ch->pcdata->classthree[15],
save.c:            ch->pcdata->classthree[16],
save.c:            ch->pcdata->classthree[17],
save.c:            ch->pcdata->classthree[18],
save.c:            ch->pcdata->classthree[19] );
save.c:            ch->pcdata->classfour[0],
save.c:            ch->pcdata->classfour[1],
save.c:            ch->pcdata->classfour[2],
save.c:            ch->pcdata->classfour[3],
save.c:            ch->pcdata->classfour[4],
save.c:            ch->pcdata->classfour[5],
save.c:            ch->pcdata->classfour[6],
save.c:            ch->pcdata->classfour[7],
save.c:            ch->pcdata->classfour[8],
save.c:            ch->pcdata->classfour[9],
save.c:            ch->pcdata->classfour[10],
save.c:            ch->pcdata->classfour[11],
save.c:            ch->pcdata->classfour[12],
save.c:            ch->pcdata->classfour[13],
save.c:            ch->pcdata->classfour[14],
save.c:            ch->pcdata->classfour[15],
save.c:            ch->pcdata->classfour[16],
save.c:            ch->pcdata->classfour[17],
save.c:            ch->pcdata->classfour[18],
save.c:            ch->pcdata->classfour[19] );
save.c:		fprintf(fp, "%d ", ch->pcdata->Bootcamp[sn]);
save.c:		fprintf(fp, "%d ", ch->pcdata->phoenix[sn]);
save.c:		fprintf(fp, "%d ", ch->pcdata->stats[sn]);
save.c:	    ch->pcdata->fake_skill, 
save.c:	    ch->pcdata->fake_stance, 
save.c:	    ch->pcdata->fake_hit,
save.c:	    ch->pcdata->fake_dam,
save.c:	    ch->pcdata->fake_ac,
save.c:	    ch->pcdata->fake_hp,
save.c:	    ch->pcdata->fake_mana,
save.c:	    ch->pcdata->fake_move);
save.c:	if (ch->pcdata->obj_vnum != 0)
save.c:	    fprintf( fp, "Objvnum      %d\n", ch->pcdata->obj_vnum );
save.c:	    ch->pcdata->condition[0],
save.c:	    ch->pcdata->condition[1],
save.c:	    ch->pcdata->condition[2] );
save.c:	    ch->pcdata->stat_ability[0],
save.c:	    ch->pcdata->stat_ability[1],
save.c:	    ch->pcdata->stat_ability[2],
save.c:	    ch->pcdata->stat_ability[3] );
save.c:	    ch->pcdata->stat_amount[0],
save.c:	    ch->pcdata->stat_amount[1],
save.c:	    ch->pcdata->stat_amount[2],
save.c:	    ch->pcdata->stat_amount[3] );
save.c:	    ch->pcdata->stat_duration[0],
save.c:	    ch->pcdata->stat_duration[1],
save.c:	    ch->pcdata->stat_duration[2],
save.c:	    ch->pcdata->stat_duration[3] );
save.c:	fprintf( fp, "Exhaustion   %d\n", ch->pcdata->exhaustion );
save.c:	fprintf (fp, "%s %ld ", boards[i].short_name, ch->pcdata->last_note[i]);
save.c:	    if ( skill_table[sn].name != NULL && ch->pcdata->learned[sn] > 0 )
save.c:		    ch->pcdata->learned[sn], skill_table[sn].name );
save.c:        for (ali = ch->pcdata->alias; ali; ali = ali->next)
save.c:    for ( paf = ch->affected; paf != NULL; paf = paf->next )
save.c:        ch->pcdata                      = alloc_perm( sizeof(*ch->pcdata) );
save.c:        ch->pcdata                      = pcdata_free;
save.c:    *ch->pcdata                         = pcdata_zero;
save.c:    ch->desc                            = d;
save.c:    ch->name                            = str_dup( name );
save.c:    ch->pcdata->switchname              = str_dup( name );
save.c:    ch->act                             = PLR_BLANK
save.c:    ch->act2                            = 0;
save.c:        ch->pcdata->board               = &boards[DEFAULT_BOARD];
save.c:    ch->extra                           = 0;
save.c:    ch->deaf                            = 0;
save.c:    ch->special                         = 0;
save.c:    ch->newbits                         = 0;
save.c:    ch->class                           = 0;
save.c:    ch->pcdata->familiar                = NULL;   
save.c:    ch->pcdata->partner                 = NULL;
save.c:    ch->pcdata->propose                 = NULL;
save.c:    ch->pcdata->chobj                   = NULL;
save.c:    ch->pcdata->memorised               = NULL;
save.c:    ch->pcdata->upgrade_level           = 0;
save.c:    ch->pcdata->safe_counter            = 0;
save.c:    ch->pcdata->mean_paradox_counter    = 0;
save.c:    ch->pcdata->relrank                 = 0;
save.c:    ch->pcdata->rune_count              = 0;
save.c:    ch->pcdata->revision                = 0;
save.c:    ch->pcdata->jflags                  = 0;
save.c:    ch->pcdata->tiemessage              = str_dup( "" );
save.c:    ch->pcdata->decapmessage            = str_dup( "" );
save.c:    ch->pcdata->logoutmessage           = str_dup( "" );
save.c:    ch->pcdata->avatarmessage           = str_dup( "" );
save.c:    ch->pcdata->loginmessage            = str_dup( "" );
save.c:    ch->pcdata->pwd                     = str_dup( "" );
save.c:    ch->pcdata->bamfin                  = str_dup( "" );
save.c:    ch->pcdata->last_decap[0]           = str_dup( "" );
save.c:    ch->pcdata->last_decap[1]           = str_dup( "" );
save.c:    ch->pcdata->bamfout                 = str_dup( "" );
save.c:    ch->pcdata->title                   = str_dup( "" );
save.c:    ch->pcdata->bounty                  = 0;
save.c:    ch->pcdata->conception              = str_dup( "" );
save.c:    ch->pcdata->parents                 = str_dup( "" );
save.c:    ch->pcdata->cparents                = str_dup( "" );
save.c:    ch->pcdata->marriage                = str_dup( "" );
save.c:    ch->pcdata->disc_research           = -1;
save.c:    ch->lord                            = str_dup( "" );
save.c:    ch->morph                           = str_dup( "" );
save.c:    ch->pload                           = str_dup( "" );
save.c:    ch->prompt                          = str_dup( "" );
save.c:    ch->cprompt                         = str_dup( "" );
save.c:    free_string(ch->lasttime);
save.c:    ch->createtime                      = str_dup( strtime );
save.c:    ch->lasttime                        = str_dup( "" );  
save.c:    ch->lasthost                        = str_dup( "" );
save.c:    ch->poweraction                     = str_dup( "" );
save.c:    ch->powertype                       = str_dup( "" );
save.c:    ch->hunting                         = str_dup( "" );
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->spectype                        = 0;
save.c:    ch->specpower                       = 0;
save.c:    ch->mounted                         = 0;
save.c:    ch->home                            = 3001;
save.c:    ch->vampgen_a                       = 0;
save.c:    ch->paradox[0]                      = 0;    /* Total paradox */
save.c:    ch->paradox[1]                      = 0;    /* Current Paradox */
save.c:    ch->paradox[2]                      = 0;    /* Paradox Ticker */
save.c:    ch->damcap[0]                       = 1000;
save.c:    ch->damcap[1]                       = 0; 
save.c:    ch->vampaff_a                       = 0;
save.c:    ch->itemaffect                      = 0;
save.c:    ch->polyaff                         = 0;
save.c:    ch->immune                          = 0;
save.c:    ch->form                            = 1048575;   
save.c:    ch->beast                           = 15;
save.c:        ch->loc_hp[sn]                  = 0;
save.c:         ch->wpn[sn]                    = 0;
save.c:         ch->spl[sn]                    = 0;
save.c:         ch->cmbt[sn]                   = 0;
save.c:         ch->cmbt[sn]                   = 0;
save.c:    ch->pkill                           = 0;      
save.c:    ch->pdeath                          = 0;   
save.c:    ch->mkill                           = 0;   
save.c:    ch->mdeath                          = 0;   
save.c:    ch->class                           = 0;   
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->pcdata->perm_str                = 1;
save.c:    ch->pcdata->perm_int                = 1;
save.c:    ch->pcdata->perm_wis                = 1;
save.c:    ch->pcdata->perm_dex                = 1;
save.c:    ch->pcdata->perm_con                = 1;
save.c:    ch->pcdata->quest                   = 0;
save.c:        ch->pcdata->kingdom             = 0;
save.c:    ch->pcdata->wolf                    = 0;
save.c:    ch->pcdata->rank                    = 0;
save.c:    ch->pcdata->language[0]             = 0;
save.c:    ch->pcdata->language[1]             = 0;
save.c:    ch->pcdata->stage[0]                = 0;
save.c:    ch->pcdata->stage[1]                = 0;
save.c:    ch->pcdata->stage[2]                = 0;
save.c:    ch->pcdata->wolfform[0]             = 1;
save.c:    ch->pcdata->wolfform[1]             = 1;
save.c:    ch->pcdata->score[0]                = 0;
save.c:    ch->pcdata->score[1]                = 0; 
save.c:    ch->pcdata->score[2]                = 0;
save.c:    ch->pcdata->score[3]                = 0;
save.c:    ch->pcdata->score[4]                = 0;
save.c:    ch->pcdata->score[5]                = 0;
save.c:         ch->pcdata->disc_a[sn]         = 0;
save.c:         ch->pcdata->genes[sn]          = 0;
save.c:        ch->pcdata->powers[sn]          = 0;
save.c:        ch->pcdata->classone[sn]	= 0;
save.c:        ch->pcdata->classtwo[sn]        = 0;
save.c:        ch->pcdata->classthree[sn]      = 0;
save.c:        ch->pcdata->classfour[sn]       = 0;
save.c:        ch->pcdata->stats[sn]           = 0;
save.c:    ch->pcdata->security                = 0;    /* OLC */
save.c:    ch->pcdata->fake_skill              = 0;   
save.c:    ch->pcdata->fake_stance             = 0;
save.c:    ch->pcdata->fake_hit                = 0;
save.c:    ch->pcdata->fake_dam                = 0;
save.c:    ch->pcdata->fake_ac                 = 0;
save.c:    ch->pcdata->fake_hp                 = 0;   
save.c:    ch->pcdata->fake_mana               = 0; 
save.c:    ch->pcdata->fake_move               = 0;
save.c:    ch->pcdata->obj_vnum                = 0;
save.c:    ch->pcdata->condition[COND_THIRST]  = 48;
save.c:    ch->pcdata->condition[COND_FULL]    = 48;
save.c:    ch->pcdata->stat_ability[STAT_STR]  = 0;
save.c:    ch->pcdata->stat_ability[STAT_END]  = 0;
save.c:    ch->pcdata->stat_ability[STAT_REF]  = 0; 
save.c:    ch->pcdata->stat_ability[STAT_FLE]  = 0;
save.c:    ch->pcdata->stat_amount[STAT_STR]   = 0;
save.c:    ch->pcdata->stat_amount[STAT_END]   = 0;
save.c:    ch->pcdata->stat_amount[STAT_REF]   = 0;
save.c:    ch->pcdata->stat_amount[STAT_FLE]   = 0;
save.c:    ch->pcdata->stat_duration[STAT_STR] = 0;
save.c:    ch->pcdata->stat_duration[STAT_END] = 0;
save.c:    ch->pcdata->stat_duration[STAT_REF] = 0;
save.c:    ch->pcdata->stat_duration[STAT_FLE] = 0;
save.c:    ch->pcdata->exhaustion              = 0;
save.c://    ch->pcdata->bloodpower[0]		= 0;
save.c://    ch->pcdata->bloodpower[1]		= 0;
save.c:	ch->pcdata                      = alloc_perm( sizeof(*ch->pcdata) );
save.c:	ch->pcdata                      = pcdata_free;
save.c:    *ch->pcdata                         = pcdata_zero;
save.c:    ch->desc                            = d;
save.c:    ch->name                            = str_dup( name );
save.c:    ch->pcdata->switchname              = str_dup( name );
save.c:    ch->act                             = PLR_BLANK
save.c:	ch->pcdata->board               = &boards[DEFAULT_BOARD];
save.c:    ch->extra                           = 0;
save.c:    ch->deaf				= 0;
save.c:    ch->special                         = 0;
save.c:    ch->newbits                         = 0;
save.c:    ch->class                           = 0;
save.c:    ch->pcdata->familiar                = NULL;
save.c:    ch->pcdata->partner                 = NULL;
save.c:    ch->pcdata->propose                 = NULL;
save.c:    ch->pcdata->chobj                   = NULL;
save.c:    ch->pcdata->memorised               = NULL;
save.c:    ch->pcdata->upgrade_level		= 0;
save.c:    ch->pcdata->safe_counter		= 0;
save.c:    ch->pcdata->mean_paradox_counter	= 0;
save.c:    ch->pcdata->relrank		        = 0;
save.c:    ch->pcdata->rune_count              = 0;
save.c:    ch->pcdata->revision                = 0;
save.c:    ch->pcdata->jflags                  = 0;
save.c://    ch->pcdata->bloodpower[0]		= 0;
save.c://    ch->pcdata->bloodpower[1]		= 0;
save.c:    ch->pcdata->tiemessage              = str_dup( "" );
save.c:    ch->pcdata->decapmessage            = str_dup( "" );
save.c:    ch->pcdata->avatarmessage           = str_dup( "" );
save.c:    ch->pcdata->logoutmessage           = str_dup( "" );
save.c:    ch->pcdata->loginmessage            = str_dup( "" );
save.c:    ch->pcdata->pwd                     = str_dup( "" );
save.c:    ch->pcdata->bamfin                  = str_dup( "" );
save.c:    ch->pcdata->bamfout                 = str_dup( "" );
save.c:    ch->pcdata->last_decap[0]           = str_dup( "" );
save.c:    ch->pcdata->last_decap[1]           = str_dup( "" );
save.c:    ch->pcdata->title                   = str_dup( "" );
save.c:    ch->pcdata->bounty			= 0;
save.c:    ch->pcdata->conception              = str_dup( "" );
save.c:    ch->pcdata->parents                 = str_dup( "" );
save.c:    ch->pcdata->cparents                = str_dup( "" );
save.c:    ch->pcdata->marriage                = str_dup( "" );
save.c:    ch->pcdata->disc_research           = -1;
save.c:    ch->lord                            = str_dup( "" );
save.c:    ch->morph                           = str_dup( "" );
save.c:    ch->pload                           = str_dup( "" );
save.c:    ch->prompt                          = str_dup( "" );
save.c:    ch->cprompt                         = str_dup( "" );
save.c:    free_string(ch->lasttime);
save.c:    ch->createtime                      = str_dup( strtime );
save.c:    ch->lasttime                        = str_dup( "" );
save.c:    ch->lasthost                        = str_dup( "" );
save.c:    ch->poweraction                     = str_dup( "" );
save.c:    ch->powertype                       = str_dup( "" );
save.c:    ch->hunting                         = str_dup( "" );
save.c:    ch->pcdata->kdecap_timer		= 0;
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->spectype                        = 0;
save.c:    ch->specpower                       = 0;
save.c:    ch->mounted                         = 0;
save.c:    ch->home                            = 3001;
save.c:    ch->vampgen_a                       = 0;
save.c:    ch->paradox[0]                      = 0;    /* Total paradox */
save.c:    ch->paradox[1]                      = 0;    /* Current Paradox */
save.c:    ch->paradox[2]                      = 0;    /* Paradox Ticker */
save.c:    ch->damcap[0]                       = 1000;
save.c:    ch->damcap[1]                       = 0;
save.c:     ch->vampaff_a                       = 0;
save.c:    ch->itemaffect                      = 0;
save.c:    ch->polyaff                         = 0;
save.c:    ch->immune                          = 0;
save.c:    ch->form                            = 1048575;
save.c:    ch->beast                           = 15;
save.c:	ch->loc_hp[sn]                  = 0;
save.c:	 ch->wpn[sn]                    = 0;
save.c:	 ch->spl[sn]                    = 0;
save.c:	 ch->cmbt[sn]                   = 0;
save.c:	 ch->cmbt[sn]                   = 0;
save.c:    ch->pkill                           = 0;
save.c:    ch->pdeath                          = 0;
save.c:    ch->mkill                           = 0;
save.c:    ch->mdeath                          = 0;
save.c:    ch->class                           = 0;
save.c:    ch->pcdata->followers               = 0;
save.c:    ch->pcdata->perm_str                = 1;
save.c:    ch->pcdata->perm_int                = 1; 
save.c:    ch->pcdata->perm_wis                = 1;
save.c:    ch->pcdata->perm_dex                = 1;
save.c:    ch->pcdata->perm_con                = 1;
save.c:    ch->pcdata->quest                   = 0;
save.c:	ch->pcdata->kingdom		= 0;
save.c:    ch->pcdata->rpalign			= 0; /*RPAlign None*/
save.c:    ch->pcdata->wolf                    = 0;
save.c:    ch->pcdata->rank                    = 0;
save.c:    ch->pcdata->language[0]             = 0;
save.c:    ch->pcdata->language[1]             = 0;
save.c:    ch->pcdata->stage[0]                = 0;
save.c:    ch->pcdata->stage[1]                = 0;
save.c:    ch->pcdata->stage[2]                = 0;
save.c:    ch->pcdata->wolfform[0]             = 1;
save.c:    ch->pcdata->wolfform[1]             = 1;
save.c:    ch->pcdata->score[0]                = 0;
save.c:    ch->pcdata->score[1]                = 0;
save.c:    ch->pcdata->score[2]                = 0;
save.c:    ch->pcdata->score[3]                = 0;
save.c:    ch->pcdata->score[4]                = 0;
save.c:    ch->pcdata->score[5]                = 0;
save.c:	 ch->pcdata->disc_a[sn]         = 0;
save.c:	 ch->pcdata->genes[sn]          = 0;
save.c:	ch->pcdata->powers[sn]          = 0;
save.c:	ch->pcdata->stats[sn]           = 0;
save.c:    ch->pcdata->security                = 0;    /* OLC */
save.c:    ch->pcdata->fake_skill              = 0;
save.c:    ch->pcdata->fake_stance             = 0;
save.c:    ch->pcdata->fake_hit                = 0;
save.c:    ch->pcdata->fake_dam                = 0;
save.c:    ch->pcdata->fake_ac                 = 0;
save.c:    ch->pcdata->fake_hp                 = 0;
save.c:    ch->pcdata->fake_mana               = 0;
save.c:    ch->pcdata->fake_move               = 0;
save.c:    ch->pcdata->obj_vnum                = 0;
save.c:    ch->pcdata->condition[COND_THIRST]  = 48;
save.c:    ch->pcdata->condition[COND_FULL]    = 48;
save.c:    ch->pcdata->stat_ability[STAT_STR]  = 0;
save.c:    ch->pcdata->stat_ability[STAT_END]  = 0;
save.c:    ch->pcdata->stat_ability[STAT_REF]  = 0;
save.c:    ch->pcdata->stat_ability[STAT_FLE]  = 0;
save.c:    ch->pcdata->stat_amount[STAT_STR]   = 0;
save.c:    ch->pcdata->stat_amount[STAT_END]   = 0;
save.c:    ch->pcdata->stat_amount[STAT_REF]   = 0;
save.c:    ch->pcdata->stat_amount[STAT_FLE]   = 0;
save.c:    ch->pcdata->stat_duration[STAT_STR] = 0;
save.c:    ch->pcdata->stat_duration[STAT_END] = 0;
save.c:    ch->pcdata->stat_duration[STAT_REF] = 0;
save.c:    ch->pcdata->stat_duration[STAT_FLE] = 0;
save.c:    ch->pcdata->exhaustion              = 0;
save.c:	    KEY( "Act",         ch->act,                fread_number( fp ) );
save.c:	    KEY( "Act2",        ch->act2,               fread_number( fp ) );
save.c:	    KEY( "AffectedBy",  ch->affected_by,        fread_number( fp ) );
save.c:	    KEY( "Alignment",   ch->alignment,          fread_number( fp ) );
save.c:	    KEY( "Armor",       ch->armor,              fread_number( fp ) );
save.c:            KEY( "Avatarmessage", ch->pcdata->avatarmessage,  fread_string( fp ) );
save.c:	    KEY( "Awin",        ch->pcdata->awins,      fread_number( fp ) );
save.c:	    KEY( "Alos",        ch->pcdata->alosses,    fread_number( fp ) );
save.c:		paf->next       = ch->affected;
save.c:		ch->affected    = paf;
save.c:		ch->pcdata->mod_str  = fread_number( fp );
save.c:		ch->pcdata->mod_int  = fread_number( fp );
save.c:		ch->pcdata->mod_wis  = fread_number( fp );
save.c:		ch->pcdata->mod_dex  = fread_number( fp );
save.c:		ch->pcdata->mod_con  = fread_number( fp );
save.c:		ch->pcdata->perm_str = fread_number( fp );
save.c:		ch->pcdata->perm_int = fread_number( fp );
save.c:		ch->pcdata->perm_wis = fread_number( fp );
save.c:		ch->pcdata->perm_dex = fread_number( fp );
save.c:		ch->pcdata->perm_con = fread_number( fp );
save.c:              ali->next = ch->pcdata->alias;
save.c:              ch->pcdata->alias = ali;
save.c:              ch->pcdata->alias_count++;
save.c:	    KEY( "Bamfin",      ch->pcdata->bamfin,     fread_string( fp ) );
save.c:	    KEY( "Bamfout",     ch->pcdata->bamfout,    fread_string( fp ) );
save.c:	    KEY( "Beast",       ch->beast,              fread_number( fp ) );
save.c:       	    KEY( "Bounty",  ch->pcdata->bounty, fread_number( fp ));
save.c:                ch->pcdata->Bootcamp[0] = fread_number(fp);
save.c:                ch->pcdata->Bootcamp[1] = fread_number(fp);
save.c:                ch->pcdata->Bootcamp[2] = fread_number(fp);
save.c:                ch->pcdata->Bootcamp[3] = fread_number(fp);
save.c:                ch->pcdata->Bootcamp[4] = fread_number(fp);
save.c:                ch->pcdata->Bootcamp[5] = fread_number(fp);
save.c:		/*ch->pcdata->bloodpower[0] =*/ fread_number( fp );
save.c:		/*ch->pcdata->bloodpower[1] =*/ fread_number( fp );
save.c:					sprintf (buf, "fread_char: %s had unknown board name: %s. Skipped.", ch->name, boardname);                                      
save.c:					ch->pcdata->last_note[i] = fread_number(fp);
save.c:            ch->pcdata->classone[0] = fread_number( fp );
save.c:            ch->pcdata->classone[1] = fread_number( fp );
save.c:            ch->pcdata->classone[2] = fread_number( fp );
save.c:            ch->pcdata->classone[3] = fread_number( fp );
save.c:            ch->pcdata->classone[4] = fread_number( fp );
save.c:            ch->pcdata->classone[5] = fread_number( fp );
save.c:            ch->pcdata->classone[6] = fread_number( fp );
save.c:            ch->pcdata->classone[7] = fread_number( fp );
save.c:            ch->pcdata->classone[8] = fread_number( fp );
save.c:            ch->pcdata->classone[9] = fread_number( fp );
save.c:            ch->pcdata->classone[10] = fread_number( fp );
save.c:            ch->pcdata->classone[11] = fread_number( fp );
save.c:            ch->pcdata->classone[12] = fread_number( fp );
save.c:            ch->pcdata->classone[13] = fread_number( fp );
save.c:            ch->pcdata->classone[14] = fread_number( fp );
save.c:            ch->pcdata->classone[15] = fread_number( fp );
save.c:            ch->pcdata->classone[16] = fread_number( fp );
save.c:            ch->pcdata->classone[17] = fread_number( fp );
save.c:            ch->pcdata->classone[18] = fread_number( fp );
save.c:            ch->pcdata->classone[19] = fread_number( fp );
save.c:            ch->pcdata->classtwo[0] = fread_number( fp );
save.c:            ch->pcdata->classtwo[1] = fread_number( fp );
save.c:            ch->pcdata->classtwo[2] = fread_number( fp );
save.c:            ch->pcdata->classtwo[3] = fread_number( fp );
save.c:            ch->pcdata->classtwo[4] = fread_number( fp );
save.c:            ch->pcdata->classtwo[5] = fread_number( fp );
save.c:            ch->pcdata->classtwo[6] = fread_number( fp );
save.c:            ch->pcdata->classtwo[7] = fread_number( fp );
save.c:            ch->pcdata->classtwo[8] = fread_number( fp );
save.c:            ch->pcdata->classtwo[9] = fread_number( fp );
save.c:            ch->pcdata->classtwo[10] = fread_number( fp );
save.c:            ch->pcdata->classtwo[11] = fread_number( fp );
save.c:            ch->pcdata->classtwo[12] = fread_number( fp );
save.c:            ch->pcdata->classtwo[13] = fread_number( fp );
save.c:            ch->pcdata->classtwo[14] = fread_number( fp );
save.c:            ch->pcdata->classtwo[15] = fread_number( fp );
save.c:            ch->pcdata->classtwo[16] = fread_number( fp );
save.c:            ch->pcdata->classtwo[17] = fread_number( fp );
save.c:            ch->pcdata->classtwo[18] = fread_number( fp );
save.c:            ch->pcdata->classtwo[19] = fread_number( fp );
save.c:            ch->pcdata->classthree[0] = fread_number( fp );
save.c:            ch->pcdata->classthree[1] = fread_number( fp );
save.c:            ch->pcdata->classthree[2] = fread_number( fp );
save.c:            ch->pcdata->classthree[3] = fread_number( fp );
save.c:            ch->pcdata->classthree[4] = fread_number( fp );
save.c:            ch->pcdata->classthree[5] = fread_number( fp );
save.c:            ch->pcdata->classthree[6] = fread_number( fp );
save.c:            ch->pcdata->classthree[7] = fread_number( fp );
save.c:            ch->pcdata->classthree[8] = fread_number( fp );
save.c:            ch->pcdata->classthree[9] = fread_number( fp );
save.c:            ch->pcdata->classthree[10] = fread_number( fp );
save.c:            ch->pcdata->classthree[11] = fread_number( fp );
save.c:            ch->pcdata->classthree[12] = fread_number( fp );
save.c:            ch->pcdata->classthree[13] = fread_number( fp );
save.c:            ch->pcdata->classthree[14] = fread_number( fp );
save.c:            ch->pcdata->classthree[15] = fread_number( fp );
save.c:            ch->pcdata->classthree[16] = fread_number( fp );
save.c:            ch->pcdata->classthree[17] = fread_number( fp );
save.c:            ch->pcdata->classthree[18] = fread_number( fp );
save.c:            ch->pcdata->classthree[19] = fread_number( fp );
save.c:            ch->pcdata->classfour[0] = fread_number( fp );
save.c:            ch->pcdata->classfour[1] = fread_number( fp );
save.c:            ch->pcdata->classfour[2] = fread_number( fp );
save.c:            ch->pcdata->classfour[3] = fread_number( fp );
save.c:            ch->pcdata->classfour[4] = fread_number( fp );
save.c:            ch->pcdata->classfour[5] = fread_number( fp );
save.c:            ch->pcdata->classfour[6] = fread_number( fp );
save.c:            ch->pcdata->classfour[7] = fread_number( fp );
save.c:            ch->pcdata->classfour[8] = fread_number( fp );
save.c:            ch->pcdata->classfour[9] = fread_number( fp );
save.c:            ch->pcdata->classfour[10] = fread_number( fp );
save.c:            ch->pcdata->classfour[11] = fread_number( fp );
save.c:            ch->pcdata->classfour[12] = fread_number( fp );
save.c:            ch->pcdata->classfour[13] = fread_number( fp );
save.c:            ch->pcdata->classfour[14] = fread_number( fp );
save.c:            ch->pcdata->classfour[15] = fread_number( fp );
save.c:            ch->pcdata->classfour[16] = fread_number( fp );
save.c:            ch->pcdata->classfour[17] = fread_number( fp );
save.c:            ch->pcdata->classfour[18] = fread_number( fp );
save.c:            ch->pcdata->classfour[19] = fread_number( fp );
save.c:	KEY("Clan",ch->clan,	fread_string(fp));
save.c:	    KEY( "Class",       ch->class,              fread_number( fp ) );
save.c:	KEY( "CurrentForm",  ch->cur_form,      fread_number( fp ) );
save.c:		ch->cmbt[0]     = fread_number( fp );
save.c:		ch->cmbt[1]     = fread_number( fp );
save.c:		ch->cmbt[2]     = fread_number( fp );
save.c:		ch->cmbt[3]     = fread_number( fp );
save.c:		ch->cmbt[4]     = fread_number( fp );
save.c:		ch->cmbt[5]     = fread_number( fp );
save.c:		ch->cmbt[6]     = fread_number( fp );
save.c:		ch->cmbt[7]     = fread_number( fp );
save.c:                ch->chi[0] = fread_number( fp );
save.c:                ch->chi[1] = fread_number( fp );
save.c:	    KEY( "Conception",  ch->pcdata->conception, fread_string( fp ) );
save.c:		ch->pcdata->condition[0] = fread_number( fp );
save.c:		ch->pcdata->condition[1] = fread_number( fp );
save.c:		ch->pcdata->condition[2] = fread_number( fp );
save.c:		ch->power[0] = fread_number(fp);
save.c:                ch->power[1] = fread_number(fp);
save.c:                ch->power[2] = fread_number(fp);
save.c:                ch->power[3] = fread_number(fp);
save.c:                ch->power[4] = fread_number(fp);
save.c:                ch->power[5] = fread_number(fp);
save.c:                ch->power[6] = fread_number(fp);
save.c:                ch->power[7] = fread_number(fp);
save.c:                ch->power[8] = fread_number(fp);
save.c:                ch->power[9] = fread_number(fp);
save.c:                ch->power[10] = fread_number(fp);
save.c:                ch->power[11] = fread_number(fp);
save.c:                ch->power[12] = fread_number(fp);
save.c:                ch->power[13] = fread_number(fp);
save.c:                ch->power[14] = fread_number(fp);
save.c:                ch->power[15] = fread_number(fp);
save.c:                ch->power[16] = fread_number(fp);
save.c:                ch->power[17] = fread_number(fp);
save.c:                ch->power[18] = fread_number(fp);
save.c:                ch->power[19] = fread_number(fp);
save.c:                ch->power[20] = fread_number(fp);
save.c:                ch->power[21] = fread_number(fp);
save.c:                ch->power[22] = fread_number(fp);
save.c:                ch->power[23] = fread_number(fp);
save.c:                ch->power[24] = fread_number(fp);
save.c:                ch->power[25] = fread_number(fp);
save.c:                ch->power[26] = fread_number(fp);
save.c:                ch->power[27] = fread_number(fp);
save.c:                ch->power[28] = fread_number(fp);
save.c:                ch->power[29] = fread_number(fp);
save.c:                ch->power[30] = fread_number(fp);
save.c:                ch->power[31] = fread_number(fp);
save.c:                ch->power[32] = fread_number(fp);
save.c:                ch->power[33] = fread_number(fp);
save.c:                ch->power[34] = fread_number(fp);
save.c:                ch->power[35] = fread_number(fp);
save.c:                ch->power[36] = fread_number(fp);
save.c:                ch->power[37] = fread_number(fp);
save.c:                ch->power[38] = fread_number(fp);
save.c:                ch->power[39] = fread_number(fp);
save.c:                ch->power[40] = fread_number(fp);
save.c:                ch->power[41] = fread_number(fp);
save.c:                ch->power[42] = fread_number(fp);
save.c:                ch->power[43] = fread_number(fp);
save.c:	    KEY( "Cparents",    ch->pcdata->cparents,   fread_string( fp ) );
save.c:	    KEY( "Cprompt",     ch->cprompt,            fread_string( fp ) );
save.c:	    KEY( "Createtime",  ch->createtime,         fread_string( fp ) );
save.c:	    KEY( "Damroll",     ch->damroll,            fread_number( fp ) );
save.c:	    KEY( "Deaf",        ch->deaf,               fread_number( fp ) );
save.c:            KEY( "Decapmessage", ch->pcdata->decapmessage,  fread_string( fp ));
save.c:	    KEY( "Description", ch->description,        fread_string( fp ) );
save.c:	    KEY( "DiscRese",    ch->pcdata->disc_research, fread_number( fp ) );
save.c:	    KEY( "DiscPoin",    ch->pcdata->disc_points, fread_number( fp ) );
save.c:	    KEY( "Exhaustion",  ch->pcdata->exhaustion, fread_number( fp ) );
save.c:	    KEY( "Exp",         ch->exp,                fread_number( fp ) );
save.c:	    KEY( "Explevel",    ch->explevel,           fread_number( fp ) );
save.c:	    KEY( "Expgained",   ch->expgained,          fread_number( fp ) );
save.c:	    KEY( "Extra",       ch->extra,              fread_number( fp ) );
save.c:		ch->pcdata->fake_skill  = fread_number( fp );
save.c:		ch->pcdata->fake_stance = fread_number( fp );
save.c:		ch->pcdata->fake_hit    = fread_number( fp );
save.c:		ch->pcdata->fake_dam    = fread_number( fp );
save.c:		ch->pcdata->fake_ac     = fread_number( fp );
save.c:		ch->pcdata->fake_hp     = fread_number( fp );
save.c:		ch->pcdata->fake_mana   = fread_number( fp );
save.c:		ch->pcdata->fake_move   = fread_number( fp );
save.c:                ch->focus[0] = fread_number( fp );
save.c:                ch->focus[1] = fread_number( fp );
save.c:	KEY( "Flag2",  ch->flag2, fread_number( fp ) );
save.c:	KEY( "Flag3",  ch->flag3, fread_number( fp ) );
save.c:	KEY( "Flag4",  ch->flag4, fread_number( fp ) );
save.c:	    KEY( "Form",        ch->form,               fread_number( fp ) );
save.c:	KEY( "Generation", ch->generation, fread_number( fp ) );
save.c:	KEY( "Gnosis", ch->gnosis[GMAXIMUM],	fread_number( fp ) );
save.c:		ch->pcdata->genes[0] = fread_number( fp );
save.c:		ch->pcdata->genes[1] = fread_number( fp );
save.c:		ch->pcdata->genes[2] = fread_number( fp );
save.c:		ch->pcdata->genes[3] = fread_number( fp );
save.c:		ch->pcdata->genes[4] = fread_number( fp );
save.c:		ch->pcdata->genes[5] = fread_number( fp );
save.c:		ch->pcdata->genes[6] = fread_number( fp );
save.c:		ch->pcdata->genes[7] = fread_number( fp );
save.c:		ch->pcdata->genes[8] = fread_number( fp );
save.c:		ch->pcdata->genes[9] = fread_number( fp );
save.c:        KEY( "Garou1",  ch->garou1,     fread_number( fp ) );
save.c:        KEY( "Garou2",  ch->garou2,     fread_number( fp ) );
save.c:	    ch->gifts[0]  = fread_number( fp );
save.c:	    ch->gifts[1]  = fread_number( fp );
save.c:	    ch->gifts[2]  = fread_number( fp );
save.c:	    ch->gifts[3]  = fread_number( fp );
save.c:	    ch->gifts[4]  = fread_number( fp );
save.c:	    ch->gifts[5]  = fread_number( fp );
save.c:	    ch->gifts[6]  = fread_number( fp );
save.c:	    ch->gifts[7]  = fread_number( fp );
save.c:	    ch->gifts[8]  = fread_number( fp );
save.c:	    ch->gifts[9]  = fread_number( fp );
save.c:	    ch->gifts[10] = fread_number( fp );
save.c:	    ch->gifts[11] = fread_number( fp );
save.c:	    ch->gifts[12] = fread_number( fp );
save.c:	    ch->gifts[13] = fread_number( fp );
save.c:	    ch->gifts[14] = fread_number( fp );
save.c:	    ch->gifts[15] = fread_number( fp );
save.c:	    ch->gifts[16] = fread_number( fp );
save.c:	    ch->gifts[17] = fread_number( fp );
save.c:	    ch->gifts[18] = fread_number( fp );
save.c:	    ch->gifts[19] = fread_number( fp );
save.c:	    ch->gifts[20] = fread_number( fp );
save.c:	    KEY( "Gold",        ch->gold,               fread_number( fp ) );
save.c:	    KEY( "Hitroll",     ch->hitroll,            fread_number( fp ) );
save.c:	    KEY( "Home",        ch->home,               fread_number( fp ) );
save.c:		ch->hit         = fread_number( fp );
save.c:		ch->max_hit     = fread_number( fp );
save.c:		ch->mana        = fread_number( fp );
save.c:		ch->max_mana    = fread_number( fp );
save.c:		ch->move        = fread_number( fp );
save.c:		ch->max_move    = fread_number( fp );
save.c:	    KEY( "Immune",        ch->immune,           fread_number( fp ) );
save.c:	    KEY( "Itemaffect",    ch->itemaffect,       fread_number( fp ) );
save.c:            KEY( "Jflags",        ch->pcdata->jflags,   fread_number( fp ) );
save.c:	KEY("Kingdom",	ch->pcdata->kingdom,	fread_number(fp));
save.c:        KEY("Kdecaptimer", ch->pcdata->kdecap_timer, fread_number(fp));
save.c:		ch->pcdata->language[0] = fread_number( fp );
save.c:		ch->pcdata->language[1] = fread_number( fp );
save.c:	    KEY( "Lasthost",    ch->lasthost,           fread_string( fp ) );
save.c:            KEY( "Lastdecap1",  ch->pcdata->last_decap[0],     fread_string( fp ) );
save.c:            KEY( "Lastdecap2",  ch->pcdata->last_decap[1],     fread_string( fp ) );
save.c:	    KEY( "Lasttime",    ch->lasttime,           fread_string( fp ) );
save.c:	    KEY( "Level",       ch->level,              fread_number( fp ) );
save.c:		ch->loc_hp[0]   = fread_number( fp );
save.c:		ch->loc_hp[1]   = fread_number( fp );
save.c:		ch->loc_hp[2]   = fread_number( fp );
save.c:		ch->loc_hp[3]   = fread_number( fp );
save.c:		ch->loc_hp[4]   = fread_number( fp );
save.c:		ch->loc_hp[5]   = fread_number( fp );
save.c:		ch->loc_hp[6]   = fread_number( fp );
save.c:            KEY( "Loginmessage", ch->pcdata->loginmessage,  fread_string( fp ) );
save.c:            KEY( "Logoutmessage", ch->pcdata->logoutmessage,  fread_string( fp ) );
save.c:	    KEY( "LongDescr",   ch->long_descr,         fread_string( fp ) );
save.c:	    KEY( "Lord",        ch->lord,               fread_string( fp ) );
save.c:            ch->monkab[0] = fread_number( fp );
save.c:            ch->monkab[1] = fread_number( fp );
save.c:            ch->monkab[2] = fread_number( fp );
save.c:            ch->monkab[3] = fread_number( fp );
save.c:        KEY( "Meanparadox",       ch->pcdata->mean_paradox_counter, fread_number( fp ) );
save.c:	KEY( "Monkstuff",       ch->monkstuff, fread_number( fp ) );
save.c:        KEY( "Monkcrap",        ch->monkcrap, fread_number( fp ) );
save.c:	    KEY( "Marriage",    ch->pcdata->marriage,   fread_string( fp ) );
save.c:	    KEY( "Morph",       ch->morph,              fread_string( fp ) );
save.c:	    KEY( "Newbits",     ch->newbits,    fread_number( fp ) );
save.c:	    KEY( "Objvnum",     ch->pcdata->obj_vnum,   fread_number( fp ) );
save.c:	    KEY( "ObjDesc",	ch->objdesc,		fread_string( fp ) );
save.c:		ch->paradox[0]  = fread_number( fp );
save.c:		ch->paradox[1]  = fread_number( fp );
save.c:		ch->paradox[2]  = fread_number( fp );
save.c:	    KEY( "Parents",     ch->pcdata->parents,    fread_string( fp ) );
save.c:	    KEY( "Password",    ch->pcdata->pwd,        fread_string( fp ) );
save.c:                ch->pcdata->phoenix[0] = fread_number(fp);
save.c:                ch->pcdata->phoenix[1] = fread_number(fp);
save.c:	    KEY( "Pkpoints",    ch->pcdata->pkpoints,   fread_number( fp ) );
save.c:	    //KEY( "Pkpoints",	ch->pcdata->pkpoints,   fread_number( fp ) );
save.c:	    KEY( "Played",      ch->played,             fread_number( fp ) );
save.c:	    KEY( "Polyaff",     ch->polyaff,            fread_number( fp ) );
save.c:			ch->pcdata->powers[sn] = fread_number( fp );
save.c:	    KEY( "Poweraction", ch->poweraction,        fread_string( fp ) );
save.c:	    KEY( "Powertype",   ch->powertype,          fread_string( fp ) );
save.c:	    KEY( "Position",    ch->position,           fread_number( fp ) );
save.c:	    KEY( "Practice",    ch->practice,           fread_number( fp ) );
save.c:		ch->pkill       = fread_number( fp );
save.c:		ch->pdeath      = fread_number( fp );
save.c:		ch->mkill       = fread_number( fp );
save.c:		ch->mdeath      = fread_number( fp );
save.c:	    KEY( "Prompt",      ch->prompt,             fread_string( fp ) );
save.c:	    KEY( "Quest",        ch->pcdata->quest,     fread_number( fp ) );
save.c:	    KEY( "Questsrun",	 ch->pcdata->questsrun, fread_number( fp ) );
save.c:	    KEY( "Queststotal",	 ch->pcdata->questtotal, fread_number( fp ) );
save.c:	    KEY( "Race",        ch->race,               fread_number( fp ) );
save.c:	KEY( "Rage",    ch->rage, fread_number( fp ) );
save.c:	    KEY( "Rank",        ch->pcdata->rank,       fread_number( fp ) );
save.c:            KEY( "Relrank",        ch->pcdata->relrank,       fread_number( fp ) );
save.c:            KEY( "Revision",       ch->pcdata->revision,      fread_number( fp ) );
save.c:            KEY( "Runecount",      ch->pcdata->rune_count,    fread_number( fp ) );
save.c:            KEY( "Rpalign",	   ch->pcdata->rpalign,	      fread_number( fp ) );
save.c:		ch->in_room = get_room_index( fread_number( fp ) );
save.c:		if ( ch->in_room == NULL )
save.c:		    ch->in_room = get_room_index( ROOM_VNUM_LIMBO );
save.c:		    ch->in_room = get_room_index( ROOM_VNUM_TEMPLE );
save.c:	    KEY( "SavingThrow", ch->saving_throw,       fread_number( fp ) );
save.c:	    KEY( "Switchname",  ch->pcdata->switchname, fread_string( fp ) );
save.c:	KEY( "SilTol", ch->siltol, fread_number( fp ) );
save.c:	KEY( "Souls",  ch->pcdata->souls, fread_number( fp ) );
save.c:		ch->pcdata->score[0] = fread_number( fp );
save.c:		ch->pcdata->score[1] = fread_number( fp );
save.c:		ch->pcdata->score[2] = fread_number( fp );
save.c:		ch->pcdata->score[3] = fread_number( fp );
save.c:		ch->pcdata->score[4] = fread_number( fp );
save.c:		ch->pcdata->score[5] = fread_number( fp );
save.c:	    KEY( "Sex",         ch->sex,                fread_number( fp ) );
save.c:	    KEY( "ShortDescr",  ch->short_descr,        fread_string( fp ) );
save.c:		KEY( "Security", ch->pcdata->security,  fread_number(fp));
save.c:		    ch->pcdata->learned[sn] = value;
save.c:	    KEY( "Specpower",   ch->specpower,  fread_number( fp ) );
save.c:	    KEY( "Spectype",    ch->spectype,   fread_number( fp ) );
save.c:	    KEY( "Special",     ch->special,    fread_number( fp ) );
save.c:		ch->spl[0]      = fread_number( fp );
save.c:		ch->spl[1]      = fread_number( fp );
save.c:		ch->spl[2]      = fread_number( fp );
save.c:		ch->spl[3]      = fread_number( fp );
save.c:		ch->spl[4]      = fread_number( fp );
save.c:		ch->pcdata->stage[0] = fread_number( fp );
save.c:		ch->pcdata->stage[1] = fread_number( fp );
save.c:		ch->pcdata->stage[2] = fread_number( fp );
save.c:		ch->stance[0]   = fread_number( fp );
save.c:		ch->stance[1]   = fread_number( fp );
save.c:		ch->stance[2]   = fread_number( fp );
save.c:		ch->stance[3]   = fread_number( fp );
save.c:		ch->stance[4]   = fread_number( fp );
save.c:		ch->stance[5]   = fread_number( fp );
save.c:		ch->stance[6]   = fread_number( fp );
save.c:		ch->stance[7]   = fread_number( fp );
save.c:		ch->stance[8]   = fread_number( fp );
save.c:		ch->stance[9]   = fread_number( fp );
save.c:		ch->stance[10]  = fread_number( fp );
save.c:		ch->stance[11]  = fread_number( fp );
save.c:               ch->stance[12] = fread_number(fp);
save.c:               ch->stance[13] = fread_number(fp);
save.c:               ch->stance[14] = fread_number(fp);
save.c:               ch->stance[15] = fread_number(fp);
save.c:               ch->stance[16] = fread_number(fp);
save.c:               ch->stance[17] = fread_number(fp);
save.c:               ch->stance[18] = fread_number(fp);
save.c:               ch->stance[19] = fread_number(fp);
save.c:               ch->stance[20] = fread_number(fp);
save.c:               ch->stance[21] = fread_number(fp);
save.c:               ch->stance[22] = fread_number(fp);
save.c:               ch->stance[23] = fread_number(fp);
save.c:		ch->pcdata->stat_ability[0] = fread_number( fp );
save.c:		ch->pcdata->stat_ability[1] = fread_number( fp );
save.c:		ch->pcdata->stat_ability[2] = fread_number( fp );
save.c:		ch->pcdata->stat_ability[3] = fread_number( fp );
save.c:		ch->pcdata->stat_amount[0] = fread_number( fp );
save.c:		ch->pcdata->stat_amount[1] = fread_number( fp );
save.c:		ch->pcdata->stat_amount[2] = fread_number( fp );
save.c:		ch->pcdata->stat_amount[3] = fread_number( fp );
save.c:		ch->pcdata->stat_duration[0] = fread_number( fp );
save.c:		ch->pcdata->stat_duration[1] = fread_number( fp );
save.c:		ch->pcdata->stat_duration[2] = fread_number( fp );
save.c:		ch->pcdata->stat_duration[3] = fread_number( fp );
save.c:			ch->pcdata->stats[sn] = fread_number( fp );
save.c:	    KEY( "Store",	ch->pcdata->store,	fread_number( fp ));
save.c:            KEY( "Tiemessage",  ch->pcdata->tiemessage,  fread_string( fp ));
save.c:	    KEY( "Trust",       ch->trust,              fread_number( fp ) );
save.c:		ch->pcdata->title = fread_string( fp );
save.c:		if ( isalpha(ch->pcdata->title[0])
save.c:		||   isdigit(ch->pcdata->title[0]) )
save.c:		    sprintf( buf, " %s", ch->pcdata->title );
save.c:		    free_string( ch->pcdata->title );
save.c:		    ch->pcdata->title = str_dup( buf );
save.c:            KEY( "Upgradelevel",	ch->pcdata->upgrade_level, fread_number( fp ) );
save.c:		ch->pIndexData = get_mob_index( fread_number( fp ) );
save.c:	    KEY( "Warps",        ch->warp,       fread_number( fp ) );
save.c:	    KEY( "WarpCount",   ch->warpcount,  fread_number( fp ) );
save.c:		ch->wpn[0]      = fread_number( fp );
save.c:		ch->wpn[1]      = fread_number( fp );
save.c:		ch->wpn[2]      = fread_number( fp );
save.c:		ch->wpn[3]      = fread_number( fp );
save.c:		ch->wpn[4]      = fread_number( fp );
save.c:		ch->wpn[5]      = fread_number( fp );
save.c:		ch->wpn[6]      = fread_number( fp );
save.c:		ch->wpn[7]      = fread_number( fp );
save.c:		ch->wpn[8]      = fread_number( fp );
save.c:		ch->wpn[9]      = fread_number( fp );
save.c:		ch->wpn[10]     = fread_number( fp );
save.c:		ch->wpn[11]     = fread_number( fp );
save.c:		ch->wpn[12]     = fread_number( fp );
save.c:                ch->wpn_lvl[0]      = fread_number( fp );
save.c:                ch->wpn_lvl[1]      = fread_number( fp );
save.c:                ch->wpn_lvl[2]      = fread_number( fp );
save.c:                ch->wpn_lvl[3]      = fread_number( fp );
save.c:                ch->wpn_lvl[4]      = fread_number( fp );
save.c:                ch->wpn_lvl[5]      = fread_number( fp );
save.c:                ch->wpn_lvl[6]      = fread_number( fp );
save.c:                ch->wpn_lvl[7]      = fread_number( fp );
save.c:                ch->wpn_lvl[8]      = fread_number( fp );
save.c:                ch->wpn_lvl[9]      = fread_number( fp );
save.c:                ch->wpn_lvl[10]     = fread_number( fp );
save.c:                ch->wpn_lvl[11]     = fread_number( fp );
save.c:                ch->wpn_lvl[12]     = fread_number( fp );
save.c:	    KEY( "Wimpy",       ch->wimpy,              fread_number( fp ) );
save.c:            KEY( "Wiznet",      ch->pcdata->wiznet,     fread_number( fp ) );
save.c:	KEY( "XHitroll", ch->xhitroll, fread_number( fp ) );
save.c:	KEY( "XDamroll", ch->xdamroll, fread_number( fp ) );
seth.c:			if(ch->pcdata->historytell[nIndex] == NULL)
seth.c:				ch->pcdata->historytell[nIndex - 1] = ch->pcdata->historytell[nIndex];
seth.c:			free_string(ch->pcdata->historytell[nEnd]);
seth.c://		sprintf(ch->pcdata->historytell[nEnd],"%s",line);
seth.c:			if(ch->pcdata->historychat[nIndex] == NULL)
seth.c:				ch->pcdata->historychat[nIndex - 1] = ch->pcdata->historychat[nIndex];
seth.c:			free_string(ch->pcdata->historychat[nEnd]);
seth.c://		sprintf(ch->pcdata->historychat[nEnd],"%s",line);
seth.c://			sprintf(ch->pcdata->historychat[nNum+1],"%s",str_dup(ch->pcdata->historychat[nNum]));
seth.c:			ch->pcdata->historychat[nNum+1] = str_dup(ch->pcdata->historychat[nNum]);
seth.c:		sprintf(ch->pcdata->historychat[0],"%s",str_dup(line));
seth.c://			sprintf(ch->pcdata->historytell[nNum+1],"%s",str_dup(ch->pcdata->historytell[nNum]));
seth.c:			ch->pcdata->historytell[nNum+1] = str_dup(ch->pcdata->historytell[nNum]);
seth.c:		sprintf(ch->pcdata->historytell[0],"%s",str_dup(line));
seth.c:			if ( ch->pcdata->historytell[nNum][0] != '\0' )
seth.c:				send_to_char(ch->pcdata->historytell[nNum],ch);
seth.c:			if ( ch->pcdata->historychat[nNum][0] != '\0' )
seth.c:				send_to_char(ch->pcdata->historychat[nNum],ch);
seth.c:			free_string(ch->pcdata->historychat[nNum]);
seth.c:			ch->pcdata->historychat[nNum] = NULL;
seth.c:			free_string(ch->pcdata->historytell[nNum]);
seth.c:			ch->pcdata->historytell[nNum] = NULL;
seth.c:    if ( ch->pcdata->pkpoints < 0 ) return stcf(ch,"Sorry you do not have enough pk-points to enter the store.\n\r");
seth.c:    stcf(ch,"#GYou currently have %d pk points and %d quest points to work with.#n\n\r",ch->pcdata->pkpoints,ch->pcdata->quest);
seth.c:    if ( ch->pcdata->pkpoints < pkstore_table.nItemPk[nNumber] ) 
seth.c:    if ( ch->pcdata->quest < pkstore_table.nItemQp[nNumber] ) 
seth.c:    if ( ch->pcdata->pkpoints < pkstore_table.nItemDe[nNumber] ) 
seth.c:	obj = create_object( pObjIndex, ch->level );
seth.c:	obj->questmaker = str_dup(ch->name);
seth.c:	obj->questowner = str_dup(ch->name);
seth.c:    ch->pcdata->pkpoints -= pkstore_table.nItemDe[nNumber];
seth.c:    ch->pcdata->quest -= pkstore_table.nItemQp[nNumber];
seth.c:    if ( str_cmp(ch->name,"Seth") && str_cmp(ch->name,"Silk") && str_cmp(ch->name,"Chrono") ) return stcf(ch, "You're not signed as a person who can legally edit any of the variables... Sorry.\n\r");
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:		temp = ch->pcdata->security;
seth.c:	        ch->pcdata->security = 6;
seth.c:	        ch->pcdata->security = temp;
seth.c:                temp = ch->pcdata->security;
seth.c:                ch->pcdata->security = 6;
seth.c:                ch->pcdata->security = temp;
seth.c:			ch->pcdata->quest += nBonus;
seth.c:			ch->pcdata->questtotal += nBonus/2;
seth.c:			ch->pcdata->store += nBonus;
seth.c:		nPerRound = ch->damcap[DAM_CAP]*number_attacks(ch,victim)*dReduction;
seth.c:	if (ch->pcdata->kingdom == 0)
seth.c:	if ( !str_cmp(kingdom_table[ch->pcdata->kingdom].general,ch->name) || !str_cmp(kingdom_table[ch->pcdata->kingdom].leader,ch->name))
seth.c:	sprintf(buf,"%s has defected.",ch->name);
seth.c:	ch->pcdata->kingdom = 0;
seth.c:	if (ch->pcdata->kingdom == 0)
seth.c:	if ( str_cmp(kingdom_table[ch->pcdata->kingdom].general,ch->name) && str_cmp(kingdom_table[ch->pcdata->kingdom].leader,ch->name))
seth.c:	if ( !str_cmp(kingdom_table[ch->pcdata->kingdom].general,ch->name) )
seth.c:		free_string(kingdom_table[ch->pcdata->kingdom].general);
seth.c:		kingdom_table[ch->pcdata->kingdom].general = str_dup("No One!");
seth.c:	else if( !str_cmp(kingdom_table[ch->pcdata->kingdom].leader,ch->name) )
seth.c:		free_string(kingdom_table[ch->pcdata->kingdom].leader);
seth.c:		kingdom_table[ch->pcdata->kingdom].leader = str_dup("No One!");
seth.c:	sprintf(buf,"%s has renounced their title..",ch->name);
seth.c:  in_room = ch->in_room;
seth.c:	make_note( "Immortal", ch->name, "imm", "Reason to why player didn't want to play", 5, sReason );
seth.c:	ch->level = 0;
seth.c:	int nChDamRound = ch->damcap[DAM_CAP]*number_attacks(ch,victim);
seth.c:	if ( IS_IMMORTAL(ch) || !str_cmp(ch->name,"Pithound"))
seth.c:	stcf(ch,"Victims HP: %d Damage Per Hit %d Damage Per Round %d Rounds %f.\n\r",nVictHp, ch->damcap[DAM_CAP], 
shapeshifter.c:  if (ch->pcdata->powers[BULL_LEVEL] < 5)
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_FORM] != BULL_FORM)
shapeshifter.c:  if (( victim = ch->fighting ) == NULL )
shapeshifter.c:  if (ch->pcdata->powers[FAERIE_LEVEL] < 4)
shapeshifter.c:  if (ch->mana < 1000 || ch->move < 500)
shapeshifter.c:    level = (10 - ch->generation) * 1000;
shapeshifter.c:  ch->mana -= 1000*(ch->generation);
shapeshifter.c:  ch->move -= 500*(ch->generation);
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_FORM] != HYDRA_FORM)
shapeshifter.c:  if (( victim = ch->fighting ) == NULL )
shapeshifter.c:  if (ch->pcdata->powers[HYDRA_LEVEL] > 0) (*skill_table[sn].spell_fun) (sn,level,ch,victim);
shapeshifter.c:  if (ch->pcdata->powers[HYDRA_LEVEL] > 1) (*skill_table[sn].spell_fun) (sn,level,ch,victim);
shapeshifter.c:  if (ch->pcdata->powers[HYDRA_LEVEL] > 3) (*skill_table[sn].spell_fun) (sn,level,ch,victim);
shapeshifter.c:  if (ch->pcdata->powers[HYDRA_LEVEL] > 4) (*skill_table[sn].spell_fun) (sn,level,ch,victim);
shapeshifter.c:  if ((ch->generation) == 0) (*skill_table[sn].spell_fun) (sn,level,ch,victim);
shapeshifter.c:  if (ch->pcdata->powers[TIGER_LEVEL] < 5)
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_FORM] != TIGER_FORM)
shapeshifter.c:  if (ch->pcdata->powers[PHASE_COUNTER] > 0)
shapeshifter.c:  ch->pcdata->powers[PHASE_COUNTER] = 10;
shapeshifter.c:  if ( ch->practice < 150 )
shapeshifter.c:   if (ch->pcdata->upgrade_level >= 1){
shapeshifter.c:  obj->questowner = str_dup(ch->pcdata->switchname);
shapeshifter.c:  ch->practice -= 150;
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_POWERS] < 2)
shapeshifter.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
shapeshifter.c:  if (ch->move < 250)
shapeshifter.c:  ch->move -= 250;
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_POWERS] < 3)
shapeshifter.c:  if (ch->fight_timer>0)
shapeshifter.c:  obj_to_room(obj,ch->in_room);
shapeshifter.c:  ch->pcdata->obj_vnum = 33175;
shapeshifter.c:  ch->pcdata->chobj = obj;
shapeshifter.c:  SET_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:  SET_BIT(ch->extra, EXTRA_OSWITCH);
shapeshifter.c:  free_string(ch->morph);
shapeshifter.c:  ch->morph = str_dup(obj->short_descr);
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_COUNTER] > 35)
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_FORM] != 0) do_shift(ch, "human");
shapeshifter.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH))
shapeshifter.c:    ch->pcdata->powers[SHAPE_FORM]=TIGER_FORM;
shapeshifter.c:    ch->pcdata->powers[SHAPE_COUNTER]+=10;
shapeshifter.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:    ch->damroll += (10 - ch->generation)*500;
shapeshifter.c:    ch->hitroll += (10 - ch->generation)*500;
shapeshifter.c:    ch->armor   -= (10 - ch->generation)*500;
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_COUNTER] < 15)
shapeshifter.c:      ch->hit += UMIN(5000,ch->max_hit*0.1);
shapeshifter.c:      if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
shapeshifter.c:    sprintf(buf,"%s the huge phase tiger",ch->name);
shapeshifter.c:    free_string(ch->morph);
shapeshifter.c:    ch->morph = str_dup(buf);
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_FORM] != 0) do_shift(ch, "human");
shapeshifter.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH))  
shapeshifter.c:    ch->pcdata->powers[SHAPE_FORM]=HYDRA_FORM;
shapeshifter.c:    ch->pcdata->powers[SHAPE_COUNTER]+=10;
shapeshifter.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:    ch->damroll += (10 - ch->generation)*500;
shapeshifter.c:    ch->hitroll += (10 - ch->generation)*500;
shapeshifter.c:    ch->armor   -= (10 - ch->generation)*250;
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_COUNTER] < 15)
shapeshifter.c:      ch->hit += UMIN(5000,ch->max_hit*0.1);
shapeshifter.c:      if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
shapeshifter.c:    sprintf(buf,"%s the horrific hydra",ch->name);
shapeshifter.c:    free_string(ch->morph);
shapeshifter.c:    ch->morph = str_dup(buf);
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_FORM] != 0) do_shift(ch, "human");
shapeshifter.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH))  
shapeshifter.c:    ch->pcdata->powers[SHAPE_FORM]=BULL_FORM;
shapeshifter.c:    ch->pcdata->powers[SHAPE_COUNTER]+=10;
shapeshifter.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:    ch->damroll += (10 - ch->generation)*750;
shapeshifter.c:    ch->hitroll += (10 - ch->generation)*750;
shapeshifter.c:    ch->armor   -= (10 - ch->generation)*100;
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_COUNTER] < 15)
shapeshifter.c:      ch->hit += UMIN(5000,ch->max_hit*0.1);
shapeshifter.c:      if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
shapeshifter.c:    sprintf(buf,"%s the black bull",ch->name);
shapeshifter.c:    free_string(ch->morph);
shapeshifter.c:    ch->morph = str_dup(buf);
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_FORM] != 0) do_shift(ch, "human");
shapeshifter.c:    if (IS_SET(ch->affected_by, AFF_POLYMORPH))  
shapeshifter.c:    ch->pcdata->powers[SHAPE_FORM]=FAERIE_FORM;
shapeshifter.c:    ch->pcdata->powers[SHAPE_COUNTER]+=10;
shapeshifter.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:    ch->damroll += (10 - ch->generation)*100;
shapeshifter.c:    ch->hitroll += (10 - ch->generation)*100;
shapeshifter.c:    ch->armor   -= (10 - ch->generation)*1000;
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_COUNTER] < 15)
shapeshifter.c:      ch->hit += UMIN(5000,ch->max_hit*0.1);
shapeshifter.c:      if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
shapeshifter.c:    sprintf(buf,"%s the small pixie",ch->name);
shapeshifter.c:    free_string(ch->morph);
shapeshifter.c:    ch->morph = str_dup(buf);
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_FORM] == 0 && !IS_SET(ch->affected_by, AFF_POLYMORPH))
shapeshifter.c:    if (IS_SET(ch->pcdata->powers[SHAPE_FORM], TIGER_FORM))
shapeshifter.c:      ch->damroll -= (10 - ch->generation)*500;
shapeshifter.c:      ch->hitroll -= (10 - ch->generation)*500;
shapeshifter.c:      ch->armor   += (10 - ch->generation)*500;
shapeshifter.c:    else if (IS_SET(ch->pcdata->powers[SHAPE_FORM], FAERIE_FORM))
shapeshifter.c:      ch->damroll -= (10 - ch->generation)*100;
shapeshifter.c:      ch->hitroll -= (10 - ch->generation)*100;
shapeshifter.c:      ch->armor   += (10 - ch->generation)*1000;
shapeshifter.c:    else if (IS_SET(ch->pcdata->powers[SHAPE_FORM], BULL_FORM))
shapeshifter.c:      ch->damroll -= (10 - ch->generation)*750;
shapeshifter.c:      ch->hitroll -= (10 - ch->generation)*750;
shapeshifter.c:      ch->armor   += (10 - ch->generation)*100;
shapeshifter.c:    else if (IS_SET(ch->pcdata->powers[SHAPE_FORM], HYDRA_FORM))
shapeshifter.c:      ch->damroll -= (10 - ch->generation)*500;
shapeshifter.c:      ch->hitroll -= (10 - ch->generation)*500;
shapeshifter.c:      ch->armor   += (10 - ch->generation)*250;
shapeshifter.c:    ch->pcdata->powers[SHAPE_FORM]=0;
shapeshifter.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:    free_string(ch->morph);
shapeshifter.c:    ch->morph=str_dup("");
shapeshifter.c:      ch->pcdata->powers[TIGER_LEVEL], ch->pcdata->powers[HYDRA_LEVEL],
shapeshifter.c:      ch->pcdata->powers[FAERIE_LEVEL], ch->pcdata->powers[BULL_LEVEL], ch->pcdata->powers[SHAPE_POWERS]);
shapeshifter.c:    if (ch->pcdata->powers[HYDRA_LEVEL] > 4)
shapeshifter.c:    if (ch->practice < (80*ch->pcdata->powers[HYDRA_LEVEL] + 80))
shapeshifter.c:    if (ch->pcdata->powers[HYDRA_LEVEL] == 0)
shapeshifter.c:    else if (ch->pcdata->powers[HYDRA_LEVEL] == 1)
shapeshifter.c:    else if (ch->pcdata->powers[HYDRA_LEVEL] == 2)
shapeshifter.c:    else if (ch->pcdata->powers[HYDRA_LEVEL] == 3)
shapeshifter.c:    else if (ch->pcdata->powers[HYDRA_LEVEL] == 4)
shapeshifter.c:    ch->pcdata->powers[HYDRA_LEVEL]++;
shapeshifter.c:    ch->practice -= ch->pcdata->powers[HYDRA_LEVEL]*80;
shapeshifter.c:    if (ch->pcdata->powers[TIGER_LEVEL] > 4)
shapeshifter.c:    if (ch->practice < (80*ch->pcdata->powers[TIGER_LEVEL] + 80))
shapeshifter.c:    if (ch->pcdata->powers[TIGER_LEVEL] == 0)
shapeshifter.c:    else if (ch->pcdata->powers[TIGER_LEVEL] == 1)
shapeshifter.c:    else if (ch->pcdata->powers[TIGER_LEVEL] == 2)
shapeshifter.c:    else if (ch->pcdata->powers[TIGER_LEVEL] == 3)
shapeshifter.c:    else if (ch->pcdata->powers[TIGER_LEVEL] == 4)
shapeshifter.c:    ch->pcdata->powers[TIGER_LEVEL]++;
shapeshifter.c:    ch->practice -= ch->pcdata->powers[TIGER_LEVEL]*80;
shapeshifter.c:    if (ch->pcdata->powers[FAERIE_LEVEL] > 4)
shapeshifter.c:    if (ch->practice < (80*ch->pcdata->powers[FAERIE_LEVEL] + 80))
shapeshifter.c:    if (ch->pcdata->powers[FAERIE_LEVEL] == 0)
shapeshifter.c:    else if (ch->pcdata->powers[FAERIE_LEVEL] == 1)
shapeshifter.c:    else if (ch->pcdata->powers[FAERIE_LEVEL] == 2)
shapeshifter.c:    else if (ch->pcdata->powers[FAERIE_LEVEL] == 3)
shapeshifter.c:    else if (ch->pcdata->powers[FAERIE_LEVEL] == 4)
shapeshifter.c:    ch->pcdata->powers[FAERIE_LEVEL]++;
shapeshifter.c:    ch->practice -= ch->pcdata->powers[FAERIE_LEVEL]*80;
shapeshifter.c:    if (ch->pcdata->powers[BULL_LEVEL] > 4)
shapeshifter.c:    if (ch->practice < (80*ch->pcdata->powers[BULL_LEVEL] + 80))
shapeshifter.c:    if (ch->pcdata->powers[BULL_LEVEL] == 0)
shapeshifter.c:    else if (ch->pcdata->powers[BULL_LEVEL] == 1)
shapeshifter.c:    else if (ch->pcdata->powers[BULL_LEVEL] == 2)
shapeshifter.c:    else if (ch->pcdata->powers[BULL_LEVEL] == 3)
shapeshifter.c:    else if (ch->pcdata->powers[BULL_LEVEL] == 4)
shapeshifter.c:    ch->pcdata->powers[BULL_LEVEL]++;
shapeshifter.c:    ch->practice -= ch->pcdata->powers[BULL_LEVEL]*80;
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_POWERS] > 4)
shapeshifter.c:    if (ch->practice < (80*ch->pcdata->powers[SHAPE_POWERS] + 80))
shapeshifter.c:    if (ch->pcdata->powers[SHAPE_POWERS] == 0)
shapeshifter.c:    else if (ch->pcdata->powers[SHAPE_POWERS] == 1)
shapeshifter.c:    else if (ch->pcdata->powers[SHAPE_POWERS] == 2)
shapeshifter.c:    else if (ch->pcdata->powers[SHAPE_POWERS] == 3)
shapeshifter.c:    else if (ch->pcdata->powers[SHAPE_POWERS] == 4)
shapeshifter.c:    ch->pcdata->powers[SHAPE_POWERS]++;
shapeshifter.c:    ch->practice -= ch->pcdata->powers[SHAPE_POWERS]*80;
shapeshifter.c:  if (ch->pcdata->powers[FAERIE_LEVEL] < 5)
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_FORM] != FAERIE_FORM)
shapeshifter.c:  if (ch->mana < 2500)
shapeshifter.c:  if ( ( victim = ch->fighting ) == NULL )
shapeshifter.c:  ch->mana -= 2500;
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_POWERS] < 1)
shapeshifter.c:    obj->questmaker = str_dup(ch->name);
shapeshifter.c:    obj->questmaker = str_dup(ch->name);
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_POWERS] < 4)
shapeshifter.c:  if (IS_SET(ch->affected_by, AFF_POLYMORPH))
shapeshifter.c:  sprintf(buf, "%s's form blurs and shifts to resemble %s.",  ch->name, argument);
shapeshifter.c:  SET_BIT(ch->affected_by, AFF_POLYMORPH);
shapeshifter.c:  free_string(ch->morph);
shapeshifter.c:  ch->morph = str_dup(argument);
shapeshifter.c:  if (ch->pcdata->powers[TIGER_LEVEL] < 3)
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_FORM] != TIGER_FORM)
shapeshifter.c:  if ( ch->fighting == NULL )
shapeshifter.c:  if ( (victim = ch->fighting) == NULL ) return;
shapeshifter.c:  if (ch->pcdata->powers[BULL_LEVEL] < 4)
shapeshifter.c:  if (ch->pcdata->powers[SHAPE_FORM] != BULL_FORM)
shapeshifter.c:  if (ch->move < 2000)
shapeshifter.c:  if ( ( victim = ch->fighting ) == NULL )
shapeshifter.c:  ch->move -= 2000;
shapeshifter.c:    ch->position = POS_STANDING;
sob.c:    obj_to_room(obj,ch->in_room);
sob.c:    obj_to_room(obj,ch->in_room);
special.c:  if ( ch->fighting != NULL )
special.c:  for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:	sprintf(buf,"%s has been decapitated by %s.",victim->pcdata->switchname,ch->long_descr);
special.c:    if ( ch->fighting != NULL )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room    */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room   */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room   */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room  */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room  */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room     */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room    */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room   */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:    (*skill_table[sn].spell_fun) ( sn, ch->level, ch, victim );
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    (*skill_table[sn].spell_fun) ( sn, ch->level, ch, NULL );
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:	spell_armor( skill_lookup( "armor" ), ch->level, ch, victim );
special.c:	spell_darkblessing( skill_lookup( "darkblessing" ), ch->level, ch, victim );
special.c:	    ch->level, ch, victim );
special.c:	    ch->level, ch, victim );
special.c:	    ch->level, ch, victim );
special.c:	spell_fly( skill_lookup( "fly" ), ch->level, ch, victim );
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:	if ( ch->level >= min_level )
special.c:    (*skill_table[sn].spell_fun) ( sn, ch->level, ch, victim );
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:    (*skill_table[sn].spell_fun) ( sn, ch->level, ch, victim );
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:	if ( ch->level >= min_level )
special.c:    (*skill_table[sn].spell_fun) ( sn, ch->level, ch, victim );
special.c:    if ( ch->position != POS_FIGHTING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:	if ( ch->level >= min_level )
special.c:    (*skill_table[sn].spell_fun) ( sn, ch->level, ch, victim );
special.c:    for ( corpse = ch->in_room->contents; corpse != NULL; corpse = c_next )
special.c:	    obj_to_room( obj, ch->in_room );
special.c:    if ( !IS_AWAKE(ch) || ch->fighting != NULL )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:    for ( trash = ch->in_room->contents; trash != NULL; trash = trash_next )
special.c:    if ( ch->fighting != NULL )
special.c:    if ( !move || ch->position < POS_SLEEPING )
special.c:	ch->position = POS_STANDING;
special.c:	ch->position = POS_SLEEPING;
special.c:    if ( ch->position != POS_FIGHTING
special.c:    || ( victim = ch->fighting ) == NULL
special.c:    ||	 number_percent( ) > 2 * ch->level )
special.c:    spell_poison( gsn_poison, ch->level, ch, victim );
special.c:    if ( ch->position != POS_STANDING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:	if ( IS_AWAKE(victim) && number_range( 0, ch->level ) == 0 )
special.c:	    ch->gold	 += 7 * gold / 8;
special.c:   if ( ch->position != POS_FIGHTING )
special.c:   victim=ch->fighting;
special.c:   pRoomIndex = get_room_index(ch->pIndexData->vnum);
special.c:	for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:   for ( object = ch->in_room->contents; object; object = object_next )
special.c:	 obj_to_room(obj,ch->in_room);
special.c:   if ( ch->max_move == 100 )
special.c:   ch->max_move = ch->max_move -1;
special.c:   if ( ch->max_move < 5 )
special.c:   else if (( ch->max_move < 35) && number_percent() > 95 )
special.c:   for ( object = ch->in_room->contents; object; object = object_next )
special.c:	 if (ch->max_move < 80) ch->max_move = ch->max_move + 20;
special.c:	 if (ch->max_move > 25 && number_percent() > 2)
special.c:	     if (ch->pIndexData->vnum == 30004)
special.c:		 if (ch->pIndexData->vnum == 30003)
special.c:	     obj_to_room(obj,ch->in_room);
special.c:		 ch->max_mana = ch->max_mana +50;
special.c:   if ( ch->fighting != NULL )
special.c:   if (((pexit = ch->in_room->exit[door]) == NULL) || (to_room = pexit->to_room) == NULL)
special.c:   if (((pexit = ch->in_room->exit[door]) == NULL) || (to_room = pexit->to_room) == NULL)
special.c:   if (!(((pexit = ch->in_room->exit[door]) == NULL) || (to_room = pexit->to_room) == NULL))
special.c:      if ( victim->in_room != ch->in_room
special.c:	 || ((victim->name == ch->name) && (ch->max_move > 30))
special.c:	 || ((victim->level > ch->level) && (ch->level < 12 ))
special.c:      if (victim->in_room == ch->in_room)
special.c:	 if (victim->name == ch->name)
special.c:if ( ch->position == POS_FIGHTING )
special.c:    for ( victim = ch->in_room->people; victim != NULL; victim = v_next )
special.c:for ( object = ch->in_room->contents; object; object = object_next )
special.c:		for ( obj2 = ch->carrying; obj2; obj2 = obj2->next_content )
special.c:if ( ch->position == POS_FIGHTING )
special.c:  for ( object = ch->in_room->contents; object; object = object_next )
special.c:		for ( obj2 = ch->carrying; obj2; obj2 = obj2->next_content )
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:   /*if (ch->in_room < 6645 && ch->in_room > 6657) break;*/
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:	   || victim->in_room == ch->in_room
special.c:	if (ch->in_room != victim->in_room)
special.c:	   char_to_room(victim, ch->in_room);
special.c:	act("$n shouts at you \"You shall DIE!\"",ch,ch->long_descr,victim,TO_VICT);
special.c:	  ch->position == POS_STANDING)
special.c:   if (ch->fighting) return FALSE;
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || victim->in_room->area != ch->in_room->area
special.c:/*	     || victim->in_room == ch->in_room  */
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:    if ( ch->position <= POS_SITTING )
special.c:    if ( (victim = ch->fighting) != NULL )
special.c:	    spell_dispel_magic( skill_lookup( "dispel magic" ), ch->level, ch, ch );
special.c:	    spell_cure_poison( skill_lookup( "cure poison" ), ch->level, ch, ch );
special.c:	    spell_cure_blindness( skill_lookup( "cure blindness" ), ch->level, ch, ch );
special.c:	    spell_remove_curse( skill_lookup( "remove curse" ), ch->level, ch, ch );
special.c:	    spell_sanctuary( skill_lookup( "sanctuary" ), ch->level, ch, ch );
special.c:	    spell_frenzy( skill_lookup( "frenzy" ), ch->level, ch, ch );
special.c:	    spell_darkblessing( skill_lookup( "darkblessing" ), ch->level, ch, ch );
special.c:	    spell_bless( skill_lookup( "bless" ), ch->level, ch, ch );
special.c:	    spell_stone_skin( skill_lookup( "stone skin" ), ch->level, ch, ch );
special.c:	    spell_armor( skill_lookup( "armor" ), ch->level, ch, ch );
special.c:	    spell_shield( skill_lookup( "shield" ), ch->level, ch, ch );
special.c:	    spell_faerie_fire( skill_lookup( "faerie fire" ), ch->level, ch, victim );
special.c:	    spell_blindness( skill_lookup( "blindness" ), ch->level, ch, victim );
special.c:	    spell_curse( skill_lookup( "curse" ), ch->level, ch, victim );
special.c:	else if (ch->loc_hp[6] > 0)
special.c:	    spell_clot( skill_lookup( "clot" ), ch->level, ch, ch );
special.c:	else if (ch->hit < (ch->max_hit * 0.5) && number_percent() < 75)
special.c:	    spell_heal( skill_lookup( "heal" ), ch->level, ch, ch );
special.c:	else if (ch->hit < (ch->max_hit * 0.25) && number_percent() < 50)
special.c:	    ch->spectype = ZOMBIE_REST;
special.c:	else if (ch->hit < (ch->max_hit * 0.1) && number_percent() < 25)
special.c:	    spell_teleport( skill_lookup( "teleport" ), ch->level, ch, ch );
special.c:	    ch->spectype = ZOMBIE_REST;
special.c:		    spell_dispel_magic( skill_lookup( "dispel magic" ), ch->level, ch, victim );
special.c:		    spell_harm( skill_lookup( "harm" ), ch->level, ch, victim );
special.c:	if ( (victim = ch->fighting) == NULL ) return TRUE;
special.c:    if (ch->spectype != ZOMBIE_TRACKING && ch->spectype != ZOMBIE_REST)
special.c:	    char_to_room(victim,ch->in_room);
special.c:	    victim->spec_fun = ch->spec_fun;
special.c:	    if (((pexit = ch->in_room->exit[door]) == NULL) || 
special.c:	    if (((pexit = ch->in_room->exit[option]) == NULL) || 
special.c:	    if (countup > 1 && option == ch->specpower) continue;
special.c:		case DIR_NORTH: ch->specpower = DIR_SOUTH; break;
special.c:		case DIR_SOUTH: ch->specpower = DIR_NORTH; break;
special.c:		case DIR_EAST:	ch->specpower = DIR_WEST;  break;
special.c:		case DIR_WEST:	ch->specpower = DIR_EAST;  break;
special.c:		case DIR_UP:	ch->specpower = DIR_DOWN;  break;
special.c:		case DIR_DOWN:	ch->specpower = DIR_UP;    break;
special.c:	    if ( victim->in_room != ch->in_room
special.c:	    if (victim->in_room == ch->in_room)
special.c:		if	(victim->hit > (ch->hit*1.5)) consider -= 1;
special.c:		else if ((victim->hit*1.5) < ch->hit) consider += 1;
special.c:    switch ( ch->spectype )
special.c:	ch->spectype = number_range(1, 3);
special.c:	    spell_dispel_magic( skill_lookup( "dispel magic" ), ch->level, ch, ch );
special.c:	    spell_cure_poison( skill_lookup( "cure poison" ), ch->level, ch, ch );
special.c:	    spell_cure_blindness( skill_lookup( "cure blindness" ), ch->level, ch, ch );
special.c:	    spell_remove_curse( skill_lookup( "remove curse" ), ch->level, ch, ch );
special.c:	    spell_sanctuary( skill_lookup( "sanctuary" ), ch->level, ch, ch );
special.c:	    spell_frenzy( skill_lookup( "frenzy" ), ch->level, ch, ch );
special.c:	    spell_darkblessing( skill_lookup( "darkblessing" ), ch->level, ch, ch );
special.c:	    spell_bless( skill_lookup( "bless" ), ch->level, ch, ch );
special.c:	    spell_stone_skin( skill_lookup( "stone skin" ), ch->level, ch, ch );
special.c:	    spell_armor( skill_lookup( "armor" ), ch->level, ch, ch );
special.c:	    spell_shield( skill_lookup( "shield" ), ch->level, ch, ch );
special.c:	else if (ch->loc_hp[6] > 0)
special.c:	    spell_clot( skill_lookup( "clot" ), ch->level, ch, ch );
special.c:	else if (ch->hit < ch->max_hit)
special.c:	    spell_heal( skill_lookup( "heal" ), ch->level, ch, ch );
special.c:	    spell_frenzy( skill_lookup( "frenzy" ), ch->level, ch, ch );
special.c:	    spell_darkblessing( skill_lookup( "darkblessing" ), ch->level, ch, ch );
special.c:	    spell_bless( skill_lookup( "bless" ), ch->level, ch, ch );
special.c:	    spell_stone_skin( skill_lookup( "stone skin" ), ch->level, ch, ch );
special.c:	    spell_armor( skill_lookup( "armor" ), ch->level, ch, ch );
special.c:	    spell_shield( skill_lookup( "shield" ), ch->level, ch, ch );
special.c:	else ch->spectype = 0;
special.c:	if (ch->hit < (ch->max_hit*0.25)) ch->spectype = ZOMBIE_REST;
special.c:	if (ch->hit >= ch->max_hit)
special.c:	{do_stand(ch,"");ch->spectype = 0;return TRUE;}
special.c:	    spell_remove_curse( skill_lookup( "remove curse" ), ch->level, ch, ch );
special.c:	if (ch->in_room->vnum != ROOM_VNUM_ALTAR) do_recall(ch,"");
special.c:	if (ch->in_room->vnum == ROOM_VNUM_TEMPLE) do_north(ch,"");
special.c:	if (ch->position == POS_STANDING) do_rest(ch,"");
special.c:	if (ch->hit < ch->max_hit)
special.c:	    spell_heal( skill_lookup( "heal" ), ch->level, ch, ch );
special.c:	    ch->hit = ch->max_hit;
special.c:    else if (ch->position < POS_STANDING)
special.c:	    if (ch->in_room->vnum == 29107 && number_range(1,4) <= 2)
special.c:	    else if (ch->in_room->vnum == 29107)
special.c:    if (ch->in_room == NULL) return TRUE;
special.c:    if (ch->in_room->vnum == 29104 && random <= 2)
special.c:    else if (ch->in_room->vnum == 29104 && random <= 2)
special.c:    else if (ch->in_room->vnum == 29113 && random <= 2)
special.c:    else if (ch->in_room->vnum == 29107 && random <= 2)
special.c:    else if ((ch->in_room->vnum == 29100 || ch->in_room->vnum == 29101 || 
special.c:	ch->in_room->vnum == 29117) && random <= 2)
special.c:	    if (((pexit = ch->in_room->exit[door]) == NULL) || 
special.c:	    if (((pexit = ch->in_room->exit[option]) == NULL) || 
special.c:	    if (countup > 1 && option == ch->specpower) continue;
special.c:		    vch_next	= vch->next;
special.c:		    if ( vch->in_room == NULL || IS_NPC(vch) )
special.c:		    if ( vch->in_room == ch->in_room )
special.c:		    if ( vch->in_room->area == ch->in_room->area )
special.c:		case DIR_NORTH: ch->specpower = DIR_SOUTH; break;
special.c:		case DIR_SOUTH: ch->specpower = DIR_NORTH; break;
special.c:		case DIR_EAST:	ch->specpower = DIR_WEST;  break;
special.c:		case DIR_WEST:	ch->specpower = DIR_EAST;  break;
special.c:		case DIR_UP:	ch->specpower = DIR_DOWN;  break;
special.c:		case DIR_DOWN:	ch->specpower = DIR_UP;    break;
special.c:    for ( obj = ch->in_room->contents; obj != NULL; obj = o_next )
special.c:  if(ch->fighting != NULL)
special.c:    victim = ch->fighting;
special.c:    hurt_person(ch, victim, (number_range(1,3) * ch->level));
special.c:  if(ch->fighting == NULL)
special.c:    if(IS_SET(ch->act, PLR_HOLYLIGHT))
special.c:      REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
special.c:	spell_sanctuary(sn, ch->level / 4, ch, ch);
special.c:	spell_fly(sn, ch->level / 4, ch, ch);
special.c:	spell_pass_door(sn, ch->level / 4, ch, ch);
special.c:	spell_protection(sn, ch->level / 4, ch, ch);
special.c:	spell_stone_skin(sn, ch->level / 4, ch, ch);
special.c:    spell_remove_curse(sn, ch->level / 4, ch, ch);
special.c:    spell_cure_blindness(sn, ch->level / 4, ch, ch);
special.c:    spell_cure_poison(sn, ch->level / 4, ch, ch);
special.c:  if(ch->fighting != NULL)
special.c:    if(!can_see(ch, ch->fighting))
special.c:      spell_faerie_fog(sn, ch->level / 4, ch, ch->fighting);
special.c:      SET_BIT(ch->act, PLR_HOLYLIGHT);
special.c:	  spell_earthquake(sn, ch->level / 4, ch, NULL);
special.c:	  if(is_affected(ch->fighting, sn))
special.c:	    spell_desanct(sn, ch->level / 4, ch, ch->fighting);
special.c:	    spell_desanct(sn, ch->level / 4, ch, ch->fighting);
special.c:	    spell_desanct(sn, ch->level / 4, ch, ch->fighting);
special.c:	  spell_curse(sn, ch->level / 4, ch, ch->fighting);
special.c:	  spell_web(sn, ch->level / 4, ch, ch->fighting);
special.c:	  spell_jailwater(sn, ch->level / 4, ch, ch->fighting);
special.c:	  spell_focused_manasplice(sn, ch->level / 100, ch, ch->fighting);
special.c:	  spell_manasplice(sn, ch->level / 100, ch, ch->fighting);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:	  multi_hit(ch, ch->fighting, sn);
special.c:   if (ch->fighting != NULL) 
special.c:      victim = ch->fighting;
special.c:       spell_faerie_fog(skill_lookup("faerie fog"), ch->level / 4, ch, ch->fighting);
special.c:     for(i = (ch->level / 1000) + 1; i > 0; i--)
special.c:   if (ch->in_room == NULL) return FALSE;
special.c:	   || (victim->in_room->area != ch->in_room->area)
special.c:	if (ch->in_room!=victim->in_room)
special.c:	  ch->position == POS_STANDING)
special.c:	  spell_faerie_fog(skill_lookup("faerie fog"), ch->level / 4, ch, ch->fighting);
special.c:  for(pVictim = ch->in_room->people; pVictim != NULL; pVictim = pVictim->next_in_room)
special.c:      spell_remove_curse(sn, ch->level / 4, ch, pVictim);
special.c:      spell_cure_blindness(sn, ch->level / 4, ch, pVictim);
special.c:      spell_cure_poison(sn, ch->level / 4, ch, pVictim);
special.c:      werewolf_regen(pVictim, ch->level / 4);
special.c:	spell_sanctuary(sn, ch->level / 4, ch, pVictim);
special.c:	spell_fly(sn, ch->level / 4, ch, pVictim);
special.c:	spell_pass_door(sn, ch->level / 4, ch, pVictim);
special.c:	spell_protection(sn, ch->level / 4, ch, pVictim);
special.c:	spell_stone_skin(sn, ch->level / 4, ch, pVictim);
special.c:	spell_armor(sn, ch->level / 4, ch, pVictim);
special.c:	spell_bless(sn, ch->level / 4, ch, pVictim);
special.c:	spell_darkblessing(sn, ch->level / 4, ch, pVictim);
special.c:  for(pVictim = ch->in_room->people; pVictim != NULL; pVictim = pVictimNext)
special.c:  for(pObj = ch->carrying; pObj != NULL; pObj = pObjNext)
special.c:  pVictim = ch->fighting;
special.c:    pVictim = RandomInRoom(ch->in_room, ch);
special.c:  ch->max_mana += 1;
special.c:  if((ch->max_mana % 5) == 0)
special.c:    char_to_room(create_mobile( pMobIndex ), ch->in_room);
special.c:  if(ch->max_mana >= 75)
spiderdroid.c:    UMIN(ch->pcdata->powers[CYBORG_FACE],6),
spiderdroid.c:    UMIN(ch->pcdata->powers[CYBORG_LIMBS],5),
spiderdroid.c:    UMIN(ch->pcdata->powers[CYBORG_BODY],6));
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_FACE] < 1)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_FACE] > 0)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_FACE] > 1)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_FACE] > 2)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_FACE] > 3)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_FACE] > 4)
spiderdroid.c:      if ((ch->pcdata->powers[CYBORG_FACE] == 6))
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_LIMBS] < 1)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 0)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 1)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 2)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 3)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_LIMBS] > 4)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] < 1)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] > 0)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] > 1)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] > 2)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] > 3)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] > 4)
spiderdroid.c:      if (ch->pcdata->powers[CYBORG_BODY] > 5)
spiderdroid.c:    UMIN(ch->pcdata->powers[CYBORG_FACE],6),   
spiderdroid.c:    UMIN(ch->pcdata->powers[CYBORG_LIMBS],5),
spiderdroid.c:    UMIN(ch->pcdata->powers[CYBORG_BODY],6));  
spiderdroid.c:      if ((ch->pcdata->powers[implant] == 1)) cost = 25000;
spiderdroid.c:      else if ((ch->pcdata->powers[implant] == 2)) cost = 50000;
spiderdroid.c:      else if ((ch->pcdata->powers[implant] == 3)) cost = 100000;
spiderdroid.c:      else if ((ch->pcdata->powers[implant] == 4)) cost = 200000;
spiderdroid.c:      else if ((ch->pcdata->powers[implant] == 5)) cost = 400000;
spiderdroid.c:      else if ((ch->pcdata->powers[implant] == 6)) cost = 800000;
spiderdroid.c:      if ((ch->pcdata->powers[implant] >= max ))
spiderdroid.c:        if ((ch->pcdata->powers[CYBORG_FACE] == 4 &&
spiderdroid.c:          ch->pcdata->powers[CYBORG_BODY] < 4))
spiderdroid.c:        if (ch->pcdata->powers[CYBORG_LIMBS] < 1)
spiderdroid.c:      if ( cost > ch->pcdata->stats[DROID_POWER] )
spiderdroid.c:      ch->pcdata->powers[implant] += 1;
spiderdroid.c:      ch->pcdata->stats[DROID_POWER] -= cost;
spiderdroid.c:    if (ch->pcdata->powers[CYBORG_BODY] < 5 || ch->pcdata->powers[CYBORG_LIMBS] < 5 )
spiderdroid.c:    if (ch->move < 1000)
spiderdroid.c:    if ( ( victim = ch->fighting ) == NULL )
spiderdroid.c:    ch->move -= 1000;
spiderdroid.c:  if (ch->pcdata->powers[CYBORG_BODY] < 5)
spiderdroid.c:  if ( IS_SET(ch->newbits, NEW_CUBEFORM))
spiderdroid.c:    REMOVE_BIT(ch->newbits, NEW_CUBEFORM);
spiderdroid.c:    REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
spiderdroid.c:        ch->damroll -= 5000;
spiderdroid.c:        ch->hitroll -= 5000;
spiderdroid.c:        ch->armor   += 5000;
spiderdroid.c:    free_string(ch->morph);
spiderdroid.c:    ch->morph=str_dup("");
spiderdroid.c:  if (ch->move < 2000 || ch->mana < 2000)
spiderdroid.c:    SET_BIT(ch->newbits, NEW_CUBEFORM);
spiderdroid.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
spiderdroid.c:    sprintf(buf,"%s the avatar of Lloth",ch->name);
spiderdroid.c:    free_string(ch->morph);
spiderdroid.c:    ch->morph = str_dup(buf);
spiderdroid.c:    ch->move -= 2000;
spiderdroid.c:    ch->mana -= 2000;
spiderdroid.c:    ch->damroll += 5000;
spiderdroid.c:    ch->hitroll += 5000;
spiderdroid.c:    ch->armor   -= 5000;
spiderdroid.c:  if (ch->pcdata->powers[CYBORG_FACE] < 1)
spiderdroid.c:  if (ch->pcdata->powers[CYBORG_FACE] > 2)
spiderdroid.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT))
spiderdroid.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
spiderdroid.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
spiderdroid.c:  else if (ch->pcdata->powers[CYBORG_FACE] == 2)
spiderdroid.c:    if (IS_SET(ch->affected_by, AFF_SHADOWSIGHT) && IS_SET(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT))
spiderdroid.c:      REMOVE_BIT(ch->affected_by, AFF_SHADOWSIGHT);
spiderdroid.c:      REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
spiderdroid.c:      SET_BIT(ch->affected_by, AFF_SHADOWSIGHT);
spiderdroid.c:      SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
spiderdroid.c:  else if ((ch->pcdata->powers[CYBORG_FACE] == 1))
spiderdroid.c:    if (IS_SET(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT))
spiderdroid.c:      REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
spiderdroid.c:      SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_NIGHTSIGHT);
spiderdroid.c:    if (ch->pcdata->upgrade_level >= 1){
spiderdroid.c:    if ( ch->practice < 150)
spiderdroid.c:    ch->practice   -= 150;
spiderdroid.c:    obj->questowner = str_dup(ch->pcdata->switchname);
string.c:    ch->desc->pString = pString;
string.c:    ch->desc->pString = pString;
string.c:            **ch->desc->pString = '\0';
string.c:            send_to_char( *ch->desc->pString, ch );
string.c:            *ch->desc->pString =
string.c:                string_replace( *ch->desc->pString, arg2, arg3 );
string.c:            *ch->desc->pString = format_string( *ch->desc->pString );
string.c:        ch->desc->pString = NULL;
string.c:        ch->desc->pString = NULL;
string.c:    strcpy( buf, *ch->desc->pString );
string.c:    free_string( *ch->desc->pString );
string.c:    *ch->desc->pString = str_dup( buf );
tanarri.c:  if ( ch->practice < 150 )
tanarri.c:   if (ch->pcdata->upgrade_level >= 1){
tanarri.c:  obj->questowner = str_dup(ch->pcdata->switchname);
tanarri.c:  ch->practice -= 150;
tanarri.c:  if (IS_CLASS(ch, CLASS_LICH) && ch->pcdata->powers[CHAOS_MAGIC] < 3)
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_EMNITY))
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_ENRAGE))
tanarri.c:    sprintf(buf,"[Enrage] %s enrages %s\n\r",ch->pcdata->switchname,victim->pcdata->switchname);
tanarri.c:  if (ch->alignment != -1000) ch->alignment = -1000;
tanarri.c:  if (ch->pcdata->rank == 0)
tanarri.c:  if (ch->pcdata->rank*3 <= ch->pcdata->powers[TANARRI_POWER_COUNTER])
tanarri.c:  for (i = 1; i < ch->pcdata->rank;i++)
tanarri.c:  if (ch->pcdata->stats[TPOINTS] < 10000 * cost)
tanarri.c:  if (ch->pcdata->rank == 1)
tanarri.c:    if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_TRUESIGHT))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_TRUESIGHT);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_CLAWS))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_CLAWS);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_EARTHQUAKE))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_EARTHQUAKE);
tanarri.c:  else if (ch->pcdata->rank == 2)
tanarri.c:    if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_EXOSKELETON))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_EXOSKELETON);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FANGS))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_FANGS);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_TORNADO))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_TORNADO);
tanarri.c:  if (ch->pcdata->rank == 3)
tanarri.c:    if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_SPEED);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_MIGHT))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_MIGHT);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_CHAOSGATE))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_CHAOSGATE);
tanarri.c:  if (ch->pcdata->rank == 4)
tanarri.c:    if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FIERY))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_FIERY);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FURY))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_FURY);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_HEAD);
tanarri.c:  if (ch->pcdata->rank == 5)
tanarri.c:    if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_BOOMING))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_BOOMING);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_ENRAGE))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_ENRAGE);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FLAMES))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_FLAMES);
tanarri.c:  if (ch->pcdata->rank == 6)
tanarri.c:    if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_TENDRILS))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_TENDRILS);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_LAVA))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_LAVA);
tanarri.c:    else if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_EMNITY))
tanarri.c:      SET_BIT(ch->pcdata->powers[TANARRI_POWER], TANARRI_EMNITY);
tanarri.c:  ch->pcdata->powers[TANARRI_POWER_COUNTER]++;
tanarri.c:  ch->pcdata->stats[TPOINTS] -= 10000 * cost;
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_LAVA))
tanarri.c:  if (ch->mana < 1000 || ch->move < 1000)
tanarri.c:  if ((victim = ch->fighting) == NULL)
tanarri.c:  ch->mana -= 1000;
tanarri.c:  ch->move -= 1000;
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_CHAOSGATE))
tanarri.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
tanarri.c:  if (ch->move < 1000)
tanarri.c:  ch->move -= 1000;
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_BOOMING))
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FURY))
tanarri.c:  if (ch->pcdata->powers[TANARRI_FURY_ON] == 1)
tanarri.c:    ch->hitroll -= 350;
tanarri.c:    ch->damroll -= 350;
tanarri.c:    ch->pcdata->powers[TANARRI_FURY_ON] = 0;
tanarri.c:    ch->damroll += 350;
tanarri.c:    ch->hitroll += 350;
tanarri.c:    ch->pcdata->powers[TANARRI_FURY_ON] = 1;
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_EARTHQUAKE))
tanarri.c:  if (ch->mana < 1000)
tanarri.c:  ich_next = ch->in_room->people;
tanarri.c:    ich_next = ich->next_in_room;
tanarri.c:  ch->mana -= 1000;
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_TORNADO))
tanarri.c:  if (ch->mana < 1500)
tanarri.c:  ich_next = ch->in_room->people;
tanarri.c:    ich_next = ich->next_in_room;
tanarri.c:  ch->mana -= 1500;
tanarri.c:  if (!IS_SET(ch->pcdata->powers[TANARRI_POWER], TANARRI_FLAMES) && IS_CLASS(ch, CLASS_TANARRI))
tanarri.c:  if (ch->pcdata->powers[CON_LORE] < 2 && IS_CLASS(ch, CLASS_LICH))
tanarri.c:  if (ch->mana < 2000)
tanarri.c:  ich_next = ch->in_room->people;
tanarri.c:    ich_next = ich->next_in_room;
tanarri.c:  ch->mana -= 2000;
undead_knight.c:  if (ch->move < 600)
undead_knight.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
undead_knight.c:  if (victim->in_room->vnum == ch->in_room->vnum)
undead_knight.c:  ch->move -= 600;
undead_knight.c:  if ( ch->practice < 150 )
undead_knight.c:  if (ch->pcdata->upgrade_level >= 1){
undead_knight.c:  obj->questowner = str_dup(ch->pcdata->switchname);
undead_knight.c:  ch->practice -=150;
undead_knight.c:  if (ch->mana < 500)
undead_knight.c:  if (ch->hit < ch->max_hit)
undead_knight.c:    ch->hit += number_range(500,1000);
undead_knight.c:  if (ch->hit > ch->max_hit) ch->hit=ch->max_hit;
undead_knight.c:  ch->mana -= 500;
undead_knight.c:    if (ch->pcdata->powers[NECROMANCY] < 6)
undead_knight.c:    if (IS_SET(ch->pcdata->powers[AURAS], BOG_AURA))
undead_knight.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], BOG_AURA);
undead_knight.c:      SET_BIT(ch->pcdata->powers[AURAS], BOG_AURA);
undead_knight.c:    if (ch->pcdata->powers[NECROMANCY] < 4)
undead_knight.c:    if (IS_SET(ch->pcdata->powers[AURAS], MIGHT_AURA))
undead_knight.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], MIGHT_AURA);
undead_knight.c:      ch->damroll -= 1000;
undead_knight.c:      ch->hitroll -= 1000;
undead_knight.c:      SET_BIT(ch->pcdata->powers[AURAS], MIGHT_AURA);
undead_knight.c:      ch->damroll += 1000;
undead_knight.c:      ch->hitroll += 1000;  
undead_knight.c:    if (ch->pcdata->powers[NECROMANCY] < 2) 
undead_knight.c:    if (IS_SET(ch->pcdata->powers[AURAS], DEATH_AURA))
undead_knight.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], DEATH_AURA);
undead_knight.c:      SET_BIT(ch->pcdata->powers[AURAS], DEATH_AURA);
undead_knight.c:    if (ch->pcdata->powers[NECROMANCY] < 9)
undead_knight.c:    if (IS_SET(ch->pcdata->powers[AURAS], FEAR_AURA))
undead_knight.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], FEAR_AURA);
undead_knight.c:      SET_BIT(ch->pcdata->powers[AURAS], FEAR_AURA);
undead_knight.c:      ch->pcdata->powers[NECROMANCY], ch->pcdata->powers[INVOCATION], ch->pcdata->powers[SPIRIT]);
undead_knight.c:    if (ch->pcdata->powers[NECROMANCY]>9)
undead_knight.c:    else if (ch->practice < ch->pcdata->powers[NECROMANCY] * 60 + 60)
undead_knight.c:      ch->practice -= ch->pcdata->powers[NECROMANCY] * 60 + 60;
undead_knight.c:      ch->pcdata->powers[NECROMANCY] += 1;
undead_knight.c:    if (ch->pcdata->powers[INVOCATION]>4)
undead_knight.c:    else if (ch->practice < ch->pcdata->powers[INVOCATION] * 60 + 60)
undead_knight.c:      ch->practice -= ch->pcdata->powers[INVOCATION] * 60 + 60;
undead_knight.c:      ch->pcdata->powers[INVOCATION] += 1;
undead_knight.c:    if (ch->pcdata->powers[UNDEAD_SPIRIT] > 9)
undead_knight.c:    if (ch->practice < ch->pcdata->powers[UNDEAD_SPIRIT] * 60 + 60)
undead_knight.c:      ch->practice -= ch->pcdata->powers[UNDEAD_SPIRIT] * 60 + 60;
undead_knight.c:      ch->pcdata->powers[UNDEAD_SPIRIT] += 1;
undead_knight.c:  if (ch->pcdata->powers[WEAPONSKILL] > 15)
undead_knight.c:  if (ch->practice < ch->pcdata->powers[WEAPONSKILL]*60 + 60)
undead_knight.c:    ch->practice -= ch->pcdata->powers[WEAPONSKILL]*60 + 60;
undead_knight.c:    ch->hit = 1;
undead_knight.c:    ch->mana = 1;
undead_knight.c:    ch->move = 1;
undead_knight.c:    ch->pcdata->powers[WEAPONSKILL] += 1;
undead_knight.c:  if (!str_cmp(arg,"stun") && ch->pcdata->powers[INVOCATION] > 4)
undead_knight.c:    if (!(arg2[0] == '\0') || ch->fighting != NULL)
undead_knight.c:      if (arg2[0] == '\0') victim = ch->fighting;
undead_knight.c:      if (ch->pcdata->powers[POWER_TICK] > 0)
undead_knight.c:      ch->pcdata->powers[POWER_TICK] = 5;
undead_knight.c:  else if (!str_cmp(arg,"blind") && ch->pcdata->powers[INVOCATION] > 0)
undead_knight.c:    if (!(arg2[0] == '\0') || ch->fighting != NULL)
undead_knight.c:      if (arg2[0] == '\0') victim = ch->fighting;
undead_knight.c:      if (ch->pcdata->powers[POWER_TICK] > 0)
undead_knight.c:      af.modifier  = -500*(ch->pcdata->upgrade_level);
undead_knight.c:      ch->pcdata->powers[POWER_TICK] = 3;
undead_knight.c:  else if (!str_cmp(arg,"kill") && ch->pcdata->powers[INVOCATION] > 2)
undead_knight.c:      if (ch->pcdata->powers[POWER_TICK] > 0)
undead_knight.c:        if (ch->fighting == NULL) set_fighting(ch, victim);
undead_knight.c:        ch->pcdata->powers[POWER_TICK] = 2;
undead_knight.c:      ch->level = 12;
undead_knight.c:      ch->level = 3;
undead_knight.c:      ch->pcdata->powers[POWER_TICK] = 2;
undead_knight.c:  else if (!str_cmp(arg,"flames") && ch->pcdata->powers[INVOCATION] > 3)
undead_knight.c:    if (ch->pcdata->powers[POWER_TICK] > 0)
undead_knight.c:    ich_next = ch->in_room->people;
undead_knight.c:      ich_next = ich->next_in_room;
undead_knight.c:    ch->pcdata->powers[POWER_TICK] = 2;
update.c:    if ( IS_NPC(ch) && (mount = ch->mount) != NULL && !IS_NPC(mount))
update.c:	if ( (master = ch->master) == NULL || master != mount )
update.c:	if ( (2000000000-ch->exp) < gain ){
update.c:	    nTemp = gain-(2000000000-ch->exp);
update.c:	    ch->exp = 2000000000;
update.c:	    ch->exp = nTemp;
update.c:    	    ch->exp += gain;
update.c:    condition				= ch->pcdata->condition[iCond];
update.c:			ch->pcdata->condition[iCond]	= URANGE( 0, condition + value, 48 );
update.c:	ch->pcdata->condition[iCond]	= URANGE( 0, condition + value, 25000/ch->generation+1 );
update.c:    if ( ch->pcdata->condition[iCond] == 0 )
update.c:	    else if (ch->hit > 0)
update.c:		ch->hit = ch->hit - number_range(2,5);
update.c:		if (number_percent() <= ch->beast && ch->beast > 0) vamp_rage(ch);
update.c:    else if ( ch->pcdata->condition[iCond] < 10 )
update.c:		if (number_range(1,1000) <= ch->beast && ch->beast > 0) vamp_rage(ch);
update.c:		if (number_percent() > (ch->pcdata->condition[COND_THIRST]+75)
update.c:    ch_next = ch->next;
update.c:    if (ch->level == 2 && ch->played/3600 > 30)
update.c://	ch->level = 3;
update.c:    if ((ch->in_room->vnum == 72018 || ch->in_room->vnum == 72019 || ch->in_room->vnum == 72022 || ch->in_room->vnum == 72023 ) && !IS_NPC(ch))
update.c:	ch->pcdata->quest -= 100;
update.c:    ch_next = ch->next;
update.c:    if (ch->level < 2 )
update.c:    ch_next = ch->next;
update.c:    if (IS_SET(ch->in_room->room_flags, ROOM_NODECAP) && ch->position != POS_FIGHTING && ch->trust < 7 && !IS_NPC(ch) )
update.c:    ch_next = ch->next;
update.c:    if ((ch->in_room != NULL) && (!(ch->fight_timer > 0)))
update.c:    if (IS_SET(ch->in_room->room_flags, ROOM_REGENERATIVE ) && !IS_NPC(ch) && ch->level < 7 )
update.c:	if ( ch->pcdata->quest < 0 )
update.c:		if ( ch->hit < ch->max_hit )
update.c:		    ch->hit += ch->hit/10;
update.c:		    ch->pcdata->quest -= 2;
update.c:        	if ( ch->move < ch->max_move )
update.c:        	    ch->move += ch->move/10;
update.c:        	    ch->pcdata->quest -= 2;
update.c:        	if ( ch->mana < ch->max_mana )
update.c:        	    ch->mana += ch->mana/10;
update.c:        	    ch->pcdata->quest -= 2;
update.c:		if ( (ch->hit >= ch->max_hit) && (ch->mana >= ch->max_mana) && (ch->move >= ch->max_move) )
update.c:		    ch->hit = ch->max_hit;
update.c:        	    ch->move = ch->max_move;
update.c:        	    ch->mana = ch->max_mana;
update.c:    ch_next = ch->next;
update.c:    if ((ch->in_room->vnum == 72018 || ch->in_room->vnum == 72019 || ch->in_room->vnum == 72022 || ch->in_room->vnum == 72023 ) && !IS_NPC(ch))
update.c:	if (ch->pcdata->quest < 10)
update.c:	    sprintf( buf, " %s didn't have the funds to fund his own botting. #R[#LLamer punt#R].\n\r",ch->name);
update.c:            ch->pcdata->quest -= 10;
update.c:	    if (ch->pcdata->quest < 10)
update.c:	        if (ch->pcdata->quest < 100)
update.c:    		    sprintf( buf, " You only have %d qps, only %d minutes more possible.\n\r",ch->pcdata->quest, ch->pcdata->quest/10);
update.c:    ch_next = ch->next;
update.c:    else if (!IS_NPC(ch) && ch->pcdata->obj_vnum != 0)
update.c:      SET_BIT(ch->extra, EXTRA_OSWITCH);
update.c:/*      if ((ch->desc == NULL) && (ch->position != POS_FIGHTING))
update.c:        sprintf(buf, "%s@%s is linkdead, attempting to kick.", ch->name, (ch->lasthost != NULL) ? ch->lasthost : "?");
update.c:        if (!IS_NPC(ch) && (get_age(ch)-17 >= 5 ) && (!IS_SET(ch->extra,EXTRA_PKABLE)))
update.c:        SET_BIT(ch->extra,EXTRA_PKABLE);
update.c:        sprintf(buf, "#R%s#n has reached 5 hours and is now #Rpkable#n.\n\r",ch->name);
update.c:	if (ch->desc == NULL)
update.c:	 if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))   //Optional line
update.c:	 ch->pcdata->ldarena++;
update.c:      if (ch->tick_timer[TIMER_ENTOMB] == 1)
update.c:      if ( ch->tick_timer[TIMER_AFK] == 1 && IS_EXTRA(ch,EXTRA_AFK)&& !IS_IMMORTAL(ch))
update.c:	ch->tick_timer[TIMER_NOAFK] = 10000;
update.c:      if ( ch->tick_timer[TIMER_NOAFK] == 1 )
update.c:        if (ch->tick_timer[i] > 0) ch->tick_timer[i] --;
update.c:      if ( ch->wpn_lvl[x] > 5 ) ch->wpn_lvl[x] = 5;
update.c:      if ( ch->wpn_lvl[x] < 0 ) ch->wpn_lvl[x] = 0;
update.c:      if ((ch->level < LEVEL_IMMORTAL || !ch->desc) && !is_obj && !IS_SET(ch->extra,EXTRA_AFK))
update.c:        if ((ch->desc == NULL || ch->desc->connected == CON_PLAYING) && ch->level >= 2 && ch->save_time < save_time )
update.c:          save_time = ch->save_time;
update.c:        if (++ch->timer >= 12)
update.c:          if (ch->was_in_room == NULL && ch->in_room != NULL)
update.c:            ch->was_in_room = ch->in_room;
update.c:            if ( ch->fighting != NULL ) stop_fighting( ch, TRUE );
update.c:        if (ch->timer > 20) ch_quit = ch;
update.c:    for ( paf = ch->affected; paf != NULL; paf = paf_next )
update.c:    if (ch->fighting == NULL && !IS_NPC(ch))
update.c:      if (IS_CLASS(ch, CLASS_WEREWOLF) && ch->gnosis[GMAXIMUM] > ch->gnosis[GCURRENT])
update.c:/*        if (ch->position <= POS_SLEEPING ) ch->gnosis[GCURRENT] += number_range(2,3);
update.c:        else if (ch->position <= POS_RESTING ) ch->gnosis[GCURRENT] += number_range(1,3);*/
update.c:        ch->gnosis[GCURRENT] += number_range(5,8);
update.c:        if (ch->gnosis[GCURRENT] > ch->gnosis[GMAXIMUM]) ch->gnosis[GCURRENT] = ch->gnosis[GMAXIMUM];
update.c:      if (IS_CLASS(ch, CLASS_VAMPIRE) && ch->beast > 0 && ch->pcdata->condition[COND_THIRST] <= 15)
update.c:      if (IS_CLASS(ch, CLASS_NINJA) && ch->pcdata->powers[NPOWER_CHIKYU] >= 6 && ch->pcdata->powers[HARA_KIRI] >= 0)
update.c:        if (ch->pcdata->powers[HARA_KIRI] == 1){
update.c:         ch->pcdata->powers[HARA_KIRI]--; }
update.c:        else if(ch->pcdata->powers[HARA_KIRI] == 0) send_to_char("#GYour #LHaraKiri #yis #Roff #CSO #PPUT #GIT #CON #PTHIS #RIS #yA #RCOLORFUL #LMESSAGE.\n\r", ch );
update.c:      if (!IS_SET(ch->newbits, NEW_CLOAK) && !is_obj && ((IS_CLASS(ch, CLASS_MONK)
update.c:        && ch->pcdata->powers[PMONK] > 10) || (IS_CLASS(ch,CLASS_UNDEAD_KNIGHT) && ch->pcdata->powers[NECROMANCY] > 9)))
update.c:        SET_BIT(ch->newbits, NEW_CLOAK);
update.c:    if ( ch->position == POS_MORTAL || ch->position == POS_STUNNED || ch->position == POS_INCAP )
update.c:    if ( ch->position > POS_STUNNED && !is_obj)
update.c:      if ( ch->hit  < ch->max_hit ) ch->hit = UMIN(ch->hit + number_range(5,10), ch->max_hit);
update.c:      if ( ch->mana < ch->max_mana) ch->mana = UMIN(ch->mana + number_range(5,10),ch->max_mana);
update.c:      if ( ch->move < ch->max_move) ch->move = UMIN(ch->move + number_range(5,10),ch->max_move);
update.c:    if (ch->in_room->vnum == 113028 && number_range(1,10)==2) send_to_char("A#s Brilliantly#s Colored#s Butterfly#n flutters by.\n\r",ch);
update.c:    if(!IS_NPC(ch) && ((ch->pcdata->phoenix[1]) > 0)) ch->pcdata->phoenix[1] -= 1;
update.c:    /*if (IS_SET(ch->newbits, NEW_JAWLOCK)||IS_SET(ch->pcdata->powers[AURAS], BOG_AURA)||IS_SET(ch->newbits,NEW_COIL))ch->move-=20000;
update.c:    if (IS_SET(ch->newbits, NEW_JAWLOCK)&& ch->move<0){
update.c:      ch->move=100;
update.c:      REMOVE_BIT(ch->newbits,NEW_JAWLOCK);
update.c:    if (IS_SET(ch->pcdata->powers[AURAS], BOG_AURA)&& ch->move<0){
update.c:      ch->move=100;
update.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], BOG_AURA);
update.c:    if (IS_SET(ch->newbits, NEW_COIL)&& ch->move<0)
update.c:    {ch->move=100;
update.c:      REMOVE_BIT(ch->newbits, NEW_COIL);
update.c:    else if ( ch->position <= POS_STUNNED && !is_obj)
update.c:      ch->hit = ch->hit + number_range(2,4);
update.c:      if (ch->position > POS_STUNNED)
update.c:    if ( ch->loc_hp[6] > 0 && !is_obj && ch->in_room != NULL )
update.c:      ch->hit = ch->hit - dam;
update.c:      if (ch->hit < 1) ch->hit = 1;
update.c:      ch->in_room->blood += dam;
update.c:      if (ch->in_room->blood > 1000) ch->in_room->blood = 1000;
update.c:      ch->hit = ch->hit - dam;
update.c:      if (ch->hit < 1) ch->hit = 1;
update.c:      ch->hit = ch->hit - dam;
update.c:      if (ch->hit < 1) ch->hit = 1;
update.c:      ch->hit = ch->hit - dam;
update.c:      if (ch->hit < 1) ch->hit = 1;
update.c:       (!IS_NPC(ch) && !IS_IMMUNE(ch,IMM_SUNLIGHT)) && ch->in_room != NULL &&
update.c:       (!ch->in_room->sector_type == SECT_INSIDE) && !is_obj &&
update.c:       (!room_is_dark(ch->in_room)) && (weather_info.sunlight != SUN_DARK))
update.c:        ch->hit = ch->hit - number_range(2,4);
update.c:        ch->hit = ch->hit - number_range(5,10);
update.c:      ch->hit = ch->hit - number_range(100, 2000);
update.c:      if (ch->hit < 1) ch->hit = 1;
update.c:        REMOVE_BIT(ch->affected_by, AFF_POISON);
update.c:    if ( ch->position == POS_INCAP && !is_obj)
update.c:      ch->hit += number_range(2,4);
update.c:      if (ch->position > POS_INCAP)
update.c:      if (ch->position > POS_STUNNED)
update.c:    else if (ch->position == POS_MORTAL && !is_obj)
update.c:      ch->hit = ch->hit + number_range(2,4);
update.c:      if (ch->position == POS_INCAP)
update.c:      ch_next = ch->next;
update.c:    ch_next = ch->next;
update.c:    if ( ch->in_room == NULL ) continue;
update.c:    if ( ch->hunting != NULL && ch->hunting != '\0' && strlen(ch->hunting) > 1 )
update.c:      if(ch->pcdata->kdecap_timer > 0)
update.c:        ch->pcdata->kdecap_timer--;
update.c:        if(ch->pcdata->kdecap_timer == 0)
update.c:/*      if(ch->pcdata->decap_timer > 0)
update.c:       ch->pcdata->decap_timer--;
update.c:      if (ch->level < 7 && IS_HERO(ch)) update_safe_powers(ch);
update.c:      if (IS_HERO(ch) && ch->hit > 0 && !IS_SET(ch->extra, EXTRA_AFK))
update.c:          if (ch->rage >0) update_vampire_regen(ch);
update.c:          if (ch->pcdata->powers[CYBORG_BODY] > 2) update_drider(ch);
update.c:          if (ch->pcdata->powers[LIFE_LORE] > 0) update_lich_regen(ch);
update.c:	  if (ch->pcdata->powers[WL_SKILLS] > 3) update_wizard_regen(ch);
update.c:          if (IS_SET(ch->warp, WARP_REGENERATE)) update_demon_regen(ch);
update.c:        if (ch->class == 0 && IS_ITEMAFF(ch, ITEMA_REGENERATE)) update_arti_regen(ch);
update.c:        ch->hit += number_range(1, 5);
update.c:        if (ch->hit > ch->max_hit) ch->hit = ch->max_hit;
update.c:        if (IS_ITEMAFF(ch, ITEMA_REGENERATE) && ch->hit > 0)
update.c:/*      if ( ch->wait > 0 )
update.c:	ch->wait--;
update.c:      if ( IS_SET(ch->act, ACT_WIMPY) && (ch->fighting != NULL) )
update.c:	if ((ch->hit < (ch->hit/20)) && (number_range(1,5) == 1) )
update.c:      if ( ch->spec_fun != 0 )
update.c:        if ( (*ch->spec_fun) ( ch ) ) continue;
update.c:      if ( ch->position != POS_STANDING ) {do_stand(ch, "");continue;}
update.c:      if ( IS_SET(ch->act, ACT_SCAVENGER) && ch->in_room->contents != NULL && number_bits( 2 ) == 0 )
update.c:        for ( obj = ch->in_room->contents; obj; obj = obj->next_content )
update.c:      if ( !IS_SET(ch->act, ACT_SENTINEL) && ( door = number_bits( 5 ) ) <= 5 && ( pexit = ch->in_room->exit[door] ) != NULL
update.c:          && ( ch->hunting == NULL || strlen(ch->hunting) < 2 ) && ( (!IS_SET(ch->act, ACT_STAY_AREA) && ch->level < 900)
update.c:          || pexit->to_room->area == ch->in_room->area ) )
update.c:      if ( ch->hit < ch->max_hit / 2 && ( door = number_bits( 3 ) ) <= 5 && ( pexit = ch->in_room->exit[door] ) != NULL
update.c:          && pexit->to_room != NULL && !IS_AFFECTED(ch, AFF_WEBBED) && ch->level < 900 && !IS_SET(pexit->exit_info, EX_CLOSED)
update.c:        rch  = rch->next_in_room )
update.c:		if (ch->fighting == NULL && !IS_SET(ch->newbits, NEW_NATURAL)
update.c:		 && ch->monkab[SPIRIT] >= 2 )
update.c:		  SET_BIT(ch->newbits, NEW_NATURAL);
update.c:                        REMOVE_BIT(ch->extra, EXTRA_ROT);
update.c:                if (ch->pcdata->followers > 0) ch->pcdata->followers=0;
update.c:                if (IS_SET(ch->in_room->room_flags, ROOM_SILENCE))
update.c:                REMOVE_BIT(ch->in_room->room_flags,ROOM_SILENCE);
update.c:                if (IS_SET(ch->in_room->room_flags,ROOM_FLAMING))
update.c:                REMOVE_BIT(ch->in_room->room_flags,ROOM_FLAMING);
update.c:		    if (ch->hit < ch->max_hit)
update.c:			{ ch->hit = ch->max_hit; char_up = TRUE; }
update.c:		    if (ch->mana < ch->max_mana)
update.c:			{ ch->mana = ch->max_mana; char_up = TRUE; }
update.c:		    if (ch->move < ch->max_move)
update.c:			{ ch->move = ch->max_move; char_up = TRUE; }
update.c:		    ch->position = POS_STANDING;
update.c:                    if (IS_SET(ch->newbits, NEW_TIDE))
update.c: 		     REMOVE_BIT(ch->newbits, NEW_TIDE);
update.c:		    if (IS_SET(ch->extra, EXTRA_BAAL))
update.c:                       ch->power[DISC_VAMP_POTE] -= 2;
update.c:                       ch->power[DISC_VAMP_CELE] -= 2;
update.c:                       ch->power[DISC_VAMP_FORT] -= 2;
update.c:                       REMOVE_BIT(ch->extra, EXTRA_BAAL);
update.c:                       ch->power[DISC_VAMP_CELE] -= 2;
update.c:                       REMOVE_BIT(ch->extra, EXTRA_FLASH);
update.c:	for ( ch = char_list; ch != NULL; ch = ch->next )
update.c:	    if ( !IS_NPC(ch) && ch->desc != NULL && ch->desc->connected == CON_PLAYING && ch->in_room != NULL && IS_AWAKE(ch) && IS_OUTSIDE(ch) )
update.c:	    for ( vch = (locate_obj(obj))->people; vch != NULL;vch=vch->next_in_room )
update.c:		if (vch->class == 0 || (!IS_NPC(vch) && vch->level < 3)) continue;
update.c:	    if ( IS_SET(vch->in_room->room_flags,ROOM_SAFE) )
update.c:      if ( IS_CLASS(ch, CLASS_MONK) && ch->fighting == NULL && ch->monkblock > 0)
update.c:	ch->monkblock--;
update.c:      if ( IS_NPC(ch) || ch->embracing == NULL )
update.c:	victim=ch->embracing;
update.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
update.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
update.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
update.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
update.c:    else bloodpool = (250 / ch->generation);
update.c:		if (victim->level > 75 * ch->spl[2] )
update.c:		ch->pcdata->condition[COND_THIRST] +=blpr;
update.c:		sprintf(buf, "%s shudders in ecstacy as he drinks blood from %s's neck.\n\r", ch->name,victim->short_descr);
update.c:		if ( ch->pcdata->condition[COND_THIRST] >= ((30000 / ch->generation)+bloodpool))
update.c:	 	  ch->pcdata->condition[COND_THIRST] = ((30000 / ch->generation)+bloodpool);
update.c:	if (ch->in_room != victim->in_room)
update.c:	if( ch->in_room->vnum == 3054 )
update.c:	ch->pcdata->condition[COND_THIRST] += number_range(30,40);
update.c:    sprintf(buf, "%s shudders in ecstacy as he drinks blood from %s's neck.\n\r", ch->name,victim->name);
update.c:	sprintf(buf, "You feel some of your life slip away as %s drinks from your neck.\n\r", ch->name);
update.c:	ch->pcdata->condition[COND_THIRST] += number_range(35,40);
update.c:	if (ch->pcdata->condition[COND_THIRST] > (3000/(ch->generation)+bloodpool))
update.c:	{ch->pcdata->condition[COND_THIRST]=((3000/ch->generation)+bloodpool);
update.c:	if( ch->hit > 0 && ch->pcdata->mortal > 0 ) ch->pcdata->mortal = 0;
update.c:		ch->pcdata->mortal += 1;		
update.c:		if( ch->pcdata->mortal > 10 )
update.c:			ch->hit = 100;
update.c:			ch->pcdata->mortal = 0;
update.c:                        ch->fight_timer = 0;
update.c:  if (ch->pcdata->safe_counter > 0) ch->pcdata->safe_counter--;
update.c:	if(IS_SET(ch->in_room->room_flags, ROOM_SAFE) && ch->level > 2 && ch->level < MAX_LEVEL -5 && ch->max_hit > 15000)
update.c:		if (!IS_SET(ch->extra,EXTRA_AFK)) ch->pcdata->sit_safe += number_range(5,10);
update.c:		if( ch->hit != ch->max_hit )
update.c:			ch->pcdata->sit_safe -= 5;
update.c:			if ( ch->pcdata->sit_safe < 0 ) ch->pcdata->sit_safe = 0;
update.c:		if((ch->pcdata->sit_safe > 125 || ch->fight_timer != 0) && !ragnarok && !IS_SET(ch->extra, EXTRA_AFK))
update.c:			ch->fight_timer += 10;
update.c:		if (ch->pcdata->sit_safe > 0) ch->pcdata->sit_safe -=10;
update.c:		else ch->pcdata->sit_safe = 0;
update.c:	if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:		ch->pcdata->condition[COND_DRUNK]--;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:	else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:		ch->pcdata->condition[COND_DRUNK]--;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:		ch->position = POS_SLEEPING;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:                ch->position = POS_SLEEPING;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:                ch->position = POS_STUNNED;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:	else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:        else if (ch->pcdata->condition[COND_DRUNK] > 5 && number_range(1,10) == 1)
update.c:                ch->pcdata->condition[COND_DRUNK]--;
update.c:	else if ( ch->pcdata->condition[COND_DRUNK] > 0 )
update.c:		ch->pcdata->condition[COND_DRUNK]--;
update.c:	if (ch->pcdata->stage[0] > 0 || ch->pcdata->stage[2] > 0)
update.c:		if (ch->pcdata->stage[1] > 0 && ch->pcdata->stage[2] >= 225)
update.c:			ch->pcdata->stage[2] += 1;
update.c:			if ( ( vch = ch->pcdata->partner ) != NULL &&
update.c:			!IS_NPC(vch) && vch->pcdata->partner == ch 
update.c:			&& ((vch->pcdata->stage[2] >= 200 && vch->sex == SEX_FEMALE) 
update.c:			|| (ch->pcdata->stage[2] >= 200 && ch->sex == SEX_FEMALE)))
update.c:				if (ch->in_room != vch->in_room)return ;
update.c:				if (vch->pcdata->stage[2] >= 225 
update.c:				&& ch->pcdata->stage[2] >= 225 
update.c:				&& vch->pcdata->stage[2] < 240 
update.c:				&& ch->pcdata->stage[2] < 240)
update.c:					ch->pcdata->stage[2] = 240;
update.c:					vch->pcdata->stage[2] = 240;
update.c:				if (ch->sex == SEX_MALE && vch->pcdata->stage[2] >= 240)
update.c:					if (vch->pcdata->stage[2] > ch->pcdata->stage[2])
update.c:						ch->pcdata->stage[2] = vch->pcdata->stage[2];
update.c:				else if (ch->sex == SEX_FEMALE && vch->pcdata->stage[2] >= 240)
update.c:					if (vch->pcdata->stage[2] > ch->pcdata->stage[2])
update.c:						ch->pcdata->stage[2] = vch->pcdata->stage[2];
update.c:			if (ch->pcdata->stage[2] >= 250)
update.c:				if ( ( vch = ch->pcdata->partner ) != NULL &&
update.c:					!IS_NPC(vch) && vch->pcdata->partner == ch &&
update.c:					ch->in_room == vch->in_room)
update.c:					vch->pcdata->stage[2] = 250;
update.c:					if (ch->sex == SEX_MALE)
update.c:					ch->pcdata->stage[0] = 0;
update.c:					ch->pcdata->stage[1] = 0;
update.c:					ch->pcdata->stage[2] = 0;
update.c:					vch->pcdata->stage[0] = 0;
update.c:					vch->pcdata->stage[1] = 0;
update.c:					vch->pcdata->stage[2] = 0;
update.c:						SET_BIT(ch->extra, EXTRA_EXP);
update.c:						ch->exp += 100000;
update.c:						SET_BIT(vch->extra, EXTRA_EXP);
update.c:						vch->exp += 100000;
update.c:			if (ch->pcdata->stage[0] > 0 && ch->pcdata->stage[2] < 1 &&
update.c:				ch->position != POS_RESTING) 
update.c:				if (ch->pcdata->stage[0] > 1)
update.c:					ch->pcdata->stage[0] -= 1;
update.c:					ch->pcdata->stage[0] = 0;
update.c:			else if (ch->pcdata->stage[2]>0 && ch->pcdata->stage[0] < 1)
update.c:				if (ch->pcdata->stage[2] > 10)
update.c:					ch->pcdata->stage[2] -= 10;
update.c:					ch->pcdata->stage[2] = 0;
update.c:				if (ch->sex == SEX_MALE && ch->pcdata->stage[2] == 0)
update.c:  if (ch->in_room != NULL && IS_SET(ch->in_room->room_flags, ROOM_ARENA) && ch->level < 7)
update.c:    if (IS_SET(ch->act, PLR_WIZINVIS)) cheating = TRUE;
update.c:    if (IS_SET(ch->act, AFF_HIDE)) cheating = TRUE;
update.c:    if (IS_SET(ch->newbits, NEW_DARKNESS)) cheating = TRUE;
update.c:      ch->hit = ch->hit/2; // Punish those bastards
update.c:      sprintf(buf, "%s is cheating in the arena!!!", ch->name);
update.c:  if (ch->position != POS_STANDING && ch->position != POS_STUNNED)
update.c:    if (ch->move >= cost) ch->move -=cost;
update.c:  if (IS_SET(ch->act, PLR_WIZINVIS))
update.c:    if (ch->move >= cost) ch->move -=cost;
update.c:      REMOVE_BIT(ch->act, PLR_WIZINVIS);
update.c:  if (IS_SET(ch->act, AFF_HIDE))
update.c:    if (ch->move >= cost) ch->move -= cost;
update.c:      REMOVE_BIT(ch->act, AFF_HIDE);
update.c:    if (IS_SET(ch->pcdata->powers[ANGEL_POWERS], ANGEL_EYE))
update.c:       if(ch->move < cost*2 || ch->mana < cost*2)
update.c:        REMOVE_BIT(ch->pcdata->powers[ANGEL_POWERS], ANGEL_EYE);
update.c://        ch->move -= cost*2;
update.c://        ch->mana -= cost*2;
update.c:  if (IS_SET(ch->newbits, NEW_DARKNESS))
update.c:    if (ch->mana >= cost) ch->mana -= cost;
update.c:      REMOVE_BIT(ch->newbits, NEW_DARKNESS);
update.c:      REMOVE_BIT(ch->in_room->room_flags, ROOM_TOTAL_DARKNESS);
update.c:    if (ch->mana >= cost) ch->mana -= cost;
update.c:      REMOVE_BIT(ch->affected_by, AFF_PEACE);
update.c:      REMOVE_BIT(ch->affected_by, AFF_PEACE);
update.c:    if (ch->mana >= cost) ch->mana -= cost;
update.c:      REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
update.c:      if ( IS_SET(ch->act,PLR_SUPERINVIS) )
update.c:	REMOVE_BIT(ch->act,PLR_SUPERINVIS);
update.c:    if (ch->mana >= cost) ch->mana -= cost;
update.c:      REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
update.c:  if (IS_SET(ch->newbits, NEW_VISION))
update.c:    if (number_percent() < 15 && IS_SET(ch->itemaffect, ITEMA_VISION))
update.c:      REMOVE_BIT(ch->itemaffect, ITEMA_VISION);
update.c:      REMOVE_BIT(ch->newbits, NEW_VISION);
update.c:  if ( ch->position == POS_FIGHTING && ch->rage > 0 && ch->rage < 25 && !IS_ITEMAFF(ch, ITEMA_RAGER))
update.c:    ch->rage += 1;
update.c:  else if (ch->rage > 0 && !IS_ITEMAFF(ch, ITEMA_RAGER))
update.c:    ch->rage -= 1;
update.c:  if (ch->rage == 0) return;
update.c:  if (( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move) && ch->rage >0)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93350 && ch->in_room->vnum <= 93359))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( IS_SET(ch->act,PLR_SUPERINVIS) )
update.c:    if ( ch->move <= 5000 )
update.c:      REMOVE_BIT(ch->act, PLR_SUPERINVIS);
update.c:      ch->move = 0;
update.c:      ch->move -= 5000;
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93300 && ch->in_room->vnum <= 93309))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->pcdata->powers[POWER_TICK] > 0) ch->pcdata->powers[POWER_TICK]--;
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93310 && ch->in_room->vnum <= 93319))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->pcdata->powers[PHASE_COUNTER] > 0) ch->pcdata->powers[PHASE_COUNTER]--;
update.c:  if (ch->pcdata->powers[SHAPE_COUNTER] > 0) ch->pcdata->powers[SHAPE_COUNTER]--;
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93330 && ch->in_room->vnum <= 93339))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93350 && ch->in_room->vnum <= 93359))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93360 && ch->in_room->vnum <= 93369))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->position == POS_MEDITATING && ch->mana < ch->max_mana)
update.c:    ch->mana += number_range(10000,20000);
update.c:    if (ch->mana > ch->max_mana)
update.c:      ch->mana = ch->max_mana;
update.c:  if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_FIRE) && number_range(1,20) == 4)
update.c:    REMOVE_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_FIRE);
update.c:  if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_IRON) && number_range(1,20) == 4)
update.c:    REMOVE_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_IRON);
update.c:  if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_CLAY) && number_range(1,20) == 4)
update.c:    REMOVE_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_CLAY);
update.c:  if (IS_SET(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_STONE) && number_range(1,20) == 4)
update.c:    REMOVE_BIT(ch->pcdata->powers[GOLEMS_SUMMON], HAS_SUMMONED_STONE);
update.c:  if (ch->pcdata->powers[ANGEL_LOVE] > 3)
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move )
update.c:  if (ch->pcdata->powers[ANGEL_PEACE_COUNTER] > 0) ch->pcdata->powers[ANGEL_PEACE_COUNTER]--;
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93340 && ch->in_room->vnum <= 93349))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move )
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93340 && ch->in_room->vnum <= 93349))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93410 && ch->in_room->vnum <= 93419))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:    if ((ch->chi[CURRENT] > 0) && (number_range( 1, (10 - ch->chi[CURRENT])) <= 3) && (ch->fighting == NULL))
update.c:      ch->chi[CURRENT] -= 1;
update.c:  if ( IS_SET(ch->act,PLR_SUPERINVIS) )
update.c:    if ( ch->move <= 5000 )
update.c:      REMOVE_BIT(ch->act, PLR_SUPERINVIS);
update.c:      ch->move = 0;
update.c:      ch->move -= 5000;
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move )
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93460 && ch->in_room->vnum <= 93469))  
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->position == POS_FIGHTING && ch->rage > 0 && ch->rage < 25 && !IS_ITEMAFF(ch, ITEMA_RAGER))
update.c:    ch->rage += 1;
update.c:  else if (ch->rage > 0 && !IS_ITEMAFF(ch, ITEMA_RAGER))
update.c:    ch->rage -= 1;
update.c:  if (ch->rage < 1) return;
update.c:  if (ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:    if (ch->position == POS_MEDITATING) werewolf_regen(ch,3);
update.c:  if ( IS_SET(ch->act,PLR_SUPERINVIS) )
update.c:    if ( ch->move <= 5000 )
update.c:      REMOVE_BIT(ch->act, PLR_SUPERINVIS);
update.c:      ch->move = 0;
update.c:      ch->move -= 5000;
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93430 && ch->in_room->vnum <= 93439))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:    if (ch->position == POS_FIGHTING)
update.c:      if (ch->rage < 200) ch->rage += number_range(5,10);
update.c:      if (ch->rage < 200 && ch->pcdata->powers[DISC_WERE_WOLF] > 3)	ch->rage += number_range(5,10);
update.c:      if (!IS_SET(ch->special, SPC_WOLFMAN) && ch->rage >= 100)	do_werewolf(ch,"");
update.c:    else if (ch->rage > 0)
update.c:      ch->rage -= 1;
update.c:      if (ch->rage < 100) do_unwerewolf(ch,"");
update.c:  if (ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( IS_SET(ch->act,PLR_SUPERINVIS) )
update.c:    if ( ch->move <= 5000 )
update.c:      REMOVE_BIT(ch->act, PLR_SUPERINVIS);
update.c:      ch->move = 0;
update.c:      ch->move -= 5000;
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93420 && ch->in_room->vnum <= 93426))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move )
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 3054 && ch->in_room->vnum <= 3002))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move )
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 3054 && ch->in_room->vnum <= 3054))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 3054 && ch->in_room->vnum <= 3054))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->pcdata->classthree[KAHN_TICK] > 0) ch->pcdata->classthree[KAHN_TICK]--;
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 3054 && ch->in_room->vnum <= 3054))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93440 && ch->in_room->vnum <= 93446))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93320 && ch->in_room->vnum <= 93326))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:    int wpn = (ch->wpn[1]/3);
update.c:    if ( ch->hit < ch->max_hit)
update.c:      ch->hit += wpn;
update.c:      if (ch->hit > ch->max_hit)
update.c:        ch->hit = ch->max_hit;
update.c:    if ( ch->mana < ch->max_mana)
update.c:      ch->mana += wpn;
update.c:      if (ch->mana > ch->max_mana)
update.c:        ch->mana = ch->max_mana;
update.c:    if ( ch->move < ch->max_move)
update.c:      ch->move += wpn;
update.c:      if (ch->move > ch->max_move)
update.c:        ch->move = ch->max_move;
update.c:  if (ch->fighting == NULL && ch->pcdata->powers[SAMURAI_FOCUS] > 0)
update.c:    ch->pcdata->powers[SAMURAI_FOCUS]--;
update.c:  if (ch->fighting == NULL && ch->pcdata->powers[SAMURAI_LAST] > 0)
update.c:    ch->pcdata->powers[SAMURAI_LAST] = 0;
update.c:  if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move )
update.c:  if ( ch->in_room != NULL && ( ch->in_room->vnum >= 93400 && ch->in_room->vnum <= 93406))
update.c:    if ( ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->position == POS_MEDITATING && ch->mana < ch->max_mana)
update.c:    ch->mana += number_range(1000,2000);
update.c:    if (ch->mana > ch->max_mana)
update.c:      ch->mana = ch->max_mana;
update.c:  if (ch->hit < ch->max_hit || ch->mana < ch->max_mana || ch->move < ch->max_move)
update.c:  if (ch->loc_hp[6] > 0)
update.c:    (*skill_table[sn].spell_fun) (sn,ch->level,ch,ch);
update.c:  else if ((ch->loc_hp[0] + ch->loc_hp[1] + ch->loc_hp[2] + ch->loc_hp[3] + ch->loc_hp[4] + ch->loc_hp[5]) != 0)
update.c:  else if (IS_CLASS(ch, CLASS_WEREWOLF) && (ch->position == POS_SLEEPING || ch->position == POS_FIGHTING))
update.c:    if (ch->position == POS_SLEEPING && ch->power[DISC_WERE_BEAR] > 3)
update.c:    else if (ch->position == POS_FIGHTING && ch->power[DISC_WERE_BEAR] > 3)
update.c:  else if (ch->position == POS_SLEEPING)
update.c:  ch->hit = UMIN (ch->hit+(hit_gain*multiplier), ch->max_hit);
update.c:  ch->mana = UMIN (ch->mana+(mana_gain*multiplier), ch->max_mana);
update.c:  ch->move = UMIN (ch->move+(move_gain*multiplier), ch->max_move);
update.c:  if ( ch->hit >= ch->max_hit && ch->mana >= ch->max_mana && ch->move >= ch->max_move )
upgrade.c:/*  if (ch->pcdata->upgrade_level >= 9)
upgrade.c:  qp_needed = (ch->pcdata->upgrade_level+1) * 15000;
upgrade.c:  hit_needed = hit_needed + ch->pcdata->upgrade_level * 10000;
upgrade.c:  mana_needed = mana_needed + ch->pcdata->upgrade_level * 10000;
upgrade.c:  move_needed = move_needed + ch->pcdata->upgrade_level * 10000;
upgrade.c:  pkscore_needed = ch->pcdata->upgrade_level * 4;
upgrade.c:  if (ch->max_hit < hit_needed)
upgrade.c:    sprintf(buf,"You need %d more hitpoints.\n\r", hit_needed - ch->max_hit);
upgrade.c:  if (ch->max_mana < mana_needed)
upgrade.c:    sprintf(buf,"You need %d more manapoints.\n\r", mana_needed - ch->max_mana);
upgrade.c:  if (ch->max_move < move_needed)
upgrade.c:    sprintf(buf,"You need %d more movepoints.\n\r", move_needed - ch->max_move);
upgrade.c:  if (ch->pcdata->quest < qp_needed)
upgrade.c:    sprintf(buf,"You need %d more qps.\n\r", qp_needed - ch->pcdata->quest);
upgrade.c:  if ((ch->race) < pkscore_needed)
upgrade.c:    if (ch->stance[i] == -1)
upgrade.c:  ch->pcdata->upgrade_level++;
upgrade.c:  ch->pcdata->quest -= qp_needed;
upgrade.c://  ch->max_hit  = 5000;
upgrade.c:  ch->hit      = 5000;
upgrade.c://  ch->max_move = 5000;
upgrade.c:  ch->move     = 5000;
upgrade.c://  ch->max_mana = 5000;
upgrade.c:  ch->mana     = 5000;
upgrade.c:  ch->exp      = 100000000;
upgrade.c:  if (IS_CLASS(ch, CLASS_UNDEAD_KNIGHT)) sprintf(buf,"The torments and horrors of undead life has made %s even more powerful",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_LICH)) sprintf(buf,"Through studies of ancient and forbidden texts %s has grown more powerful",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_SAMURAI)) sprintf(buf,"Through hard work and countless battles, %s's skills with weapons have grown beyond that of any mortal",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_DROID)) sprintf(buf,"Becoming truly one with Lloth, %s choses to let the queen take more control",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_SHAPESHIFTER)) sprintf(buf,"The Malaugrym grins in truimph as %s uncovers the ancient powers of Malaug",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_ANGEL)) sprintf(buf,"The sky shakes with thunder as %s is proclaimed the messanger of God",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_WRAITH)) sprintf(buf,"The apparition of %s becomes even more solid as he gains his power in death",ch->name);
upgrade.c:  else if (IS_CLASS(ch, CLASS_TANARRI)) sprintf(buf,"Through hardwon battles in the famous Blood Wars, %s has gained skills beyond this world",ch->name);
upgrade.c://  else if (IS_CLASS(ch, CLASS_WEREWOLF)) sprintbuf(buf,"Wolves howl in moot as the mighty deeds of %s gain him recognition and rank",ch->name);
upgrade.c:  else sprintf(buf,"%s has upgraded\n\r", ch->name);
upgrade.c:  if ((ch->in_room == NULL || ch->in_room->vnum != 3054))
upgrade.c:  if (ch->max_hit < hit_needed)
upgrade.c:    sprintf(buf,"You need %d more hitpoints.\n\r", hit_needed - ch->max_hit);
upgrade.c:  if (ch->max_mana < mana_needed)
upgrade.c:    sprintf(buf,"You need %d more manapoints.\n\r", mana_needed - ch->max_mana);
upgrade.c:  if (ch->max_move < move_needed)
upgrade.c:    sprintf(buf,"You need %d more movepoints.\n\r", move_needed - ch->max_move);
upgrade.c:  if (ch->pcdata->quest < qp_needed)
upgrade.c:    sprintf(buf,"You need %d more qps.\n\r", qp_needed - ch->pcdata->quest);
upgrade.c:  if (ch->generation != 1)
upgrade.c:  sprintf(buf,"%s has started his quest to be a knight!\n\r",ch->name);
upgrade.c:  ch->pcdata->quest -= qp_needed;
upgrade.c:  ch->pcdata->upgrade_level++;
upgrade.c:  if((ch->in_room == NULL || ch->in_room->vnum != 3054))
upgrade.c:  if(ch->pcdata->quest < 5000)
upgrade.c:  if (ch->class == CLASS_TANARRI || ch->class == CLASS_DROID || ch->class == CLASS_SAMURAI || ch->class == CLASS_UNDEAD_KNIGHT || ch->class == 
upgrade.c:CLASS_ANGEL || ch->class == CLASS_SHAPESHIFTER || ch->class == CLASS_LICH )
upgrade.c:  if(ch->exp < 100000000)
upgrade.c:  if (ch->class == CLASS_DEMON) {ch->class = CLASS_TANARRI; sprintf(buf,"%s is reborn as a Tanar'ri", ch->name);}
upgrade.c:  else if (ch->class == CLASS_DROW) {ch->class = CLASS_DROID; sprintf(buf,"%s makes the ultimate sacrifice to Lloth", ch->name);}
upgrade.c:  else if (ch->class == CLASS_NINJA) {ch->class = CLASS_SAMURAI; sprintf(buf,"%s have become a true master of weapons", ch->name);}
upgrade.c:  else if (ch->class == CLASS_VAMPIRE) {ch->class = CLASS_UNDEAD_KNIGHT; sprintf(buf,"%s has chosen the darker path", ch->name);}
upgrade.c:  else if (ch->class == CLASS_MONK) {ch->class = CLASS_ANGEL; sprintf(buf,"%s becomes one with God", ch->name);}
upgrade.c:  else if (ch->class == CLASS_WEREWOLF) {ch->class = CLASS_SHAPESHIFTER; sprintf(buf,"%s reverts to the true form of the Malaugrym",ch->name);}
upgrade.c:  else if (ch->class == CLASS_MAGE) {ch->class = CLASS_LICH; sprintf(buf,"%s have sacrificed life for power", ch->name);}
upgrade.c:  ch->exp -= 100000000;
upgrade.c:  ch->pcdata->quest -= 5000;
upgrade.c:  ch->pcdata->jflags                  = 0;
upgrade.c:  ch->extra                           = 0;
upgrade.c:  ch->exp			      = 0;
upgrade.c:  ch->practice                        = 0;
upgrade.c:  ch->special                         = 0;
upgrade.c:  ch->newbits                         = 0;
upgrade.c:  ch->max_hit			      = 5000;
upgrade.c:  ch->max_mana                        = 5000;
upgrade.c:  ch->max_move                        = 5000;
upgrade.c:  ch->hit                             = 5000;
upgrade.c:  ch->mana                            = 5000;
upgrade.c:  ch->move                            = 5000;
upgrade.c:  ch->generation		      = 5;
upgrade.c:  ch->pcdata->familiar                = NULL;
upgrade.c:  ch->pcdata->chobj                   = NULL;
upgrade.c:  ch->pcdata->memorised               = NULL;
upgrade.c:  ch->pcdata->disc_research           = -1;
upgrade.c:  ch->pcdata->relrank		      = 0;
upgrade.c:  ch->lord                            = str_dup( "" );
upgrade.c:  ch->morph                           = str_dup( "" );
upgrade.c:  ch->pload                           = str_dup( "" );
upgrade.c:  ch->poweraction                     = str_dup( "" );
upgrade.c:  ch->powertype                       = str_dup( "" );
upgrade.c:  ch->hunting                         = str_dup( "" );
upgrade.c:  ch->pcdata->followers               = 0; 
upgrade.c:  ch->spectype                        = 0;
upgrade.c:  ch->specpower                       = 0;
upgrade.c:  ch->mounted                         = 0;
upgrade.c:  ch->home                            = 3001;
upgrade.c:  ch->vampgen_a                       = 0;
upgrade.c:  ch->paradox[0]                      = 0;    /* Total paradox */
upgrade.c:  ch->paradox[1]                      = 0;    /* Current Paradox */
upgrade.c:  ch->paradox[2]                      = 0;    /* Paradox Ticker */
upgrade.c:  ch->damcap[0]                       = 1000;
upgrade.c:  ch->damcap[1]                       = 0;
upgrade.c:  ch->vampaff_a                       = 0;
upgrade.c:  ch->itemaffect                      = 0;
upgrade.c:  ch->polyaff                         = 0;
upgrade.c:  ch->immune                          = 0; 
upgrade.c:  ch->form                            = 1048575;
upgrade.c:  ch->beast                           = 15;
upgrade.c:         ch->loc_hp[sn]               = 0;   
upgrade.c:         ch->wpn[sn]                  = 0;
upgrade.c:         ch->spl[sn]                  = 4;
upgrade.c:         ch->cmbt[sn]                 = 0;
upgrade.c:         ch->cmbt[sn]                 = 0;
upgrade.c:  ch->pcdata->followers               = 0;   
upgrade.c:  ch->pcdata->perm_str                = 1;
upgrade.c:  ch->pcdata->perm_int                = 1;
upgrade.c:  ch->pcdata->perm_wis                = 1;
upgrade.c:  ch->pcdata->perm_dex                = 1;
upgrade.c:  ch->pcdata->perm_con                = 1;
upgrade.c:  ch->pcdata->wolf                    = 0;
upgrade.c:  ch->pcdata->rank                    = 0;
upgrade.c:  ch->pcdata->language[0]             = 0;
upgrade.c:  ch->pcdata->language[1]             = 0; 
upgrade.c:  ch->pcdata->stage[0]                = 0;
upgrade.c:  ch->pcdata->stage[1]                = 0; 
upgrade.c:  ch->pcdata->stage[2]                = 0;
upgrade.c:  ch->pcdata->wolfform[0]             = 1;   
upgrade.c:  ch->pcdata->wolfform[1]             = 1; 
upgrade.c:  ch->pcdata->score[0]                = 0; 
upgrade.c:  ch->pcdata->score[1]                = 0; 
upgrade.c:  ch->pcdata->score[2]                = 0; 
upgrade.c:  ch->pcdata->score[3]                = 0; 
upgrade.c:  ch->pcdata->score[4]                = 0;
upgrade.c:  ch->pcdata->score[5]                = 0;
upgrade.c:         ch->pcdata->disc_a[sn]       = 0;
upgrade.c:         ch->pcdata->genes[sn]        = 0;
upgrade.c:        ch->pcdata->powers[sn]        = 0;   
upgrade.c:        ch->pcdata->stats[sn]         = 0; 
upgrade.c:        ch->stance[sn]		      = 0;
upgrade.c:        ch->stance[sn]                = -1;
upgrade.c:        ch->power[sn]                 = -2;
upgrade.c:  ch->pcdata->fake_skill              = 0;
upgrade.c:  ch->pcdata->fake_stance             = 0;
upgrade.c:  ch->pcdata->fake_hit                = 0;
upgrade.c:  ch->pcdata->fake_dam                = 0;
upgrade.c:  ch->pcdata->fake_ac                 = 0;
upgrade.c:  ch->pcdata->fake_hp                 = 0;
upgrade.c:  ch->pcdata->fake_mana               = 0;
upgrade.c:  ch->pcdata->fake_move               = 0;
upgrade.c:  ch->pcdata->obj_vnum                = 0;   
upgrade.c:  ch->pcdata->condition[COND_THIRST]  = 48;
upgrade.c:  ch->pcdata->condition[COND_FULL]    = 48;
upgrade.c:  ch->pcdata->stat_ability[STAT_STR]  = 0; 
upgrade.c:  ch->pcdata->stat_ability[STAT_END]  = 0;
upgrade.c:  ch->pcdata->stat_ability[STAT_REF]  = 0;
upgrade.c:  ch->pcdata->stat_ability[STAT_FLE]  = 0;
upgrade.c:  ch->pcdata->stat_amount[STAT_STR]   = 0;
upgrade.c:  ch->pcdata->stat_amount[STAT_END]   = 0;
upgrade.c:  ch->pcdata->stat_amount[STAT_REF]   = 0;
upgrade.c:  ch->pcdata->stat_amount[STAT_FLE]   = 0;
upgrade.c:  ch->pcdata->stat_duration[STAT_STR] = 0;
upgrade.c:  ch->pcdata->stat_duration[STAT_END] = 0;
upgrade.c:  ch->pcdata->stat_duration[STAT_REF] = 0;
upgrade.c:  ch->pcdata->stat_duration[STAT_FLE] = 0;
upgrade.c:  ch->pcdata->exhaustion              = 0;   
upgrade.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT)) REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
upgrade.c:    int pk = ch->race;
upgrade.c:    if ( ch->pcdata->upgrade_level == 0 ) return FALSE;
upgrade.c:    if ( ch->pcdata->upgrade_level > 9 ) return FALSE;
upgrade.c:    if ( pks[ch->pcdata->upgrade_level] == 0 ) return FALSE;
upgrade.c:    if ( pk < pks[ch->pcdata->upgrade_level] )
upgrade.c:	ch->pcdata->quest += qps[ch->pcdata->upgrade_level] * 1000;
upgrade.c:	ch->pcdata->upgrade_level--;
upgrade.c:	sprintf(buf,"#R%s#G has been downgraded!#n",ch->name);
upgrade.c:      if ((ch->pcdata->perm_str) > (ch->pcdata->upgrade_level * 25) + 25)
upgrade.c:        ch->pcdata->perm_str = (ch->pcdata->upgrade_level * 25) + 25;
upgrade.c:        sprintf(buf,"#R%s#G has lost strength!#n",ch->name);
upgrade.c:      if ((ch->pcdata->perm_dex) > (ch->pcdata->upgrade_level * 25) + 25)
upgrade.c:        ch->pcdata->perm_dex = (ch->pcdata->upgrade_level * 25) + 25;
upgrade.c:        sprintf(buf,"#R%s#G has lost dexterity!#n",ch->name);
upgrade.c:      if ((ch->pcdata->perm_con) > (ch->pcdata->upgrade_level * 25) + 25)
upgrade.c:        ch->pcdata->perm_con = (ch->pcdata->upgrade_level * 25) + 25;
upgrade.c:        sprintf(buf,"#R%s#G has lost constitution!#n",ch->name);
upgrade.c:      if ((ch->pcdata->perm_wis) > (ch->pcdata->upgrade_level * 25) + 25)
upgrade.c:        ch->pcdata->perm_wis = (ch->pcdata->upgrade_level * 25) + 25;
upgrade.c:        sprintf(buf,"#R%s#G has lost wisdom!#n",ch->name);
upgrade.c:      if ((ch->pcdata->perm_int) > (ch->pcdata->upgrade_level * 25) + 25)
upgrade.c:        ch->pcdata->perm_int = (ch->pcdata->upgrade_level * 25) + 25;
upgrade.c:        sprintf(buf,"#R%s#G has lost intelligence!#n",ch->name);
vamp.c:    if ( ch->practice < 60 )
vamp.c:       if (ch->pcdata->upgrade_level >= 1){
vamp.c:    ch->practice -= 60;
vamp.c:    obj->questowner = str_dup(ch->pcdata->switchname);
vamp.c:    if ( ch->power[DISC_VAMP_NECR] < 2 )
vamp.c:    if ( ch->power[DISC_VAMP_NECR] < 4 )
vamp.c:    if ( !IS_SET(ch->flag2, AFF_SPIRITGUARD) )
vamp.c:      SET_BIT(ch->flag2, AFF_SPIRITGUARD);
vamp.c:      REMOVE_BIT(ch->flag2, AFF_SPIRITGUARD);
vamp.c:    if ( ch->power[DISC_VAMP_NECR] < 3 )
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 66 )
vamp.c:    if ( obj->in_room->vnum == ch->in_room->vnum )
vamp.c:    ch->pcdata->condition[COND_THIRST] -= 65;
vamp.c:  int hps = ch->max_hit / 4;
vamp.c:if (!IS_CLASS (ch, CLASS_VAMPIRE) || ch->power[DISC_VAMP_OBEA] < 7)
vamp.c:if (ch->fight_timer>0)
vamp.c:if (ch->beast > 0)
vamp.c:if (ch->rage > 0)
vamp.c:if (ch->move < 5000)
vamp.c:WAIT_STATE(ch,30-ch->power[DISC_VAMP_OBEA]);
vamp.c:ch->move -= 5000;
vamp.c:ch->hit += hps;
vamp.c:if (ch->hit > ch->max_hit)
vamp.c:ch->hit = ch->max_hit;
vamp.c:   if ( ch->power[DISC_VAMP_MELP] < 1 )
vamp.c:   if ( IS_SET(ch->in_room->room_flags, ROOM_SAFE) )
vamp.c:   if ( ch->pcdata->condition[COND_THIRST] < 50 )
vamp.c:        vch_next        = vch->next;
vamp.c:        if ( vch->in_room == NULL )
vamp.c:        if ( !IS_NPC(vch) && vch->pcdata->chobj != NULL )
vamp.c:        if ( vch->in_room == ch->in_room )
vamp.c:            if ( ( mount = ch->mount ) != NULL )
vamp.c:              if ( number_range( 1, (12 - ch->power[DISC_VAMP_MELP])) == 2 )
vamp.c:                vch->position = POS_STUNNED;
vamp.c:    if ( arg[0] == '\0' && ch->embracing==NULL)
vamp.c:if (ch->embracing != NULL)
vamp.c:    if ((victim=ch->embracing) != NULL)
vamp.c:    if ((victim = get_char_room( ch, arg)) == NULL && ch->embracing==NULL)
vamp.c:    "%s leaps toward %s baring his fangs.",ch->name,victim->name);
vamp.c:    ,ch->name,victim->name);
vamp.c:    "%s sinks their teeth into your throat.\n\r",ch->name);
vamp.c:    ch->embracing=victim;
vamp.c:if (ch->power[DISC_VAMP_OBFU] < 5)
vamp.c:    if ( ch->power[DISC_VAMP_DAIM] < 2 )
vamp.c:    if ( ch->fighting == NULL )
vamp.c:      if ( ch->power[DISC_VAMP_DAIM] < 5 )
vamp.c:  if (ch->power[DISC_VAMP_DAIM] < 5)
vamp.c:        obj->questmaker = str_dup(ch->name);
vamp.c:        obj->questmaker = str_dup(ch->name);
vamp.c:if (ch->power[DISC_VAMP_OBFU] < 4)
vamp.c:obj->questmaker = str_dup(ch->name);
vamp.c:  if (ch->power[DISC_VAMP_QUIE] < 7)
vamp.c:  sprintf(arg, "%s grinds away at %s until it is razor sharp!", ch->name,obj->short_descr);
vamp.c:   if (ch->power[DISC_VAMP_THAU] < 8)
vamp.c:    "%s leaps toward %s baring his fangs.",ch->name,victim->name);
vamp.c:    ,ch->name,victim->name);
vamp.c:    ch->pcdata->condition[COND_THIRST] += number_range(100,200);
vamp.c:    if (ch->pcdata->condition[COND_THIRST] >= 1000 /
vamp.c:ch->generation)
vamp.c:    ch->pcdata->condition[COND_THIRST] = 1000/ch->generation;
vamp.c:if (ch->power[DISC_VAMP_NECR] < 5)
vamp.c:    ch->power[DISC_VAMP_THAU] < 6)
vamp.c:if (ch->pcdata->condition[COND_THIRST] < 20)
vamp.c:ch->pcdata->condition[COND_THIRST] -= number_range(18,22);
vamp.c:if (IS_SET(ch->in_room->room_flags, ROOM_SAFE))
vamp.c:level = ch->power[DISC_VAMP_THAU]*1200;;
vamp.c:inroom= ch->in_room;
vamp.c:if (ch->power[DISC_VAMP_QUIE] < 6)
vamp.c:if (ch->pcdata->condition[COND_THIRST] < 300)
vamp.c:ch->pcdata->condition[COND_THIRST] -= 300;
vamp.c:ch->name);
vamp.c:if (ch->power[DISC_VAMP_VICI] < 4)
vamp.c:REMOVE_BIT(ch->extra,EXTRA_DRAGON);
vamp.c:if (ch->hit < 1) ch->hit = 1;
vamp.c:    ch->damroll = ch->damroll - 500;
vamp.c:    ch->hitroll = ch->hitroll - 500;
vamp.c:    free_string( ch->morph );
vamp.c:    ch->morph = str_dup( "A big black monster" );
vamp.c:if ( ch->pcdata->condition[COND_THIRST] < 100 )
vamp.c:if (ch->mounted == IS_RIDING) do_dismount(ch,"");
vamp.c:ch->pcdata->condition[COND_THIRST] -= number_range(200,400);
vamp.c:SET_BIT(ch->extra,EXTRA_DRAGON);
vamp.c:sprintf(buf, "%s, the huge rabid dragon", ch->name);
vamp.c:free_string( ch->morph );
vamp.c:ch->morph = str_dup( buf );
vamp.c:ch->damroll = ch->damroll + 500;
vamp.c:ch->hitroll = ch->hitroll + 500;
vamp.c:    if (ch->power[DISC_VAMP_VICI] < 10)
vamp.c:    if (IS_AFFECTED(ch,AFF_POLYMORPH) && ch->pcdata->chobj == NULL)
vamp.c:   if (ch->pcdata->obj_vnum != 0)
vamp.c:    obj_to_room(obj,ch->in_room);
vamp.c:    ch->pcdata->obj_vnum = obj->pIndexData->vnum;
vamp.c:    sprintf(buf,"%d",ch->pcdata->obj_vnum);
vamp.c:    ch->pcdata->chobj = obj;
vamp.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:    SET_BIT(ch->extra, EXTRA_OSWITCH);
vamp.c:    free_string(ch->morph);
vamp.c:    ch->morph = str_dup(obj->short_descr);
vamp.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
vamp.c:    else bloodpool = (250 / ch->generation);
vamp.c:    if (IS_SET(ch->newbits, NEW_TIDE))
vamp.c:    bloodpool += (3000 / ch->generation);
vamp.c:    else bloodpool += (2000 / ch->generation);
vamp.c:    if (ch->power[DISC_VAMP_DOMI] < 5)
vamp.c:    if (IS_SET(ch->extra, EXTRA_BAAL))
vamp.c:    if (ch->pcdata->condition[COND_THIRST] < bloodpool)
vamp.c:    ch->pcdata->condition[COND_THIRST] = 0;
vamp.c:    SET_BIT(ch->extra, EXTRA_BAAL);
vamp.c:    ch->power[DISC_VAMP_POTE] += 2;
vamp.c:    ch->power[DISC_VAMP_CELE] += 2;
vamp.c:    ch->power[DISC_VAMP_FORT] += 2;
vamp.c:    if (ch->power[DISC_VAMP_PRES] < 6 )
vamp.c:	SET_BIT(ch->extra, EXTRA_FAKE_CON);
vamp.c:	REMOVE_BIT(ch->extra, EXTRA_FAKE_CON);
vamp.c:		ch->pcdata->fake_hit, char_hitroll(ch));
vamp.c:		ch->pcdata->fake_dam, char_damroll(ch));
vamp.c:		ch->pcdata->fake_ac, char_ac(ch));
vamp.c:		ch->pcdata->fake_hp, ch->hit);
vamp.c:		ch->pcdata->fake_mana, ch->mana);
vamp.c:		ch->pcdata->fake_move, ch->move);
vamp.c:	ch->pcdata->fake_hit = value;
vamp.c:	ch->pcdata->fake_dam = value;
vamp.c:	ch->pcdata->fake_ac = value;
vamp.c:	ch->pcdata->fake_hp = value;
vamp.c:	ch->pcdata->fake_mana = value;
vamp.c:	ch->pcdata->fake_move = value;
vamp.c:if (ch->power[DISC_VAMP_DAIM] < 7)
vamp.c:if (ch->pcdata->condition[COND_THIRST] < 50)
vamp.c:ch->pcdata->condition[COND_THIRST] -= 50;
vamp.c:sprintf(buf,"A look of concentration passes over %s's face.",ch->name);
vamp.c:objc = get_obj_list(ch,wall,ch->in_room->contents);
vamp.c:obj_to_room(obj,ch->in_room);
vamp.c: inroom= ch->in_room;
vamp.c: if (ch->power[DISC_VAMP_DAIM] < 6)
vamp.c: if (IS_SET(ch->in_room->room_flags,ROOM_FLAMING))
vamp.c: if (ch->pcdata->condition[COND_THIRST] < 100)
vamp.c:if (IS_SET(ch->in_room->room_flags, ROOM_SAFE))
vamp.c:ch->pcdata->condition[COND_THIRST] -= 100;
vamp.c:sprintf(buf,"A look of concentration passes over %s's face.\n\r",ch->name);
vamp.c:    if (ch->power[DISC_VAMP_NECR] < 5 && IS_CLASS(ch, CLASS_VAMPIRE))
vamp.c:   if (ch->pcdata->powers[NECROMANTIC] < 1 && IS_CLASS(ch, CLASS_LICH))
vamp.c:    if (ch->pcdata->followers > 5)
vamp.c:    ch->pcdata->followers++;
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    if (ch->power[DISC_VAMP_VICI] < 2)
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 40 )
vamp.c:    ch->pcdata->condition[COND_THIRST] -= number_range(30,40);
vamp.c:        sprintf(buf,"Your flesh molds and transforms into %s.",ch->name);
vamp.c:        sprintf(buf,"%s's flesh molds and transforms into %s.",ch->morph,ch->name);
vamp.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
vamp.c:    	free_string( ch->morph );
vamp.c:    	ch->morph = str_dup( "" );
vamp.c:        sprintf(buf,"%s's flesh molds and transforms into a clone of %s.",ch->morph,victim->short_descr);
vamp.c:        sprintf(buf,"%s's flesh mols and transforms into a clone of you!",ch->morph);
vamp.c:    	free_string( ch->morph );
vamp.c:        ch->morph = str_dup( victim->short_descr );
vamp.c:    sprintf(buf,"%s's flesh molds and transforms into a clone of %s.",ch->name,victim->short_descr);
vamp.c:    sprintf(buf,"%s's flesh molds and transforms into a clone of you!",ch->name);
vamp.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
vamp.c:    free_string( ch->morph );
vamp.c:    ch->morph = str_dup( victim->short_descr );
vamp.c:    if (ch->power[DISC_VAMP_PRES] < 3)
vamp.c:    level = ch->power[DISC_VAMP_PRES] * 40;
vamp.c:    if (ch->power[DISC_VAMP_SERP] < 4)
vamp.c:    level = ch->spl[spelltype] * 0.25;
vamp.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
vamp.c:    else bloodpool = (250 / ch->generation);
vamp.c:    if (IS_SET(ch->newbits, NEW_TIDE))
vamp.c:    bloodpool += (3000 * ch->generation);
vamp.c:    else bloodpool += (2000 * ch->generation);
vamp.c:if (ch->power[DISC_VAMP_OBTE] < 5)
vamp.c:if ( ( victim = ch->fighting ) == NULL )
vamp.c:dam = ch->power[DISC_VAMP_OBTE] * 30;
vamp.c:dam = ch->power[DISC_VAMP_OBTE] * 200;
vamp.c:ch->pcdata->condition[COND_THIRST] += number_range(40,50);
vamp.c:if (ch->pcdata->condition[COND_THIRST]>bloodpool)
vamp.c:ch->pcdata->condition[COND_THIRST] = bloodpool;
vamp.c:    if (ch->power[DISC_VAMP_QUIE] < 4)
vamp.c:  if (ch->in_room != NULL)
vamp.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
vamp.c:    if( ch->pcdata->rank == AGE_LA_MAGRA ) chance = 10;
vamp.c:    else if( ch->pcdata->rank == AGE_TRUEBLOOD ) chance = 15;
vamp.c:     if (ch->pcdata->rank == AGE_TRUEBLOOD) dam *= 1.5;
vamp.c:    ch->fighting = victim;
vamp.c:        switch( ch->pIndexData->vnum ){
vamp.c:    if (!IS_NPC(victim)) dam = ch->power[DISC_VAMP_QUIE] * 500;
vamp.c:    if (IS_NPC(victim)) dam = ch->power[DISC_VAMP_QUIE] * 1000;
vamp.c:    if (ch->power[DISC_VAMP_PRES] < 2)
vamp.c:if (ch->power[DISC_VAMP_SERP] < 4)
vamp.c:if ( ( victim = ch->fighting ) == NULL )
vamp.c:dam = ((ch->pcdata->condition[COND_THIRST] / ch->power[DISC_VAMP_SERP])*2.5);
vamp.c:dam = ((ch->pcdata->condition[COND_THIRST] / ch->power[DISC_VAMP_SERP])*2.5);
vamp.c:    if ( ch->power[DISC_VAMP_CHIM] < 5 )
vamp.c:    if ( IS_SET(ch->flag2, VAMP_OBJMASK ) )
vamp.c:      sprintf(buf, "%s transforms back into %s.\n\r",ch->morph, ch->name );
vamp.c:      ch->morph = str_dup("");
vamp.c:      ch->objdesc = str_dup("");
vamp.c:      ch->long_descr = str_dup("");
vamp.c:      ch->short_descr = str_dup(ch->name);
vamp.c:      REMOVE_BIT(ch->flag2, VAMP_OBJMASK);
vamp.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 50 )
vamp.c:    ch->pcdata->condition[COND_THIRST] -= number_range(40, 50);
vamp.c:    SET_BIT(ch->flag2, VAMP_OBJMASK );
vamp.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:    free_string(ch->morph);
vamp.c:    ch->morph = str_dup(obj->short_descr);
vamp.c:    free_string(ch->objdesc);
vamp.c:    ch->objdesc = str_dup(obj->description);
vamp.c:    ch->long_descr = str_dup("");
vamp.c:    if ( ch->power[DISC_VAMP_CHIM] < 1 )
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 20 )
vamp.c:    if (ch->pcdata->followers > 4)
vamp.c:    ch->pcdata->followers++;
vamp.c:      victim->short_descr = str_dup(ch->name);
vamp.c:      sprintf(buf, "%s is hovering here.\n\r",ch->name);
vamp.c:      victim->name = str_dup(ch->name);
vamp.c:      ch->pcdata->condition[COND_THIRST] -= 20;
vamp.c:	char_to_room( victim, ch->in_room );
vamp.c:    if ( ch->power[DISC_VAMP_CHIM] < 4 )
vamp.c:    if ( ( familiar = ch->pcdata->familiar ) != NULL ) 
vamp.c:    ch->pcdata->familiar = victim;
vamp.c:    if ( ch->power[DISC_VAMP_CHIM] < 2 )
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 30 )
vamp.c:    if (ch->pcdata->followers > 4)
vamp.c:    ch->pcdata->followers++;
vamp.c:      victim->short_descr = str_dup(ch->name);
vamp.c:      sprintf(buf, "%s is hovering here.\n\r",ch->name);
vamp.c:      victim->name = str_dup(ch->name);
vamp.c:      victim->max_hit  = ch->max_hit;
vamp.c:      victim->max_mana = ch->max_mana;
vamp.c:      victim->max_move = ch->max_move;
vamp.c:      victim->hitroll  = ch->hitroll;
vamp.c:      victim->damroll  = ch->damroll;
vamp.c:	char_to_room( victim, ch->in_room );
vamp.c:      ch->pcdata->condition[COND_THIRST] -= 30;
vamp.c:    if (ch->power[DISC_VAMP_THAN] < 3)
vamp.c:    if ( IS_SET(ch->flag2, VAMP_ASHES) )
vamp.c:      ch->pcdata->obj_vnum = 0;
vamp.c:      REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:      REMOVE_BIT(ch->extra, EXTRA_OSWITCH);
vamp.c:      REMOVE_BIT(ch->flag2, VAMP_ASHES);
vamp.c:      ch->pcdata->chobj = NULL;
vamp.c:      free_string(ch->morph);
vamp.c:      ch->morph = str_dup("");
vamp.c:    ch->pcdata->obj_vnum = ch->pcdata->powers[VPOWER_OBJ_VNUM];
vamp.c:    ch->pcdata->chobj = obj;
vamp.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:    SET_BIT(ch->extra, EXTRA_OSWITCH);
vamp.c:    SET_BIT(ch->flag2, VAMP_ASHES);
vamp.c:    free_string(ch->morph);
vamp.c:    ch->morph = str_dup("a pile of ashes");
vamp.c:    obj_to_room(obj,ch->in_room);
vamp.c:    if ( ch->power[DISC_VAMP_AUSP] < 3 && IS_CLASS(ch, CLASS_VAMPIRE))
vamp.c:    if ( victim->level > ch->level )
vamp.c:    if ( victim->spl[BLUE_MAGIC] > ch->spl[BLUE_MAGIC] / 2 )
vamp.c:    if ( ch->power[DISC_VAMP_AUSP] < 4 )
vamp.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
vamp.c:    if (victim->in_room == ch->in_room)
vamp.c:    if (ch->power[DISC_VAMP_THAN] < 1  )
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 40 )
vamp.c:    ch->pcdata->condition[COND_THIRST] -= number_range(30,40);
vamp.c:	sprintf(buf,"Your body wrinkles and reshapes as %s.",ch->name);
vamp.c:	sprintf(buf,"%s's body wrinkles and reshapes as %s.",ch->morph,ch->name);
vamp.c:	REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:	REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
vamp.c:    	free_string( ch->morph );
vamp.c:    	ch->morph = str_dup( "" );
vamp.c:    	sprintf(buf,"%s's body wrinkles and reshapes as %s.",ch->morph,victim->name);
vamp.c:    	sprintf(buf,"%s's body wrinkles and reshapes as you!",ch->morph);
vamp.c:    	free_string( ch->morph );
vamp.c:    	ch->morph = str_dup( victim->name );
vamp.c:    sprintf(buf,"%s's body wrinkles and reforms as %s.",ch->name,victim->name);
vamp.c:    sprintf(buf,"%s's body wrinkles and reforms as you!",ch->name);
vamp.c:    SET_BIT(ch->affected_by, AFF_POLYMORPH);
vamp.c:    SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_DISGUISED);
vamp.c:    free_string( ch->morph );
vamp.c:    ch->morph = str_dup( victim->name );
vamp.c:    if (ch->power[DISC_VAMP_DAIM] < 3)
vamp.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
vamp.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_SOLITARY)
vamp.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
vamp.c:    ||   victim->in_room->vnum == ch->in_room->vnum)
vamp.c:    obj->value[3] = ch->in_room->vnum;
vamp.c:    obj_to_room( obj, ch->in_room );
vamp.c:    obj->value[0] = ch->in_room->vnum;
vamp.c:    if (ch->power[DISC_VAMP_ANIM] < 3)
vamp.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
vamp.c:    value = ch->power[DISC_VAMP_QUIE];
vamp.c:    pcost = ch->power[DISC_VAMP_QUIE] * 60;
vamp.c:    if (ch->power[DISC_VAMP_QUIE] < 3 )
vamp.c://    ch->pcdata->quest += pcost;
vamp.c:    if ( arg[0] == '\0' && ch->embracing==NULL)
vamp.c:    if (ch->embracing != NULL)
vamp.c:      if ( ( victim = ch->embracing) != NULL)
vamp.c:    if ((victim = get_char_room( ch, arg)) == NULL && ch->embracing==NULL)
vamp.c:    sprintf(buf,"%s leaps toward %s baring his fangs.",ch->name,victim->name);
vamp.c:    sprintf(buf,"%s sinks their teeth into %s's throat.",ch->name,victim->name);
vamp.c:    sprintf(buf,"%s sinks their teeth into your throat.\n\r",ch->name);
vamp.c:    ch->embracing = victim;
vamp.c:    if (ch->pcdata->rank == AGE_ELDER) bloodpool = (500 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_METHUSELAH) bloodpool = (750 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_LA_MAGRA) bloodpool = (1000 / ch->generation);
vamp.c:    else if (ch->pcdata->rank == AGE_TRUEBLOOD) bloodpool = (1250 / ch->generation);
vamp.c:    else bloodpool = (250 / ch->generation);
vamp.c:    if (IS_SET(ch->newbits, NEW_TIDE))
vamp.c:    bloodpool += (3000 / ch->generation);
vamp.c:    else bloodpool += (2000 / ch->generation);
vamp.c:	if (victim->level > 75 * ch->spl[RED_MAGIC])
vamp.c:    sprintf(buf,"%s leaps toward %s baring his fangs.\n\r",ch->name,victim->short_descr);
vamp.c:      sprintf(buf,"%s lunges away from %s.",victim->name,ch->short_descr);
vamp.c:    sprintf(buf,"%s buries his fangs into %s's neck, and begins an orgy of blood-sucking!\n\r",ch->name,victim->short_descr);
vamp.c:    ch->embracing = victim;
vamp.c:    if (ch->power[DISC_VAMP_THAN] < 4 )
vamp.c:    sprintf(buf,"A look of concentration crosses over %s's face.",ch->name);
vamp.c:     	if ( IS_CLASS(ch, CLASS_VAMPIRE) && ch->power[DISC_VAMP_QUIE] < 2 )
vamp.c:    level = ch->power[DISC_VAMP_QUIE];
vamp.c:    if (ch->power[DISC_VAMP_DAIM] < 1)
vamp.c:    if (ch->pcdata->followers > 5)
vamp.c:    ch->pcdata->followers++;
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    if (ch->power[DISC_VAMP_DAIM] < 8)
vamp.c:    if (ch->pcdata->followers > 5)
vamp.c:    ch->pcdata->followers++;
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    if (ch->power[DISC_VAMP_ANIM] < 1)
vamp.c:    if (ch->pcdata->followers > 4 )
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    ch->pcdata->followers += 1;
vamp.c:    if (ch->power[DISC_VAMP_QUIE] < 1)
vamp.c:    if ( ( victim = ch->fighting ) == NULL )
vamp.c:    if (ch->pcdata->condition[COND_THIRST] < 5)
vamp.c:    dam = ((ch->pcdata->condition[COND_THIRST] / ch->power[DISC_VAMP_QUIE])*5);
vamp.c:    dam = ((ch->pcdata->condition[COND_THIRST] / ch->power[DISC_VAMP_QUIE])*5);
vamp.c:    ch->pcdata->condition[COND_THIRST] -= 5;
vamp.c:  if (ch->power[DISC_VAMP_SERP] < 5)
vamp.c:  if (!IS_SET(ch->newbits, NEW_SKIN))
vamp.c:  ch->armor -= 100 ;
vamp.c:  SET_BIT(ch->newbits, NEW_SKIN);
vamp.c:  else if (IS_SET(ch->newbits, NEW_SKIN))
vamp.c:  ch->armor += 100;
vamp.c:  REMOVE_BIT(ch->newbits,NEW_SKIN);
vamp.c:    if (ch->power[DISC_VAMP_SERP] < 4)
vamp.c:    if (ch->pcdata->followers > 5 )
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    ch->pcdata->followers += 1;
vamp.c:    if (ch->power[DISC_VAMP_CHIM] < 1)
vamp.c:    if (ch->pcdata->followers > 5 )
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    ch->pcdata->followers += 1;
vamp.c:if (ch->power[DISC_VAMP_DAIM] < 2)
vamp.c:  if (!str_cmp(ch->in_room->area->name, "diku    midgaard"))
vamp.c:ch->pcdata->condition[COND_THIRST] -= value;
vamp.c:sprintf(buf,"A look of concentration passes over %s's face.",ch->name);
vamp.c:objc = get_obj_list(ch,wall,ch->in_room->contents);
vamp.c:obj_to_room(obj,ch->in_room); 
vamp.c:    if (ch->power[DISC_VAMP_THAU] < 2)
vamp.c:    if ( 10 > ch->practice)
vamp.c:        ch->practice   -= 10;
vamp.c:   if (ch->power[DISC_VAMP_OBTE] < 10)
vamp.c:    "%s gazes intently at %s.",ch->name,victim->short_descr);
vamp.c:    ,ch->name,victim->short_descr);
vamp.c:   if (ch->power[DISC_VAMP_OBTE] < 8)
vamp.c:  if (ch->in_room != NULL)
vamp.c:    if (IS_SET (ch->in_room->room_flags, ROOM_ARENA))
vamp.c:    "%s pulls %s into the Shadowplane.",ch->name,victim->name);
vamp.c:    "%s pulls you into the Shadowplane!\n\r",ch->name);
vamp.c:    if (ch->power[DISC_VAMP_ANIM] < 4)
vamp.c:    if ( ( familiar = ch->pcdata->familiar ) != NULL)
vamp.c:        ch->pcdata->familiar = NULL;
vamp.c:    if (victim->level > (ch->spl[RED_MAGIC] * 0.25))
vamp.c:    if ( ch->pcdata->condition[COND_THIRST] < 25 )
vamp.c:    ch->pcdata->condition[COND_THIRST] -= 25;
vamp.c:    ch->pcdata->familiar = victim;
vamp.c:    if ( ch->power[DISC_VAMP_ANIM] < 5 )
vamp.c:        ch->rage += number_range(10,20);
vamp.c:      if (ch->beast >= 20)
vamp.c:        if ( ch->rage >= ch->beast )
vamp.c:      if (ch->beast <= 19)
vamp.c:        if ( ch->rage >= 20 )
vamp.c:        if (ch->beast == 0)
vamp.c:        ch->rage += number_range(20,30);
vamp.c:        if (ch->beast > 0) do_beastlike(ch,"");
vamp.c:    if (IS_CLASS(ch, CLASS_VAMPIRE) && (ch->power[DISC_VAMP_OBTE] < 1))
vamp.c:    if (ch->fight_timer > 0) {
vamp.c:    if ( IS_SET(ch->act, AFF_HIDE) )
vamp.c:        REMOVE_BIT(ch->act, AFF_HIDE);
vamp.c:        SET_BIT(ch->act, AFF_HIDE);
vamp.c:	victim=ch->fighting;
vamp.c:    if ( !IS_SET(ch->in_room->room_flags, ROOM_NOTRANS))
vamp.c:    ||   victim->level >= ch->level + 5
vamp.c:    if (ch->power[DISC_VAMP_PRES] < 4)
vamp.c:    char_to_room( victim, ch->in_room );
vamp.c:    if (ch->power[DISC_VAMP_THAN] < 5 )
vamp.c:   if ( ( victim = get_char_room( ch, arg ) ) == NULL && (ch->fighting) == NULL)
vamp.c:   if ((ch->fighting) != NULL)
vamp.c:   victim = ch->fighting;
vamp.c:   if ( arg[0] == '\0' && (ch->fighting) == NULL)
vamp.c:          dam = ch->power[DISC_VAMP_THAN] * 10;
vamp.c:        ch->hit = (ch->hit + dam);
vamp.c:        if (ch->hit > ch->max_hit + 1000)
vamp.c:        ch->hit = ch->max_hit + 1000;
vamp.c:          dam = ch->power[DISC_VAMP_THAN] * 50;
vamp.c:        ch->hit = (ch->hit + dam);
vamp.c:        if (ch->hit > ch->max_hit + 1000)
vamp.c:        ch->hit = ch->max_hit + 1000;
vamp.c:    if (ch->power[DISC_VAMP_PROT] < 5)
vamp.c:    if (IS_SET(ch->newbits, NEW_MONKFLAME))
vamp.c:          REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
vamp.c:    if (!IS_SET(ch->newbits, NEW_MONKFLAME))
vamp.c:          SET_BIT(ch->newbits, NEW_MONKFLAME);
vamp.c:    if (ch->power[DISC_VAMP_THAU] < 2)
vamp.c:    if (ch->pcdata->condition[COND_THIRST] < value )
vamp.c:        ch->pcdata->condition[COND_THIRST] = ch->pcdata->condition[COND_THIRST] - value;
vamp.c:        ch->pcdata->condition[COND_THIRST] = ch->pcdata->condition[COND_THIRST] - value;
vamp.c:        if (ch->power[DISC_VAMP_VICI] < 3)
vamp.c:          SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_HORNS);
vamp.c:          REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_HORNS);
vamp.c:          SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_WINGS);
vamp.c:          REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_WINGS);
vamp.c:          SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_EXOSKELETON);
vamp.c:          REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_EXOSKELETON);
vamp.c:          SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_TAIL);
vamp.c:          REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_TAIL);
vamp.c:          SET_BIT(ch->pcdata->stats[UNI_AFF], VAM_HEAD);
vamp.c:          REMOVE_BIT(ch->pcdata->stats[UNI_AFF], VAM_HEAD);
vote.c:			ch->name,
vote.c:			sprintf(buf,"Info-> The vote has been canceled by %s.\n\r", ch->name );
vote.c:	if( ch->pcdata->voted )
vote.c:		ch->pcdata->voted = 1;
vote.c:		ch->pcdata->voted = 1;
wizard.c:	sprintf(buf,"Skills #R[#y%2d#R]#n\n\r",ch->pcdata->powers[WL_SKILLS]);
wizard.c:	sprintf(buf,"Spells #R[#y%2d#R]#n\n\r",ch->pcdata->stats[WL_SPELLS]);
wizard.c:            if (ch->pcdata->powers[WL_SKILLS] < 1)
wizard.c:            if (ch->pcdata->powers[WL_SKILLS] > 0)
wizard.c:            if (ch->pcdata->powers[WL_SKILLS] > 0)
wizard.c:            if (ch->pcdata->powers[WL_SKILLS] > 1)
wizard.c:            if (ch->pcdata->powers[WL_SKILLS] > 2)
wizard.c:            if (ch->pcdata->powers[WL_SKILLS] > 3)
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 1){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 2){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 3){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 4){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 5){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 6){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 7){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 8){
wizard.c:         if (ch->pcdata->stats[WL_SPELLS] < 9){
wizard.c:	sprintf(buf,"Skills #R[#y%2d#R]#n\n\r",ch->pcdata->powers[WL_SKILLS]);
wizard.c:	sprintf(buf,"Spells #R[#y%2d#R]#n\n\r",ch->pcdata->stats[WL_SPELLS]);
wizard.c:        cost = (ch->pcdata->powers[WL_SKILLS]+1) * 100;
wizard.c:        if ( ch->pcdata->powers[WL_SKILLS] >= max )
wizard.c:        if ( cost > ch->practice)
wizard.c:        ch->pcdata->powers[WL_SKILLS]++;
wizard.c:        ch->practice -= cost;
wizard.c:        cost = (ch->pcdata->stats[WL_SPELLS]+1) * 100;
wizard.c:        if ( ch->pcdata->stats[WL_SPELLS] >= max )
wizard.c:        if ( cost > ch->practice)
wizard.c:        ch->pcdata->stats[WL_SPELLS]++;
wizard.c:        ch->practice -= cost;
wizard.c:    if (ch->pcdata->upgrade_level >=1)
wizard.c:    if ( ch->practice < 60)
wizard.c:    ch->practice -= 60;
wizard.c:    obj->questowner = str_dup(ch->pcdata->switchname);
wizard.c:  if (IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
wizard.c:  if (ch->mana < 250)
wizard.c:        ch->mana -= 250;
wizard.c:    if ( IS_CLASS(ch, CLASS_WIZARD) && ch->pcdata->powers[WL_SKILLS] < 1 )
wizard.c:    if (ch->pcdata->followers > 5)
wizard.c:    ch->pcdata->followers++;
wizard.c:    char_to_room( victim, ch->in_room );
wizard.c:    if(victim->level > ((ch->pcdata->upgrade_level + 1) * 500))
wizard.c:    if ( IS_CLASS(ch, CLASS_WIZARD) && ch->pcdata->powers[WL_SKILLS] < 1 )
wizard.c:        REMOVE_BIT(ch->affected_by, AFF_SHADOWSIGHT);
wizard.c:    SET_BIT(ch->affected_by, AFF_SHADOWSIGHT);
wizard.c:  if (IS_CLASS(ch, CLASS_WIZARD) && ch->pcdata->powers[WL_SKILLS] < 2)
wizard.c:    if ( IS_SET(ch->act, PLR_HOLYLIGHT) )
wizard.c:        REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
wizard.c:        SET_BIT(ch->act, PLR_HOLYLIGHT);
wizard.c:    if (IS_CLASS(ch, CLASS_WIZARD) && ch->pcdata->powers[WL_SKILLS] < 3)
wizard.c:            SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
wizard.c:        REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
wizard.c:        if (ch->pcdata->stats[WL_SPELLS] < 3)
wizard.c:        if (ch->mana < 5000)
wizard.c:    for ( vch = ch->in_room->people; vch != NULL; vch = vch_next )
wizard.c:        vch_next = vch->next_in_room;
wizard.c:	if (vch->level >=4) continue;
wizard.c:        vch->position = POS_STUNNED;
wizard.c:        dam = number_range( vch->hit/56, vch->hit/38);
wizard.c:        if (ch->pcdata->powers[WL_SKILLS] > 3)
wizard.c:        vch->hit -= dam;
wizard.c:        sprintf(buf, "#R%s closes his eyes and brings his hands together, releasing a massive shockwave! #R[#c%d#R]#n\n\r", ch->name, dam);
wizard.c:        sprintf(buf, "#R%s falls to the ground, stunned!\n\r", vch->name);
wizard.c:        if (vch->hit < -10)
wizard.c:        vch->hit = -10;
wizard.c:        ch->mana -= 5000;
wizard.c:        if (ch->pcdata->stats[WL_SPELLS] < 7)
wizard.c:        if (ch->pcdata->powers[WL_SKILLS] < 4) cost = 20000;
wizard.c:        if (ch->pcdata->powers[WL_SKILLS] > 3) cost = 10000;
wizard.c:        if (ch->mana < 20000 && ch->pcdata->powers[WL_SKILLS] < 4)
wizard.c:        else if (ch->mana < 10000 && ch->pcdata->powers[WL_SKILLS] > 3)
wizard.c:        if (ch->pcdata->powers[WL_SKILLS] > 3 && number_range(1, 100) < 10)
wizard.c:/*                if (ch->pcdata->powers[WL_SKILLS] > 3 && number_range(1, 75) < 5 && !IS_NPC(victim))
wizard.c:                        sprintf( buf, "#7%s#C is cut to pieces by #7%s's#C hellblades.\n\r", victim->name, ch->name);
wizard.c:                        ch->pkill ++;
wizard.c:                        ch->race ++;
wizard.c:        ch->mana -= cost;
wizard.c:        if (ch->pcdata->stats[WL_SPELLS] < 9)
wizard.c:	   stcf(victim,"%s tried to wrath you!\n\r",ch->name);
wizard.c:        if (ch->mana < 5000)
wizard.c:                if (ch->pcdata->powers[WL_SKILLS] > 3) dam *= 2;
wizard.c:                ch->mana -= 5000;
wizard.c:		ch->fight_timer += 5;
wizard.c:                if (ch->pcdata->stats[WL_SPELLS] < 1)
wizard.c:                if (ch->mana < 1000)
wizard.c:                if (ch->pcdata->powers[WL_SKILLS] > 3)
wizard.c:       		ch->mana -= 1000;
wizard.c:                if (ch->fighting == NULL) ch->fighting = victim;
wizard.c:      if (ch->pcdata->stats[WL_SPELLS] < 5)
wizard.c:      if ( ( victim = ch->fighting ) == NULL )
wizard.c:        if ( ch->position == POS_FIGHTING )
wizard.c:            ch->position = POS_STANDING;
wizard.c:        if(ch->mana < 750)
wizard.c:        if ( ( pexit = ch->in_room->exit[door] ) == NULL
wizard.c:        ch->mana -= 750;
wizard.c:        if (ch->pcdata->stats[WL_SPELLS] < 8)
wizard.c:        if (ch->mana < 7500)
wizard.c:    pRoom = ch->in_room;
wizard.c:        ch->mana -= 7500;
wizard.c:                if (ch->pcdata->stats[WL_SPELLS] < 4)
wizard.c:                if (ch->mana < 5000)
wizard.c:                if (ch->pcdata->powers[WL_SKILLS] > 3)
wizard.c:                sprintf( buf, "#y%s#R points his hands towards you and sends forth a wicked spear.#n   #y[#C%d#y]#n\n\r", ch->name, dam);
wizard.c:                ch->mana -= 5000;
wizard.c:                if (ch->fighting == NULL) ch->fighting = victim;
wizard.c:        if (ch->pcdata->stats[WL_SPELLS] < 2)
wizard.c:        if (ch->pcdata->powers[WL_SKILLS] > 3) dam *= 2;
wizard.c:        if (ch->mana < dam * 2)
wizard.c:        ch->hit += dam;
wizard.c:        ch->mana -= dam;
wizard.c:        sprintf(buf, "#R%s#r places his hands on you, sucking out your life. #B[#R%d#B]#n\n\r", ch->name, dam);
wizard.c:        if (ch->pcdata->stats[WL_SPELLS] < 6)
wizard.c:  if (ch->mana < 5000)
wizard.c:        ch->mana -= 5000;
wizlist.c:    if ((arg1[0] != '\0') && (ch->level == MAX_LEVEL))
wizlist.c:        if ( !str_cmp( ch->name, curr->name ) )
wizlist.c:    curr->name = str_dup(ch->name);
wizutil.c:  pArea = ch->in_room->area;
wizutil.c:    free_string( ch->pcdata->switchname );
wizutil.c:    ch->pcdata->switchname = str_dup( buf );
wizutil.c:    free_string( ch->name);
wizutil.c:    ch->name = str_dup( buf );
wizutil.c:  if (!IS_NPC(ch) && ch->class != 0)
wizutil.c:  if (ch->level < 3)
wizutil.c:ch->class = CLASS_DEMON;
wizutil.c:    ch->class = CLASS_MILITARY;
wizutil.c:    ch->pcdata->Bootcamp[5]=28;
wizutil.c:    obj->questowner = str_dup(ch->pcdata->switchname);
wizutil.c:    obj->questowner = str_dup(ch->pcdata->switchname);
wizutil.c:    obj->questowner = str_dup(ch->pcdata->switchname);
wizutil.c:ch->class = CLASS_WEREWOLF;
wizutil.c:ch->class = CLASS_DROW;
wizutil.c:{if(ch->level<4)ch->home=100906;
wizutil.c:   ch->hit=10;
wizutil.c:   ch->max_hit=10;
wizutil.c:   ch->mana=10;
wizutil.c:   ch->max_mana=10;
wizutil.c:   ch->move=10;
wizutil.c:   ch->max_move=10;
wizutil.c:ch->class = CLASS_RPONLY;
wizutil.c:ch->class = CLASS_NINJA;
wizutil.c:ch->class = CLASS_WIZARD;
wizutil.c:ch->class = CLASS_VAMPIRE;
wizutil.c:ch->beast = 30;
wizutil.c:ch->class = CLASS_MONK;
wizutil.c:ch->level = 3;
wizutil.c:  if (ch->max_mana >= 5000 && ch->spl[RED_MAGIC]>99 && ch->spl[BLUE_MAGIC]>99
wizutil.c:  && ch->spl[YELLOW_MAGIC]>99 && ch->spl[GREEN_MAGIC]>99 && ch->spl[PURPLE_MAGIC]>99)
wizutil.c:    ch->class = CLASS_MAGE;
wizutil.c:    ch->level = 3;
wizutil.c:ch->class = CLASS_SHAPESHIFTER;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_DROID;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_TANARRI;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_ANGEL;
wizutil.c:ch->level = 3;
wizutil.c:ch->alignment = 1000;
wizutil.c:ch->class = CLASS_SAMURAI;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_UNDEAD_KNIGHT;
wizutil.c:ch->level = 3;
wizutil.c:      if (ch->max_mana >= 5000 && ch->spl[RED_MAGIC]>99 && ch->spl[BLUE_MAGIC]>99
wizutil.c:  && ch->spl[YELLOW_MAGIC]>99 && ch->spl[GREEN_MAGIC]>99 && ch->spl[PURPLE_MAGIC]>99)
wizutil.c:    ch->class = CLASS_LICH;
wizutil.c:    ch->level = 3;
wizutil.c:ch->class = CLASS_ELF;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_KAHN;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_DRAGON;
wizutil.c:ch->level = 3;
wizutil.c:ch->class = CLASS_PHOENIX;
wizutil.c:ch->level = 3;
wizutil.c:/*	ch->class = CLASS_WRAITH; */
wizutil.c://	ch->level = 3;
wizutil.c:	sprintf(buf, "%s has commited suicide to become a wraith.\n\r",ch->name);
wizutil.c:	if (ch->class == 0) 
wizutil.c:		if(IS_SET(ch->affected_by2, PLR_CLASSME)) 
wizutil.c:			REMOVE_BIT(ch->affected_by2, PLR_CLASSME);
wizutil.c:			sprintf(buf, "%s has revoked their oath against the gods.\n\r",ch->name);
wizutil.c:		else if(!IS_SET(ch->affected_by2, PLR_CLASSME))
wizutil.c:			SET_BIT(ch->affected_by2, PLR_CLASSME);
wizutil.c:			sprintf(buf, "%s has sworn an oath against the gods.\n\r",ch->name);
wizutil.c:                vch->exp += v;
wizutil.c:                vch->pcdata->score[SCORE_TOTAL_XP] += v;
wizutil.c:                vch->pcdata->quest += v;
wizutil.c:        if (vch->mkill < 5) {
wizutil.c:                vch->mkill = 5;
wizutil.c:        sprintf(arg2, "%s reimbursed %d %s.\n\r", vch->name, v, arg);
wizutil.c:        sprintf(arg2, "%s has reimbursed you %d %s.\n\r", ch->name, v, arg);
wizutil.c:     if ( ch->affected == NULL )
wizutil.c:     if ( ch->affected != NULL )
wizutil.c:         for ( paf = ch->affected; paf != NULL; paf = paf->next )
wizutil.c:               if ( ch->level >= 0 )
wraith.c:  if( ch->move < 600)
wraith.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
wraith.c:  if (victim->in_room == ch->in_room)
wraith.c:  ch->move -= 500;
wraith.c:    if (ch->pcdata->powers[WRAITH_DEATH] < 0)
wraith.c:    if ( ch->practice < 90 )
wraith.c:	if (ch->pcdata->upgrade_level >= 1)
wraith.c:	if (ch->pcdata->upgrade_level == 0)
wraith.c:ch->practice -= 60;
wraith.c:    obj->questowner = str_dup(ch->pcdata->switchname);
wraith.c:      ch->pcdata->powers[WRAITH_DEATH], ch->pcdata->powers[WRAITH_POWER]);
wraith.c:      ch->pcdata->powers[WRAITH_DEATH], ch->pcdata->powers[WRAITH_POWER]);
wraith.c:cost = (ch->pcdata->powers[improve]+1) * 100;
wraith.c:if ( ch->pcdata->powers[improve] >= max )
wraith.c:if ( cost > ch->practice )
wraith.c:ch->pcdata->powers[improve] += 1;
wraith.c:ch->practice -= cost;
wraith.c:  if (ch->pcdata->powers[WRAITH_DEATH] < 3 )
wraith.c:  if (ch->move < 1000)
wraith.c:  ich_next = ch->in_room->people;
wraith.c:    ich_next = ich->next_in_room;
wraith.c:		dam = ((ch->pcdata->upgrade_level * (ch->pdeath+1))*100);
wraith.c:  ch->move -= 800;
wraith.c:  if (ch->pcdata->powers[WRAITH_DEATH] < 3 )
wraith.c:  if (ch->move < 1000)
wraith.c:  ich_next = ch->in_room->people;
wraith.c:    ich_next = ich->next_in_room;
wraith.c:	  if (ich == ch) ich_next = ich->next_in_room;
wraith.c:	  if (IS_IMMORTAL(ich)) ich_next = ich->next_in_room;
wraith.c:		dam = ((ch->pcdata->upgrade_level * (ch->pdeath+1)*100));
wraith.c:	  ich_next = ich->next_in_room;
wraith.c:    ich = ich->next_in_room;
wraith.c:  ch->move -= 800;
wraith.c:    if (ch->pcdata->powers[WRAITH_DEATH] < 5)
wraith.c:    if (IS_SET(ch->pcdata->powers[AURAS], DEATH_AURA))
wraith.c:      REMOVE_BIT(ch->pcdata->powers[AURAS], DEATH_AURA);
wraith.c:      SET_BIT(ch->pcdata->powers[AURAS], DEATH_AURA);
wraith.c:  if (ch->pcdata->powers[WRAITH_POWER] < 3)
wraith.c:  if (( victim = ch->fighting ) == NULL )
wraith.c:  if (ch->pcdata->powers[WRAITH_POWER] < 2)
wraith.c:    REMOVE_BIT(ch->affected_by, AFF_ETHEREAL);
wraith.c:    REMOVE_BIT(ch->affected_by, AFF_SHADOWPLANE);
wraith.c:  SET_BIT(ch->affected_by, AFF_ETHEREAL);
wraith.c:  SET_BIT(ch->affected_by, AFF_SHADOWPLANE);
wraith.c:    if (ch->pcdata->powers[WRAITH_POWER] < 5)
wraith.c:        REMOVE_BIT(ch->polyaff, POLY_ZULOFORM);
wraith.c:        REMOVE_BIT(ch->affected_by, AFF_POLYMORPH);
wraith.c:        ch->damroll -= 350;
wraith.c:        ch->hitroll -= 350;
wraith.c:        ch->armor   += 600;
wraith.c:        free_string( ch->morph );
wraith.c:        ch->morph = str_dup( "" );
wraith.c:        if (ch->stance[0] != -1) do_stance(ch,"");
wraith.c:        if (ch->mounted == IS_RIDING) do_dismount(ch,"");
wraith.c:        ch->pcdata->mod_str = 15;
wraith.c:        ch->pcdata->mod_dex = 15;
wraith.c:        SET_BIT(ch->polyaff, POLY_ZULOFORM);
wraith.c:        SET_BIT(ch->affected_by, AFF_POLYMORPH);
wraith.c:        sprintf(buf, "%s the wicked wraith", ch->name);
wraith.c:        free_string( ch->morph );
wraith.c:        ch->morph = str_dup( buf );
wraith.c:        ch->damroll += 350;
wraith.c:        ch->hitroll += 350;
wraith.c:        ch->armor   -= 600;
wraith.c:  if (ch->pcdata->powers[WRAITH_POWER] < 1)
wraith.c:  if (IS_SET(ch->act, PLR_HOLYLIGHT))
wraith.c:    REMOVE_BIT(ch->act, PLR_HOLYLIGHT);
wraith.c:    SET_BIT(ch->act, PLR_HOLYLIGHT);
ww.c:  for ( gch = char_list; gch != NULL; gch = gch->next)
ww.c:    capitalize( gch->name ), gch->hit, gch->mana, gch->move);
ww.c:  if ( 60 > ch->practice)
ww.c:  ch->practice   -= 60;
ww.c:  obj->questowner = str_dup(ch->pcdata->switchname);
ww.c:  if ( 120 > ch->practice)
ww.c:  ch->practice   -= 120;
ww.c:  obj->questowner = str_dup(ch->pcdata->switchname);
ww.c:   if (ch->power[DISC_WERE_LUNA] < 5)
ww.c:   if (!IS_SET(ch->newbits, NEW_SCLAWS))
ww.c:        SET_BIT(ch->newbits, NEW_SCLAWS);
ww.c:   if (IS_SET(ch->newbits, NEW_SCLAWS))
ww.c:	REMOVE_BIT(ch->newbits, NEW_SCLAWS);
ww.c:    if (ch->power[DISC_WERE_LUNA] < 8 )
ww.c:    if (ch->mana < 500)
ww.c:    if (ch->fighting == NULL)
ww.c:	ch->mana -= 500;
ww.c:    if (ch->power[DISC_WERE_LUNA] < 6)
ww.c:  if( IS_SET(ch->in_room->room_flags, ROOM_ASTRAL))
ww.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
ww.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_SOLITARY)
ww.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
ww.c:    ||   victim->in_room->vnum == ch->in_room->vnum)
ww.c:    obj->value[3] = ch->in_room->vnum;
ww.c:    obj_to_room( obj, ch->in_room );
ww.c:    obj->value[0] = ch->in_room->vnum;
ww.c:    if (ch->power[DISC_WERE_LUNA] < 4 )
ww.c:        if ( ch->fighting != NULL )
ww.c:    if (ch->mana < 100 && ch->fighting != NULL)
ww.c:    if (ch->fighting != NULL || ch->fight_timer > 0 )
ww.c:	ch->mana -= 1000;
ww.c:    if (ch->mana < 300 && ch->fighting == NULL)
ww.c:    if (ch->fighting == NULL)
ww.c:	ch->mana -= 3000;
ww.c:    if (ch->power[DISC_WERE_LUNA] < 3 )
ww.c:        if ( ch->fighting != NULL )
ww.c:    if (ch->mana < 50 && ch->fighting != NULL)
ww.c:    if (ch->fighting != NULL || ch->fight_timer > 0 )
ww.c:        ch->mana -= 500;
ww.c:    if (ch->mana < 250 && ch->fighting == NULL)
ww.c:    if (ch->fighting == NULL)
ww.c:	ch->mana -= 2500;
ww.c:    if (ch->power[DISC_WERE_LUNA] < 1)
ww.c:    if (IS_SET(ch->newbits, NEW_MONKFLAME))
ww.c:	REMOVE_BIT(ch->newbits, NEW_MONKFLAME);
ww.c:    if (!IS_SET(ch->newbits, NEW_MONKFLAME))
ww.c:	SET_BIT(ch->newbits, NEW_MONKFLAME);
ww.c:    if (ch->power[DISC_WERE_LUNA] < 2)
ww.c:    if (ch->pcdata->upgrade_level >= 1){
ww.c:    if (ch->practice < 60)
ww.c:    ch->practice -= 60;
ww.c:    obj->questowner = str_dup(ch->pcdata->switchname);
ww.c:  if (ch->power[DISC_WERE_BOAR] < 7)
ww.c:  if (!IS_SET(ch->newbits, NEW_REND))
ww.c:  SET_BIT(ch->newbits, NEW_REND);
ww.c:  else if (IS_SET(ch->newbits, NEW_REND))
ww.c:  REMOVE_BIT(ch->newbits,NEW_REND);
ww.c:  if (ch->power[DISC_WERE_BEAR] < 7)
ww.c:  if (!IS_SET(ch->newbits, NEW_SKIN))
ww.c:  ch->armor -= 100 ;
ww.c:  SET_BIT(ch->newbits, NEW_SKIN);
ww.c:  else if (IS_SET(ch->newbits, NEW_SKIN))
ww.c:  ch->armor += 100;
ww.c:  REMOVE_BIT(ch->newbits,NEW_SKIN);
ww.c:  if (ch->power[DISC_WERE_RAPT] < 8)
ww.c:  if (!IS_SET(ch->newbits, NEW_JAWLOCK))
ww.c:  SET_BIT(ch->newbits, NEW_JAWLOCK);
ww.c:  else if (IS_SET(ch->newbits, NEW_JAWLOCK))
ww.c:  REMOVE_BIT(ch->newbits,NEW_JAWLOCK);
ww.c:  if (ch->power[DISC_WERE_RAPT] < 3)
ww.c:  if (!IS_SET(ch->newbits, NEW_PERCEPTION))
ww.c:  SET_BIT(ch->newbits, NEW_PERCEPTION);
ww.c:  else if (IS_SET(ch->newbits, NEW_PERCEPTION))
ww.c:  REMOVE_BIT(ch->newbits,NEW_PERCEPTION);
ww.c:if (ch->power[DISC_WERE_BEAR] < 6)
ww.c:if ((victim=ch->fighting) == NULL)
ww.c:ch->name,victim->name);
ww.c:  if (ch->power[DISC_WERE_BEAR] < 5)
ww.c:  if (!IS_SET(ch->newbits, NEW_QUILLS))
ww.c:  SET_BIT(ch->newbits, NEW_QUILLS);
ww.c:  else if (IS_SET(ch->newbits, NEW_QUILLS))
ww.c:  REMOVE_BIT(ch->newbits,NEW_QUILLS);
ww.c:  if (ch->power[DISC_WERE_BEAR] < 8)
ww.c:  if (!IS_SET(ch->newbits, NEW_SLAM))
ww.c:  SET_BIT(ch->newbits, NEW_SLAM);
ww.c:  else if (IS_SET(ch->newbits, NEW_SLAM))
ww.c:  REMOVE_BIT(ch->newbits,NEW_SLAM);
ww.c:    if (ch->power[DISC_WERE_RAPT] < 7)
ww.c:    if (ch->power[DISC_WERE_RAPT] > 6)
ww.c:    if (ch->power[DISC_WERE_RAPT] > 7)
ww.c:    if (ch->power[DISC_WERE_RAPT] > 9)
ww.c:  if (!IS_CLASS(ch,CLASS_WEREWOLF) && !IS_SET(ch->itemaffect, ITEMA_TALON))
ww.c:  if (ch->power[DISC_WERE_RAPT] < 10 && !IS_SET(ch->itemaffect, ITEMA_TALON))
ww.c:  if ( ( victim = ch->fighting ) == NULL )
ww.c:if (ch->power[DISC_WERE_RAPT] < 5)
ww.c:obj = get_obj_list( ch, arg, ch->in_room->contents );
ww.c:ch->hit += hpgain;        
ww.c:if (ch->hit > ch->max_hit)
ww.c:ch->hit = ch->max_hit;
ww.c:    if ( ch->power[DISC_WERE_OWL] < 5 )
ww.c:    if ( ch->fighting == NULL )
ww.c:      if ( ch->power[DISC_WERE_OWL]  < 6 )
ww.c:      if ( ch->power[DISC_WERE_OWL] < 7 )
ww.c:    if ( ch->power[DISC_WERE_OWL] < 6 )
ww.c:    if ( ch->gnosis[GCURRENT] < 4 )
ww.c:    af.duration  = ch->power[DISC_WERE_OWL];
ww.c:    af.modifier  = -( ch->power[DISC_WERE_OWL] * 50 * (ch->pcdata->upgrade_level + 1));
ww.c:    af.duration  = ch->power[DISC_WERE_OWL];
ww.c:    af.modifier  = -( ch->power[DISC_WERE_OWL] * (ch->pcdata->upgrade_level + 1));
ww.c:    af.duration  = ch->power[DISC_WERE_OWL];
ww.c:    af.modifier  = -( ch->power[DISC_WERE_OWL] * 50 * (ch->pcdata->upgrade_level + 1));
ww.c:    ch->gnosis[CURRENT] -= 4;
ww.c:    if (ch->power[DISC_WERE_OWL] < 7)
ww.c:        obj->questmaker = str_dup(ch->name);
ww.c:        obj->questmaker = str_dup(ch->name);
ww.c:    if ( ch->power[DISC_WERE_OWL] < 8 )
ww.c:      REMOVE_BIT(ch->garou1, WOLF_COCOON);
ww.c:    if ( ch->gnosis[GCURRENT] < 2 )
ww.c:      SET_BIT(ch->garou1, WOLF_COCOON);
ww.c:      ch->gnosis[GCURRENT]--;
ww.c:    if ( ch->power[DISC_WERE_HAWK] < 5 )
ww.c:    if ( IS_SET(ch->newbits, NEW_QUILLS) )
ww.c:        REMOVE_BIT(ch->newbits, NEW_QUILLS);
ww.c:    if ( !IS_SET(ch->newbits, NEW_QUILLS) )
ww.c:        SET_BIT(ch->newbits, NEW_QUILLS);
ww.c:    if ( ch->power[DISC_WERE_HAWK] < 6 )
ww.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_PRIVATE)
ww.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_SOLITARY)
ww.c:    ||   IS_SET(ch->in_room->room_flags, ROOM_NO_RECALL)
ww.c:    ||   victim->in_room->vnum == ch->in_room->vnum)
ww.c:    if ( ch->power[DISC_WERE_HAWK] < 7 )
ww.c:    if ( ch->gnosis[GCURRENT] < 3 )
ww.c:    ch->gnosis[CURRENT] -= 3;
ww.c:        if ( ch->power[DISC_WERE_WOLF] < 4 )
ww.c:      REMOVE_BIT(ch->garou1, WOLF_RAZORCLAWS);
ww.c:        SET_BIT( ch->garou1, WOLF_RAZORCLAWS );
